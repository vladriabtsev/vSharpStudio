using System;
using System.Linq;
using ViewModelBase;
using FluentValidation;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Threading;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using vSharpStudio.common;
using vSharpStudio.common.ViewModels;
using Google.Protobuf;
using System.Diagnostics;

namespace vSharpStudio.vm.ViewModels // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\NameSpace.tt Line:24
{
    // TODO investigate  https://docs.microsoft.com/en-us/visualstudio/debugger/using-debuggertypeproxy-attribute?view=vs-2017
    // TODO create debugger display for Property, ... https://docs.microsoft.com/en-us/visualstudio/debugger/using-the-debuggerdisplay-attribute?view=vs-2017
    // TODO create visualizers for Property, Catalog, Document, Constants https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-visualizers-of-data?view=vs-2017

    public interface IConfigAcceptVisitor // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\NameSpace.tt Line:30
    {
        void AcceptConfigNodeVisitor(ConfigVisitor visitor);
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class UserSettingsValidator : ValidatorBase<UserSettings, UserSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class UserSettings : VmValidatableWithSeverity<UserSettings, UserSettingsValidator>, IUserSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public UserSettings() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public UserSettings() 
            : base(UserSettingsValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this._ListOpenConfigHistory = new ObservableCollectionWithActions<UserSettingsOpenedConfig>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:61
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static UserSettings Clone(IUserSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            UserSettings vm = new UserSettings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.ListOpenConfigHistory = new ObservableCollectionWithActions<UserSettingsOpenedConfig>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListOpenConfigHistory) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListOpenConfigHistory.Add(UserSettingsOpenedConfig.Clone((UserSettingsOpenedConfig)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(UserSettings to, IUserSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListOpenConfigHistory.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListOpenConfigHistory)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            UserSettingsOpenedConfig.Update((UserSettingsOpenedConfig)t, (UserSettingsOpenedConfig)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListOpenConfigHistory.Remove(t);
                }
                foreach (var tt in from.ListOpenConfigHistory)
                {
                    bool isfound = false;
                    foreach (var t in to.ListOpenConfigHistory.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new UserSettingsOpenedConfig(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        UserSettingsOpenedConfig.Update(p, (UserSettingsOpenedConfig)tt, isDeep);
                        to.ListOpenConfigHistory.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override UserSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return UserSettings.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(UserSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            UserSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_user_settings' to 'UserSettings'
        public static UserSettings ConvertToVM(Proto.Config.proto_user_settings m, UserSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.ListOpenConfigHistory = new ObservableCollectionWithActions<UserSettingsOpenedConfig>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListOpenConfigHistory) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = UserSettingsOpenedConfig.ConvertToVM(t, new UserSettingsOpenedConfig()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListOpenConfigHistory.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'UserSettings' to 'proto_user_settings'
        public static Proto.Config.proto_user_settings ConvertToProto(UserSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_user_settings m = new Proto.Config.proto_user_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            foreach (var t in vm.ListOpenConfigHistory) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListOpenConfigHistory.Add(UserSettingsOpenedConfig.ConvertToProto((UserSettingsOpenedConfig)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListOpenConfigHistory)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public ObservableCollectionWithActions<UserSettingsOpenedConfig> ListOpenConfigHistory // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListOpenConfigHistory; }
            set
            {
                if (this._ListOpenConfigHistory != value)
                {
                    this.OnListOpenConfigHistoryChanging(value);
                    _ListOpenConfigHistory = value;
                    this.OnListOpenConfigHistoryChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<UserSettingsOpenedConfig> _ListOpenConfigHistory;
        IReadOnlyList<IUserSettingsOpenedConfig> IUserSettings.ListOpenConfigHistory { get { return (this as UserSettings).ListOpenConfigHistory; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListOpenConfigHistoryChanging(ObservableCollection<UserSettingsOpenedConfig> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListOpenConfigHistoryChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class UserSettingsOpenedConfigValidator : ValidatorBase<UserSettingsOpenedConfig, UserSettingsOpenedConfigValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class UserSettingsOpenedConfig : VmValidatableWithSeverity<UserSettingsOpenedConfig, UserSettingsOpenedConfigValidator>, IUserSettingsOpenedConfig // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public UserSettingsOpenedConfig() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public UserSettingsOpenedConfig() 
            : base(UserSettingsOpenedConfigValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static UserSettingsOpenedConfig Clone(IUserSettingsOpenedConfig from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            UserSettingsOpenedConfig vm = new UserSettingsOpenedConfig(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.OpenedLastTimeOn = from.OpenedLastTimeOn; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ConfigPath = from.ConfigPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(UserSettingsOpenedConfig to, IUserSettingsOpenedConfig from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.OpenedLastTimeOn = from.OpenedLastTimeOn; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ConfigPath = from.ConfigPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override UserSettingsOpenedConfig Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return UserSettingsOpenedConfig.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(UserSettingsOpenedConfig from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            UserSettingsOpenedConfig.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_user_settings_opened_config' to 'UserSettingsOpenedConfig'
        public static UserSettingsOpenedConfig ConvertToVM(Proto.Config.proto_user_settings_opened_config m, UserSettingsOpenedConfig vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.OpenedLastTimeOn = m.OpenedLastTimeOn; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ConfigPath = m.ConfigPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'UserSettingsOpenedConfig' to 'proto_user_settings_opened_config'
        public static Proto.Config.proto_user_settings_opened_config ConvertToProto(UserSettingsOpenedConfig vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_user_settings_opened_config m = new Proto.Config.proto_user_settings_opened_config(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.OpenedLastTimeOn = vm.OpenedLastTimeOn; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ConfigPath = vm.ConfigPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Browsable(false)]
        public Google.Protobuf.WellKnownTypes.Timestamp OpenedLastTimeOn // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._OpenedLastTimeOn; }
            set
            {
                if (this._OpenedLastTimeOn != value)
                {
                    this.OnOpenedLastTimeOnChanging(ref value);
                    this._OpenedLastTimeOn = value;
                    this.OnOpenedLastTimeOnChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private Google.Protobuf.WellKnownTypes.Timestamp _OpenedLastTimeOn = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(DateTime.MinValue.AddDays(1).ToUniversalTime());
        partial void OnOpenedLastTimeOnChanging(ref Google.Protobuf.WellKnownTypes.Timestamp to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnOpenedLastTimeOnChanged();
        //IGoogle.Protobuf.WellKnownTypes.Timestamp IUserSettingsOpenedConfig.OpenedLastTimeOn { get { return this._OpenedLastTimeOn; } }
        
        [Browsable(false)]
        public string ConfigPath // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ConfigPath; }
            set
            {
                if (this._ConfigPath != value)
                {
                    this.OnConfigPathChanging(ref value);
                    this._ConfigPath = value;
                    this.OnConfigPathChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ConfigPath = string.Empty;
        partial void OnConfigPathChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnConfigPathChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListPluginsValidator : ValidatorBase<GroupListPlugins, GroupListPluginsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListPlugins : ConfigObjectVmBase<GroupListPlugins, GroupListPluginsValidator>, IComparable<GroupListPlugins>, IConfigAcceptVisitor, IGroupListPlugins // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListPlugins(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListPluginsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListPlugins = new ConfigNodesCollection<Plugin>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Plugin)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListPlugins.Sort();
            }
        }
        public static GroupListPlugins Clone(ITreeConfigNode? parent, IGroupListPlugins from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListPlugins vm = new GroupListPlugins(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListPlugins = new ConfigNodesCollection<Plugin>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListPlugins) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListPlugins.Add(Plugin.Clone(vm, (Plugin)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListPlugins to, IGroupListPlugins from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListPlugins.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListPlugins)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Plugin.Update((Plugin)t, (Plugin)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListPlugins.Remove(t);
                }
                foreach (var tt in from.ListPlugins)
                {
                    bool isfound = false;
                    foreach (var t in to.ListPlugins.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Plugin(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Plugin.Update(p, (Plugin)tt, isDeep);
                        to.ListPlugins.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListPlugins Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListPlugins.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListPlugins from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListPlugins.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_plugins' to 'GroupListPlugins'
        public static GroupListPlugins ConvertToVM(Proto.Config.proto_group_list_plugins m, GroupListPlugins vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListPlugins = new ConfigNodesCollection<Plugin>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListPlugins) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Plugin.ConvertToVM(t, new Plugin(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListPlugins.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListPlugins' to 'proto_group_list_plugins'
        public static Proto.Config.proto_group_list_plugins ConvertToProto(GroupListPlugins vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_plugins m = new Proto.Config.proto_group_list_plugins(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListPlugins) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListPlugins.Add(Plugin.ConvertToProto((Plugin)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListPlugins)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        [DisplayName("Plugins")]
        [Description("Contains all registered plugins as children")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Plugin> ListPlugins // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListPlugins; }
            set
            {
                if (this._ListPlugins != value)
                {
                    this.OnListPluginsChanging(value);
                    _ListPlugins = value;
                    this.OnListPluginsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Plugin> _ListPlugins;
        IReadOnlyList<IPlugin> IGroupListPlugins.ListPlugins { get { return (this as GroupListPlugins).ListPlugins; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListPluginsChanging(ObservableCollection<Plugin> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListPluginsChanged();
        public Plugin this[int index] { get { return (Plugin)this.ListPlugins[index]; } }
        IPlugin IGroupListPlugins.this[int index] { get { return (Plugin)this.ListPlugins[index]; } }
        public void Add(Plugin item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListPlugins.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Plugin> items) 
        { 
            Debug.Assert(items != null);
            this.ListPlugins.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListPlugins.Count; }
        int IGroupListPlugins.Count() { return this.Count(); }
        public void Remove(Plugin item) 
        {
            Debug.Assert(item != null);
            this.ListPlugins.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class PluginValidator : ValidatorBase<Plugin, PluginValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Plugin : ConfigObjectVmBase<Plugin, PluginValidator>, IComparable<Plugin>, IConfigAcceptVisitor, IPlugin // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Plugin(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListGenerators = new ConfigNodesCollection<PluginGenerator>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGenerator)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListGenerators.Sort();
            }
        }
        public static Plugin Clone(ITreeConfigNode? parent, IPlugin from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Plugin vm = new Plugin(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListGenerators = new ConfigNodesCollection<PluginGenerator>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListGenerators.Add(PluginGenerator.Clone(vm, (PluginGenerator)t, isDeep));
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Plugin to, IPlugin from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListGenerators.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListGenerators)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGenerator.Update((PluginGenerator)t, (PluginGenerator)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListGenerators.Remove(t);
                }
                foreach (var tt in from.ListGenerators)
                {
                    bool isfound = false;
                    foreach (var t in to.ListGenerators.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGenerator(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGenerator.Update(p, (PluginGenerator)tt, isDeep);
                        to.ListGenerators.Add(p);
                    }
                }
            }
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Plugin Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Plugin.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Plugin from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Plugin.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin' to 'Plugin'
        public static Plugin ConvertToVM(Proto.Config.proto_plugin m, Plugin vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Version = m.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListGenerators = new ConfigNodesCollection<PluginGenerator>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGenerator.ConvertToVM(t, new PluginGenerator(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListGenerators.Add(tvm);
            }
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Plugin' to 'proto_plugin'
        public static Proto.Config.proto_plugin ConvertToProto(Plugin vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin m = new Proto.Config.proto_plugin(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Version = vm.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGenerators.Add(PluginGenerator.ConvertToProto((PluginGenerator)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListGenerators)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [ReadOnly(true)]
        public string Version // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Version; }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(ref value);
                    this._Version = value;
                    this.OnVersionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Version = string.Empty;
        partial void OnVersionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        [Description("Name of plugin")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [ReadOnly(true)]
        [Description("Description of plugin")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGenerator> ListGenerators // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGenerators; }
            set
            {
                if (this._ListGenerators != value)
                {
                    this.OnListGeneratorsChanging(value);
                    _ListGenerators = value;
                    this.OnListGeneratorsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGenerator> _ListGenerators;
        IReadOnlyList<IPluginGenerator> IPlugin.ListGenerators { get { return (this as Plugin).ListGenerators; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGeneratorsChanging(ObservableCollection<PluginGenerator> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGeneratorsChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class PluginGeneratorValidator : ValidatorBase<PluginGenerator, PluginGeneratorValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGenerator : ConfigObjectVmBase<PluginGenerator, PluginGeneratorValidator>, IComparable<PluginGenerator>, IConfigAcceptVisitor, IPluginGenerator // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGenerator(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            // throw new Exception();
        }
        public static PluginGenerator Clone(ITreeConfigNode? parent, IPluginGenerator from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGenerator vm = new PluginGenerator(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGenerator to, IPluginGenerator from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGenerator Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGenerator.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGenerator from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGenerator.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator' to 'PluginGenerator'
        public static PluginGenerator ConvertToVM(Proto.Config.proto_plugin_generator m, PluginGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGenerator' to 'proto_plugin_generator'
        public static Proto.Config.proto_plugin_generator ConvertToProto(PluginGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator m = new Proto.Config.proto_plugin_generator(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        [Description("Name of plugin")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [ReadOnly(true)]
        [Description("Description of plugin")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: False 
    //    IsISortingValue: False 
    public partial class SettingsConfigValidator : ValidatorBase<SettingsConfig, SettingsConfigValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class SettingsConfig : VmEditable<SettingsConfig>, ISettingsConfig // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public SettingsConfig() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public SettingsConfig() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static SettingsConfig Clone(ISettingsConfig from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            SettingsConfig vm = new SettingsConfig(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.VersionMigrationCurrent = from.VersionMigrationCurrent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.VersionMigrationSupportFromMin = from.VersionMigrationSupportFromMin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(SettingsConfig to, ISettingsConfig from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.VersionMigrationCurrent = from.VersionMigrationCurrent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.VersionMigrationSupportFromMin = from.VersionMigrationSupportFromMin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override SettingsConfig Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return SettingsConfig.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(SettingsConfig from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            SettingsConfig.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_settings_config' to 'SettingsConfig'
        public static SettingsConfig ConvertToVM(Proto.Config.proto_settings_config m, SettingsConfig vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.VersionMigrationCurrent = m.VersionMigrationCurrent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.VersionMigrationSupportFromMin = m.VersionMigrationSupportFromMin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'SettingsConfig' to 'proto_settings_config'
        public static Proto.Config.proto_settings_config ConvertToProto(SettingsConfig vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_settings_config m = new Proto.Config.proto_settings_config(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.VersionMigrationCurrent = vm.VersionMigrationCurrent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.VersionMigrationSupportFromMin = vm.VersionMigrationSupportFromMin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Name = string.Empty;
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _NameUi = string.Empty;
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // current migration version, increased by one on each deployment
        public int VersionMigrationCurrent // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._VersionMigrationCurrent; }
            set
            {
                if (this._VersionMigrationCurrent != value)
                {
                    this.OnVersionMigrationCurrentChanging(ref value);
                    this._VersionMigrationCurrent = value;
                    this.OnVersionMigrationCurrentChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private int _VersionMigrationCurrent;
        partial void OnVersionMigrationCurrentChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionMigrationCurrentChanged();
        
        // min version supported by current version for migration
        public int VersionMigrationSupportFromMin // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._VersionMigrationSupportFromMin; }
            set
            {
                if (this._VersionMigrationSupportFromMin != value)
                {
                    this.OnVersionMigrationSupportFromMinChanging(ref value);
                    this._VersionMigrationSupportFromMin = value;
                    this.OnVersionMigrationSupportFromMinChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private int _VersionMigrationSupportFromMin;
        partial void OnVersionMigrationSupportFromMinChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionMigrationSupportFromMinChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: False 
    //    IsISortingValue: False 
    public partial class ConfigShortHistoryValidator : ValidatorBase<ConfigShortHistory, ConfigShortHistoryValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class ConfigShortHistory : VmEditable<ConfigShortHistory>, IConfigShortHistory // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public ConfigShortHistory() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public ConfigShortHistory() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this._CurrentConfig = new Config(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:70
            this._PrevStableConfig = new Config(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:70
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static ConfigShortHistory Clone(IConfigShortHistory from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            ConfigShortHistory vm = new ConfigShortHistory(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.CurrentConfig = vSharpStudio.vm.ViewModels.Config.Clone(vm, from.CurrentConfig, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.PrevStableConfig = vSharpStudio.vm.ViewModels.Config.Clone(vm, from.PrevStableConfig, isDeep);
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(ConfigShortHistory to, IConfigShortHistory from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.Config.Update((Config)to.CurrentConfig, from.CurrentConfig, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.Config.Update((Config)to.PrevStableConfig, from.PrevStableConfig, isDeep);
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override ConfigShortHistory Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return ConfigShortHistory.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(ConfigShortHistory from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            ConfigShortHistory.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_config_short_history' to 'ConfigShortHistory'
        public static ConfigShortHistory ConvertToVM(Proto.Config.proto_config_short_history m, ConfigShortHistory vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.CurrentConfig == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.CurrentConfig = new Config(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.Config.ConvertToVM(m.CurrentConfig, (Config)vm.CurrentConfig); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.PrevStableConfig == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.PrevStableConfig = new Config(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.Config.ConvertToVM(m.PrevStableConfig, (Config)vm.PrevStableConfig); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'ConfigShortHistory' to 'proto_config_short_history'
        public static Proto.Config.proto_config_short_history ConvertToProto(ConfigShortHistory vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_config_short_history m = new Proto.Config.proto_config_short_history(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.CurrentConfig = vSharpStudio.vm.ViewModels.Config.ConvertToProto((Config)vm.CurrentConfig); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.PrevStableConfig = vSharpStudio.vm.ViewModels.Config.ConvertToProto((Config)vm.PrevStableConfig); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            return m;
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Name = string.Empty;
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        public Config CurrentConfig // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._CurrentConfig; }
            set
            {
                if (this._CurrentConfig != value)
                {
                    this.OnCurrentConfigChanging(ref value);
                    this._CurrentConfig = value;
                    this.OnCurrentConfigChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private Config _CurrentConfig;
        IConfig IConfigShortHistory.CurrentConfig { get { return (this as ConfigShortHistory).CurrentConfig; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnCurrentConfigChanging(ref Config to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCurrentConfigChanged();
        //IConfig IConfigShortHistory.CurrentConfig { get { return this._CurrentConfig; } }
        
        public Config PrevStableConfig // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrevStableConfig; }
            set
            {
                if (this._PrevStableConfig != value)
                {
                    this.OnPrevStableConfigChanging(ref value);
                    this._PrevStableConfig = value;
                    this.OnPrevStableConfigChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private Config _PrevStableConfig;
        IConfig IConfigShortHistory.PrevStableConfig { get { return (this as ConfigShortHistory).PrevStableConfig; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnPrevStableConfigChanging(ref Config to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrevStableConfigChanged();
        //IConfig IConfigShortHistory.PrevStableConfig { get { return this._PrevStableConfig; } }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListBaseConfigLinksValidator : ValidatorBase<GroupListBaseConfigLinks, GroupListBaseConfigLinksValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListBaseConfigLinks : ConfigObjectVmBase<GroupListBaseConfigLinks, GroupListBaseConfigLinksValidator>, IComparable<GroupListBaseConfigLinks>, IConfigAcceptVisitor, IGroupListBaseConfigLinks // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListBaseConfigLinks(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListBaseConfigLinksValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListBaseConfigLinks = new ConfigNodesCollection<BaseConfigLink>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(BaseConfigLink)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListBaseConfigLinks.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListBaseConfigLinks Clone(ITreeConfigNode? parent, IGroupListBaseConfigLinks from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListBaseConfigLinks vm = new GroupListBaseConfigLinks(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListBaseConfigLinks = new ConfigNodesCollection<BaseConfigLink>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListBaseConfigLinks) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListBaseConfigLinks.Add(BaseConfigLink.Clone(vm, (BaseConfigLink)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListBaseConfigLinks to, IGroupListBaseConfigLinks from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListBaseConfigLinks.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListBaseConfigLinks)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            BaseConfigLink.Update((BaseConfigLink)t, (BaseConfigLink)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListBaseConfigLinks.Remove(t);
                }
                foreach (var tt in from.ListBaseConfigLinks)
                {
                    bool isfound = false;
                    foreach (var t in to.ListBaseConfigLinks.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new BaseConfigLink(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        BaseConfigLink.Update(p, (BaseConfigLink)tt, isDeep);
                        to.ListBaseConfigLinks.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListBaseConfigLinks Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListBaseConfigLinks.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListBaseConfigLinks from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListBaseConfigLinks.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_base_config_links' to 'GroupListBaseConfigLinks'
        public static GroupListBaseConfigLinks ConvertToVM(Proto.Config.proto_group_list_base_config_links m, GroupListBaseConfigLinks vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListBaseConfigLinks = new ConfigNodesCollection<BaseConfigLink>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListBaseConfigLinks) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = BaseConfigLink.ConvertToVM(t, new BaseConfigLink(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListBaseConfigLinks.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListBaseConfigLinks' to 'proto_group_list_base_config_links'
        public static Proto.Config.proto_group_list_base_config_links ConvertToProto(GroupListBaseConfigLinks vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_base_config_links m = new Proto.Config.proto_group_list_base_config_links(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListBaseConfigLinks) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListBaseConfigLinks.Add(BaseConfigLink.ConvertToProto((BaseConfigLink)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListBaseConfigLinks)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [ReadOnly(true)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<BaseConfigLink> ListBaseConfigLinks // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListBaseConfigLinks; }
            set
            {
                if (this._ListBaseConfigLinks != value)
                {
                    this.OnListBaseConfigLinksChanging(value);
                    _ListBaseConfigLinks = value;
                    this.OnListBaseConfigLinksChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<BaseConfigLink> _ListBaseConfigLinks;
        IReadOnlyList<IBaseConfigLink> IGroupListBaseConfigLinks.ListBaseConfigLinks { get { return (this as GroupListBaseConfigLinks).ListBaseConfigLinks; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListBaseConfigLinksChanging(ObservableCollection<BaseConfigLink> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListBaseConfigLinksChanged();
        public BaseConfigLink this[int index] { get { return (BaseConfigLink)this.ListBaseConfigLinks[index]; } }
        IBaseConfigLink IGroupListBaseConfigLinks.this[int index] { get { return (BaseConfigLink)this.ListBaseConfigLinks[index]; } }
        public void Add(BaseConfigLink item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListBaseConfigLinks.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<BaseConfigLink> items) 
        { 
            Debug.Assert(items != null);
            this.ListBaseConfigLinks.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListBaseConfigLinks.Count; }
        int IGroupListBaseConfigLinks.Count() { return this.Count(); }
        public void Remove(BaseConfigLink item) 
        {
            Debug.Assert(item != null);
            this.ListBaseConfigLinks.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListBaseConfigLinks.ListNodeGeneratorsSettings { get { return (this as GroupListBaseConfigLinks).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class BaseConfigLinkValidator : ValidatorBase<BaseConfigLink, BaseConfigLinkValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class BaseConfigLink : ConfigObjectVmBase<BaseConfigLink, BaseConfigLinkValidator>, IComparable<BaseConfigLink>, IConfigAcceptVisitor, IBaseConfigLink // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public BaseConfigLink(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, BaseConfigLinkValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static BaseConfigLink Clone(ITreeConfigNode? parent, IBaseConfigLink from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            BaseConfigLink vm = new BaseConfigLink(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RelativeConfigFilePath = from.RelativeConfigFilePath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(BaseConfigLink to, IBaseConfigLink from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RelativeConfigFilePath = from.RelativeConfigFilePath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override BaseConfigLink Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return BaseConfigLink.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(BaseConfigLink from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            BaseConfigLink.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_base_config_link' to 'BaseConfigLink'
        public static BaseConfigLink ConvertToVM(Proto.Config.proto_base_config_link m, BaseConfigLink vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RelativeConfigFilePath = m.RelativeConfigFilePath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'BaseConfigLink' to 'proto_base_config_link'
        public static Proto.Config.proto_base_config_link ConvertToProto(BaseConfigLink vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_base_config_link m = new Proto.Config.proto_base_config_link(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RelativeConfigFilePath = vm.RelativeConfigFilePath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [ReadOnly(true)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [ReadOnly(true)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(6)]
        [Editor(typeof(EditorBaseConfigFilePicker), typeof(ITypeEditor))]
        public string RelativeConfigFilePath // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RelativeConfigFilePath; }
            set
            {
                if (this._RelativeConfigFilePath != value)
                {
                    this.OnRelativeConfigFilePathChanging(ref value);
                    this._RelativeConfigFilePath = value;
                    this.OnRelativeConfigFilePathChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RelativeConfigFilePath = string.Empty;
        partial void OnRelativeConfigFilePathChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRelativeConfigFilePathChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IBaseConfigLink.ListNodeGeneratorsSettings { get { return (this as BaseConfigLink).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class ConfigValidator : ValidatorBase<Config, ConfigValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Configuration config
    public partial class Config : ConfigObjectVmGenSettings<Config, ConfigValidator>, IComparable<Config>, IConfigAcceptVisitor, IConfig // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Config(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, ConfigValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupConfigLinks = new GroupListBaseConfigLinks(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._Model = new Model(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupPlugins = new GroupListPlugins(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupAppSolutions = new GroupListAppSolutions(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            // throw new Exception();
        }
        public static Config Clone(ITreeConfigNode? parent, IConfig from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Config vm = new Config(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LastUpdated = from.LastUpdated; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNeedCurrentUpdate = from.IsNeedCurrentUpdate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupConfigLinks = vSharpStudio.vm.ViewModels.GroupListBaseConfigLinks.Clone(vm, from.GroupConfigLinks, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.Model = vSharpStudio.vm.ViewModels.Model.Clone(vm, from.Model, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupPlugins = vSharpStudio.vm.ViewModels.GroupListPlugins.Clone(vm, from.GroupPlugins, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupAppSolutions = vSharpStudio.vm.ViewModels.GroupListAppSolutions.Clone(vm, from.GroupAppSolutions, isDeep);
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Config to, IConfig from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LastUpdated = from.LastUpdated; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNeedCurrentUpdate = from.IsNeedCurrentUpdate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListBaseConfigLinks.Update((GroupListBaseConfigLinks)to.GroupConfigLinks, from.GroupConfigLinks, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.Model.Update((Model)to.Model, from.Model, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListPlugins.Update((GroupListPlugins)to.GroupPlugins, from.GroupPlugins, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListAppSolutions.Update((GroupListAppSolutions)to.GroupAppSolutions, from.GroupAppSolutions, isDeep);
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Config Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Config.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Config from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Config.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_config' to 'Config'
        public static Config ConvertToVM(Proto.Config.proto_config m, Config vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Version = m.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LastUpdated = m.LastUpdated; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNeedCurrentUpdate = m.IsNeedCurrentUpdate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupConfigLinks == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupConfigLinks = new GroupListBaseConfigLinks(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListBaseConfigLinks.ConvertToVM(m.GroupConfigLinks, (GroupListBaseConfigLinks)vm.GroupConfigLinks); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.Model == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.Model = new Model(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.Model.ConvertToVM(m.Model, (Model)vm.Model); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupPlugins == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupPlugins = new GroupListPlugins(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListPlugins.ConvertToVM(m.GroupPlugins, (GroupListPlugins)vm.GroupPlugins); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupAppSolutions == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupAppSolutions = new GroupListAppSolutions(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListAppSolutions.ConvertToVM(m.GroupAppSolutions, (GroupListAppSolutions)vm.GroupAppSolutions); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Config' to 'proto_config'
        public static Proto.Config.proto_config ConvertToProto(Config vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_config m = new Proto.Config.proto_config(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Version = vm.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LastUpdated = vm.LastUpdated; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNeedCurrentUpdate = vm.IsNeedCurrentUpdate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupConfigLinks = vSharpStudio.vm.ViewModels.GroupListBaseConfigLinks.ConvertToProto((GroupListBaseConfigLinks)vm.GroupConfigLinks); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.Model = vSharpStudio.vm.ViewModels.Model.ConvertToProto((Model)vm.Model); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupPlugins = vSharpStudio.vm.ViewModels.GroupListPlugins.ConvertToProto((GroupListPlugins)vm.GroupPlugins); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupAppSolutions = vSharpStudio.vm.ViewModels.GroupListAppSolutions.ConvertToProto((GroupListAppSolutions)vm.GroupAppSolutions); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupConfigLinks.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.Model.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupPlugins.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupAppSolutions.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [ReadOnly(true)]
        public int Version // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Version; }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(ref value);
                    this._Version = value;
                    this.OnVersionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _Version;
        partial void OnVersionChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [ReadOnly(true)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(6)]
        public Google.Protobuf.WellKnownTypes.Timestamp LastUpdated // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastUpdated; }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(ref value);
                    this._LastUpdated = value;
                    this.OnLastUpdatedChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private Google.Protobuf.WellKnownTypes.Timestamp _LastUpdated = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(DateTime.MinValue.AddDays(1).ToUniversalTime());
        partial void OnLastUpdatedChanging(ref Google.Protobuf.WellKnownTypes.Timestamp to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastUpdatedChanged();
        //IGoogle.Protobuf.WellKnownTypes.Timestamp IConfig.LastUpdated { get { return this._LastUpdated; } }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        // / <summary>
        // / True if configuration was changed since last code generation.
        // / Set by SetIsNeedCurrentUpdate(bool val) function.
        // / </summary>
        [Browsable(false)]
        public bool IsNeedCurrentUpdate // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNeedCurrentUpdate; }
            set
            {
                if (this._IsNeedCurrentUpdate != value)
                {
                    this.OnIsNeedCurrentUpdateChanging(ref value);
                    this._IsNeedCurrentUpdate = value;
                    this.OnIsNeedCurrentUpdateChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNeedCurrentUpdate;
        partial void OnIsNeedCurrentUpdateChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNeedCurrentUpdateChanged();
        
        [Browsable(false)]
        public GroupListBaseConfigLinks GroupConfigLinks // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupConfigLinks; }
            set
            {
                if (this._GroupConfigLinks != value)
                {
                    this.OnGroupConfigLinksChanging(ref value);
                    this._GroupConfigLinks = value;
                    this.OnGroupConfigLinksChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListBaseConfigLinks _GroupConfigLinks;
        IGroupListBaseConfigLinks IConfig.GroupConfigLinks { get { return (this as Config).GroupConfigLinks; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupConfigLinksChanging(ref GroupListBaseConfigLinks to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupConfigLinksChanged();
        //IGroupListBaseConfigLinks IConfig.GroupConfigLinks { get { return this._GroupConfigLinks; } }
        
        [Browsable(false)]
        public Model Model // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Model; }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(ref value);
                    this._Model = value;
                    this.OnModelChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private Model _Model;
        IModel IConfig.Model { get { return (this as Config).Model; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnModelChanging(ref Model to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnModelChanged();
        //IModel IConfig.Model { get { return this._Model; } }
        
        [Browsable(false)]
        public GroupListPlugins GroupPlugins // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupPlugins; }
            set
            {
                if (this._GroupPlugins != value)
                {
                    this.OnGroupPluginsChanging(ref value);
                    this._GroupPlugins = value;
                    this.OnGroupPluginsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListPlugins _GroupPlugins;
        IGroupListPlugins IConfig.GroupPlugins { get { return (this as Config).GroupPlugins; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupPluginsChanging(ref GroupListPlugins to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupPluginsChanged();
        //IGroupListPlugins IConfig.GroupPlugins { get { return this._GroupPlugins; } }
        
        [Browsable(false)]
        public GroupListAppSolutions GroupAppSolutions // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupAppSolutions; }
            set
            {
                if (this._GroupAppSolutions != value)
                {
                    this.OnGroupAppSolutionsChanging(ref value);
                    this._GroupAppSolutions = value;
                    this.OnGroupAppSolutionsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListAppSolutions _GroupAppSolutions;
        IGroupListAppSolutions IConfig.GroupAppSolutions { get { return (this as Config).GroupAppSolutions; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupAppSolutionsChanging(ref GroupListAppSolutions to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupAppSolutionsChanged();
        //IGroupListAppSolutions IConfig.GroupAppSolutions { get { return this._GroupAppSolutions; } }
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class AppDbSettingsValidator : ValidatorBase<AppDbSettings, AppDbSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class AppDbSettings : VmValidatable<AppDbSettings, AppDbSettingsValidator>, IAppDbSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public AppDbSettings() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public AppDbSettings() 
            : base(AppDbSettingsValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static AppDbSettings Clone(IAppDbSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            AppDbSettings vm = new AppDbSettings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.PluginGuid = from.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PluginName = from.PluginName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PluginGenGuid = from.PluginGenGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PluginGenName = from.PluginGenName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ConnGuid = from.ConnGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ConnName = from.ConnName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(AppDbSettings to, IAppDbSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.PluginGuid = from.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PluginName = from.PluginName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PluginGenGuid = from.PluginGenGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PluginGenName = from.PluginGenName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ConnGuid = from.ConnGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ConnName = from.ConnName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override AppDbSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return AppDbSettings.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(AppDbSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            AppDbSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_app_db_settings' to 'AppDbSettings'
        public static AppDbSettings ConvertToVM(Proto.Config.proto_app_db_settings m, AppDbSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.PluginGuid = m.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PluginName = m.PluginName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Version = m.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PluginGenGuid = m.PluginGenGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PluginGenName = m.PluginGenName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ConnGuid = m.ConnGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ConnName = m.ConnName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'AppDbSettings' to 'proto_app_db_settings'
        public static Proto.Config.proto_app_db_settings ConvertToProto(AppDbSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_app_db_settings m = new Proto.Config.proto_app_db_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.PluginGuid = vm.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PluginName = vm.PluginName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Version = vm.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PluginGenGuid = vm.PluginGenGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PluginGenName = vm.PluginGenName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ConnGuid = vm.ConnGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ConnName = vm.ConnName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(1)]
        [Editor(typeof(EditorDbPluginSelection), typeof(EditorDbPluginSelection))]
        [Description("Default DB Plugin")]
        public string PluginGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginGuid; }
            set
            {
                if (this._PluginGuid != value)
                {
                    this.OnPluginGuidChanging(ref value);
                    this._PluginGuid = value;
                    this.OnPluginGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginGuid = string.Empty;
        partial void OnPluginGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginGuidChanged();
        
        [PropertyOrderAttribute(2)]
        [ReadOnly(true)]
        public string PluginName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginName; }
            set
            {
                if (this._PluginName != value)
                {
                    this.OnPluginNameChanging(ref value);
                    this._PluginName = value;
                    this.OnPluginNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginName = string.Empty;
        partial void OnPluginNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginNameChanged();
        
        [PropertyOrderAttribute(3)]
        [ReadOnly(true)]
        public string Version // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Version; }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(ref value);
                    this._Version = value;
                    this.OnVersionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Version = string.Empty;
        partial void OnVersionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionChanged();
        
        [PropertyOrderAttribute(4)]
        [Editor(typeof(EditorDbPluginGenSelection), typeof(EditorDbPluginGenSelection))]
        [Description("Default DB Plugin generator")]
        public string PluginGenGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginGenGuid; }
            set
            {
                if (this._PluginGenGuid != value)
                {
                    this.OnPluginGenGuidChanging(ref value);
                    this._PluginGenGuid = value;
                    this.OnPluginGenGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginGenGuid = string.Empty;
        partial void OnPluginGenGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginGenGuidChanged();
        
        [PropertyOrderAttribute(5)]
        [ReadOnly(true)]
        public string PluginGenName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginGenName; }
            set
            {
                if (this._PluginGenName != value)
                {
                    this.OnPluginGenNameChanging(ref value);
                    this._PluginGenName = value;
                    this.OnPluginGenNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginGenName = string.Empty;
        partial void OnPluginGenNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginGenNameChanged();
        
        [PropertyOrderAttribute(6)]
        [Editor(typeof(EditorDbConnSelection), typeof(EditorDbConnSelection))]
        [Description("Default DB connection string")]
        public string ConnGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ConnGuid; }
            set
            {
                if (this._ConnGuid != value)
                {
                    this.OnConnGuidChanging(ref value);
                    this._ConnGuid = value;
                    this.OnConnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ConnGuid = string.Empty;
        partial void OnConnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnConnGuidChanged();
        
        [PropertyOrderAttribute(7)]
        [ReadOnly(true)]
        public string ConnName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ConnName; }
            set
            {
                if (this._ConnName != value)
                {
                    this.OnConnNameChanging(ref value);
                    this._ConnName = value;
                    this.OnConnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ConnName = string.Empty;
        partial void OnConnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnConnNameChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class PluginGeneratorSolutionSettingsValidator : ValidatorBase<PluginGeneratorSolutionSettings, PluginGeneratorSolutionSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGeneratorSolutionSettings : BaseSettings<PluginGeneratorSolutionSettings, PluginGeneratorSolutionSettingsValidator>, IPluginGeneratorSolutionSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGeneratorSolutionSettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorSolutionSettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static PluginGeneratorSolutionSettings Clone(ITreeConfigNode? parent, IPluginGeneratorSolutionSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGeneratorSolutionSettings vm = new PluginGeneratorSolutionSettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGeneratorSolutionSettings to, IPluginGeneratorSolutionSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGeneratorSolutionSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGeneratorSolutionSettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGeneratorSolutionSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGeneratorSolutionSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator_solution_settings' to 'PluginGeneratorSolutionSettings'
        public static PluginGeneratorSolutionSettings ConvertToVM(Proto.Config.proto_plugin_generator_solution_settings m, PluginGeneratorSolutionSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Settings = m.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGeneratorSolutionSettings' to 'proto_plugin_generator_solution_settings'
        public static Proto.Config.proto_plugin_generator_solution_settings ConvertToProto(PluginGeneratorSolutionSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator_solution_settings m = new Proto.Config.proto_plugin_generator_solution_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Settings = vm.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        // string app_generator_guid = 2;
        public string Settings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Settings; }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(ref value);
                    this._Settings = value;
                    this.OnSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Settings = string.Empty;
        partial void OnSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class PluginGeneratorProjectSettingsValidator : ValidatorBase<PluginGeneratorProjectSettings, PluginGeneratorProjectSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGeneratorProjectSettings : BaseSettings<PluginGeneratorProjectSettings, PluginGeneratorProjectSettingsValidator>, IPluginGeneratorProjectSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGeneratorProjectSettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorProjectSettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static PluginGeneratorProjectSettings Clone(ITreeConfigNode? parent, IPluginGeneratorProjectSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGeneratorProjectSettings vm = new PluginGeneratorProjectSettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGeneratorProjectSettings to, IPluginGeneratorProjectSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGeneratorProjectSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGeneratorProjectSettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGeneratorProjectSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGeneratorProjectSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator_project_settings' to 'PluginGeneratorProjectSettings'
        public static PluginGeneratorProjectSettings ConvertToVM(Proto.Config.proto_plugin_generator_project_settings m, PluginGeneratorProjectSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Settings = m.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGeneratorProjectSettings' to 'proto_plugin_generator_project_settings'
        public static Proto.Config.proto_plugin_generator_project_settings ConvertToProto(PluginGeneratorProjectSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator_project_settings m = new Proto.Config.proto_plugin_generator_project_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Settings = vm.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        // string app_generator_guid = 2;
        public string Settings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Settings; }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(ref value);
                    this._Settings = value;
                    this.OnSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Settings = string.Empty;
        partial void OnSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListAppSolutionsValidator : ValidatorBase<GroupListAppSolutions, GroupListAppSolutionsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListAppSolutions : ConfigObjectVmBase<GroupListAppSolutions, GroupListAppSolutionsValidator>, IComparable<GroupListAppSolutions>, IConfigAcceptVisitor, IGroupListAppSolutions // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListAppSolutions(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListAppSolutionsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListAppSolutions = new ConfigNodesCollection<AppSolution>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(AppSolution)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListAppSolutions.Sort();
            }
        }
        public static GroupListAppSolutions Clone(ITreeConfigNode? parent, IGroupListAppSolutions from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListAppSolutions vm = new GroupListAppSolutions(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListAppSolutions = new ConfigNodesCollection<AppSolution>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListAppSolutions) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListAppSolutions.Add(AppSolution.Clone(vm, (AppSolution)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListAppSolutions to, IGroupListAppSolutions from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListAppSolutions.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListAppSolutions)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            AppSolution.Update((AppSolution)t, (AppSolution)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListAppSolutions.Remove(t);
                }
                foreach (var tt in from.ListAppSolutions)
                {
                    bool isfound = false;
                    foreach (var t in to.ListAppSolutions.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new AppSolution(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        AppSolution.Update(p, (AppSolution)tt, isDeep);
                        to.ListAppSolutions.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListAppSolutions Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListAppSolutions.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListAppSolutions from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListAppSolutions.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_app_solutions' to 'GroupListAppSolutions'
        public static GroupListAppSolutions ConvertToVM(Proto.Config.proto_group_list_app_solutions m, GroupListAppSolutions vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListAppSolutions = new ConfigNodesCollection<AppSolution>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListAppSolutions) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = AppSolution.ConvertToVM(t, new AppSolution(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListAppSolutions.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListAppSolutions' to 'proto_group_list_app_solutions'
        public static Proto.Config.proto_group_list_app_solutions ConvertToProto(GroupListAppSolutions vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_app_solutions m = new Proto.Config.proto_group_list_app_solutions(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListAppSolutions) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListAppSolutions.Add(AppSolution.ConvertToProto((AppSolution)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListAppSolutions)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        // List NET solutions
        [Browsable(false)]
        public ConfigNodesCollection<AppSolution> ListAppSolutions // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListAppSolutions; }
            set
            {
                if (this._ListAppSolutions != value)
                {
                    this.OnListAppSolutionsChanging(value);
                    _ListAppSolutions = value;
                    this.OnListAppSolutionsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<AppSolution> _ListAppSolutions;
        IReadOnlyList<IAppSolution> IGroupListAppSolutions.ListAppSolutions { get { return (this as GroupListAppSolutions).ListAppSolutions; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListAppSolutionsChanging(ObservableCollection<AppSolution> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListAppSolutionsChanged();
        public AppSolution this[int index] { get { return (AppSolution)this.ListAppSolutions[index]; } }
        IAppSolution IGroupListAppSolutions.this[int index] { get { return (AppSolution)this.ListAppSolutions[index]; } }
        public void Add(AppSolution item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListAppSolutions.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<AppSolution> items) 
        { 
            Debug.Assert(items != null);
            this.ListAppSolutions.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListAppSolutions.Count; }
        int IGroupListAppSolutions.Count() { return this.Count(); }
        public void Remove(AppSolution item) 
        {
            Debug.Assert(item != null);
            this.ListAppSolutions.Remove(item); 
            item.Parent = null;
        }
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class AppSolutionValidator : ValidatorBase<AppSolution, AppSolutionValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class AppSolution : ConfigObjectVmBase<AppSolution, AppSolutionValidator>, IComparable<AppSolution>, IConfigAcceptVisitor, IAppSolution // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public AppSolution(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, AppSolutionValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListAppProjects = new ConfigNodesCollection<AppProject>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListGeneratorsSolutionSettings = new ObservableCollectionWithActions<PluginGeneratorSolutionSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(AppProject)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListAppProjects.Sort();
            }
        }
        public static AppSolution Clone(ITreeConfigNode? parent, IAppSolution from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            AppSolution vm = new AppSolution(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortIdForCacheKey = from.ShortIdForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RelativeAppSolutionPath = from.RelativeAppSolutionPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListAppProjects = new ConfigNodesCollection<AppProject>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListAppProjects) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListAppProjects.Add(AppProject.Clone(vm, (AppProject)t, isDeep));
            vm.ListGeneratorsSolutionSettings = new ObservableCollectionWithActions<PluginGeneratorSolutionSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListGeneratorsSolutionSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListGeneratorsSolutionSettings.Add(PluginGeneratorSolutionSettings.Clone(parent, (PluginGeneratorSolutionSettings)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(AppSolution to, IAppSolution from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortIdForCacheKey = from.ShortIdForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RelativeAppSolutionPath = from.RelativeAppSolutionPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListAppProjects.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListAppProjects)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            AppProject.Update((AppProject)t, (AppProject)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListAppProjects.Remove(t);
                }
                foreach (var tt in from.ListAppProjects)
                {
                    bool isfound = false;
                    foreach (var t in to.ListAppProjects.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new AppProject(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        AppProject.Update(p, (AppProject)tt, isDeep);
                        to.ListAppProjects.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListGeneratorsSolutionSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListGeneratorsSolutionSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorSolutionSettings.Update((PluginGeneratorSolutionSettings)t, (PluginGeneratorSolutionSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListGeneratorsSolutionSettings.Remove(t);
                }
                foreach (var tt in from.ListGeneratorsSolutionSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListGeneratorsSolutionSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorSolutionSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorSolutionSettings.Update(p, (PluginGeneratorSolutionSettings)tt, isDeep);
                        to.ListGeneratorsSolutionSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override AppSolution Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return AppSolution.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(AppSolution from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            AppSolution.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_app_solution' to 'AppSolution'
        public static AppSolution ConvertToVM(Proto.Config.proto_app_solution m, AppSolution vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortIdForCacheKey = m.ShortIdForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RelativeAppSolutionPath = m.RelativeAppSolutionPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListAppProjects = new ConfigNodesCollection<AppProject>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListAppProjects) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = AppProject.ConvertToVM(t, new AppProject(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListAppProjects.Add(tvm);
            }
            vm.ListGeneratorsSolutionSettings = new ObservableCollectionWithActions<PluginGeneratorSolutionSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:197
            foreach (var t in m.ListGeneratorsSolutionSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorSolutionSettings.ConvertToVM(t, new PluginGeneratorSolutionSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListGeneratorsSolutionSettings.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'AppSolution' to 'proto_app_solution'
        public static Proto.Config.proto_app_solution ConvertToProto(AppSolution vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_app_solution m = new Proto.Config.proto_app_solution(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortIdForCacheKey = vm.ShortIdForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RelativeAppSolutionPath = vm.RelativeAppSolutionPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListAppProjects) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListAppProjects.Add(AppProject.ConvertToProto((AppProject)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListGeneratorsSolutionSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGeneratorsSolutionSettings.Add(PluginGeneratorSolutionSettings.ConvertToProto((PluginGeneratorSolutionSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListAppProjects)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListGeneratorsSolutionSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(6)]
        [DisplayName("Short ID")]
        [Description("Short solution ID for cache key generator. Need if projects from different solutions will use same cache storage instance in deployment")]
        public string ShortIdForCacheKey // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortIdForCacheKey; }
            set
            {
                if (this._ShortIdForCacheKey != value)
                {
                    this.OnShortIdForCacheKeyChanging(ref value);
                    this._ShortIdForCacheKey = value;
                    this.OnShortIdForCacheKeyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ShortIdForCacheKey = string.Empty;
        partial void OnShortIdForCacheKeyChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdForCacheKeyChanged();
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Path")]
        [Editor(typeof(EditorSolutionPicker), typeof(ITypeEditor))]
        [Description(".NET solution file path relative to configuration file path")]
        public string RelativeAppSolutionPath // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RelativeAppSolutionPath; }
            set
            {
                if (this._RelativeAppSolutionPath != value)
                {
                    this.OnRelativeAppSolutionPathChanging(ref value);
                    this._RelativeAppSolutionPath = value;
                    this.OnRelativeAppSolutionPathChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RelativeAppSolutionPath = string.Empty;
        partial void OnRelativeAppSolutionPathChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRelativeAppSolutionPathChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [Browsable(false)]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<AppProject> ListAppProjects // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListAppProjects; }
            set
            {
                if (this._ListAppProjects != value)
                {
                    this.OnListAppProjectsChanging(value);
                    _ListAppProjects = value;
                    this.OnListAppProjectsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<AppProject> _ListAppProjects;
        IReadOnlyList<IAppProject> IAppSolution.ListAppProjects { get { return (this as AppSolution).ListAppProjects; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListAppProjectsChanging(ObservableCollection<AppProject> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListAppProjectsChanged();
        
        // 
        // repeated proto_plugin_group_generators_settings list_group_generators_settings = 18;
        [Browsable(false)]
        public ObservableCollectionWithActions<PluginGeneratorSolutionSettings> ListGeneratorsSolutionSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGeneratorsSolutionSettings; }
            set
            {
                if (this._ListGeneratorsSolutionSettings != value)
                {
                    this.OnListGeneratorsSolutionSettingsChanging(value);
                    _ListGeneratorsSolutionSettings = value;
                    this.OnListGeneratorsSolutionSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<PluginGeneratorSolutionSettings> _ListGeneratorsSolutionSettings;
        IReadOnlyList<IPluginGeneratorSolutionSettings> IAppSolution.ListGeneratorsSolutionSettings { get { return (this as AppSolution).ListGeneratorsSolutionSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGeneratorsSolutionSettingsChanging(ObservableCollection<PluginGeneratorSolutionSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGeneratorsSolutionSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_app_solution
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class AppProjectValidator : ValidatorBase<AppProject, AppProjectValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class AppProject : ConfigObjectVmBase<AppProject, AppProjectValidator>, IComparable<AppProject>, IConfigAcceptVisitor, IAppProject // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public AppProject(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, AppProjectValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListAppProjectGenerators = new ConfigNodesCollection<AppProjectGenerator>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListGeneratorsProjectSettings = new ObservableCollectionWithActions<PluginGeneratorProjectSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(AppProjectGenerator)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListAppProjectGenerators.Sort();
            }
        }
        public static AppProject Clone(ITreeConfigNode? parent, IAppProject from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            AppProject vm = new AppProject(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RelativeAppProjectPath = from.RelativeAppProjectPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListAppProjectGenerators = new ConfigNodesCollection<AppProjectGenerator>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListAppProjectGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListAppProjectGenerators.Add(AppProjectGenerator.Clone(vm, (AppProjectGenerator)t, isDeep));
            vm.ListGeneratorsProjectSettings = new ObservableCollectionWithActions<PluginGeneratorProjectSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListGeneratorsProjectSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListGeneratorsProjectSettings.Add(PluginGeneratorProjectSettings.Clone(parent, (PluginGeneratorProjectSettings)t, isDeep));
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(AppProject to, IAppProject from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RelativeAppProjectPath = from.RelativeAppProjectPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListAppProjectGenerators.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListAppProjectGenerators)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            AppProjectGenerator.Update((AppProjectGenerator)t, (AppProjectGenerator)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListAppProjectGenerators.Remove(t);
                }
                foreach (var tt in from.ListAppProjectGenerators)
                {
                    bool isfound = false;
                    foreach (var t in to.ListAppProjectGenerators.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new AppProjectGenerator(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        AppProjectGenerator.Update(p, (AppProjectGenerator)tt, isDeep);
                        to.ListAppProjectGenerators.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListGeneratorsProjectSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListGeneratorsProjectSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorProjectSettings.Update((PluginGeneratorProjectSettings)t, (PluginGeneratorProjectSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListGeneratorsProjectSettings.Remove(t);
                }
                foreach (var tt in from.ListGeneratorsProjectSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListGeneratorsProjectSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorProjectSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorProjectSettings.Update(p, (PluginGeneratorProjectSettings)tt, isDeep);
                        to.ListGeneratorsProjectSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override AppProject Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return AppProject.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(AppProject from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            AppProject.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_app_project' to 'AppProject'
        public static AppProject ConvertToVM(Proto.Config.proto_app_project m, AppProject vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RelativeAppProjectPath = m.RelativeAppProjectPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListAppProjectGenerators = new ConfigNodesCollection<AppProjectGenerator>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListAppProjectGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = AppProjectGenerator.ConvertToVM(t, new AppProjectGenerator(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListAppProjectGenerators.Add(tvm);
            }
            vm.ListGeneratorsProjectSettings = new ObservableCollectionWithActions<PluginGeneratorProjectSettings>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:197
            foreach (var t in m.ListGeneratorsProjectSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorProjectSettings.ConvertToVM(t, new PluginGeneratorProjectSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListGeneratorsProjectSettings.Add(tvm);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'AppProject' to 'proto_app_project'
        public static Proto.Config.proto_app_project ConvertToProto(AppProject vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_app_project m = new Proto.Config.proto_app_project(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RelativeAppProjectPath = vm.RelativeAppProjectPath; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListAppProjectGenerators) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListAppProjectGenerators.Add(AppProjectGenerator.ConvertToProto((AppProjectGenerator)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListGeneratorsProjectSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGeneratorsProjectSettings.Add(PluginGeneratorProjectSettings.ConvertToProto((PluginGeneratorProjectSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListAppProjectGenerators)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListGeneratorsProjectSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(6)]
        [DisplayName("Path")]
        [Editor(typeof(EditorProjectPicker), typeof(ITypeEditor))]
        [Description(".NET project file path relative to solution file path")]
        public string RelativeAppProjectPath // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RelativeAppProjectPath; }
            set
            {
                if (this._RelativeAppProjectPath != value)
                {
                    this.OnRelativeAppProjectPathChanging(ref value);
                    this._RelativeAppProjectPath = value;
                    this.OnRelativeAppProjectPathChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RelativeAppProjectPath = string.Empty;
        partial void OnRelativeAppProjectPathChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRelativeAppProjectPathChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [Browsable(false)]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<AppProjectGenerator> ListAppProjectGenerators // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListAppProjectGenerators; }
            set
            {
                if (this._ListAppProjectGenerators != value)
                {
                    this.OnListAppProjectGeneratorsChanging(value);
                    _ListAppProjectGenerators = value;
                    this.OnListAppProjectGeneratorsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<AppProjectGenerator> _ListAppProjectGenerators;
        IReadOnlyList<IAppProjectGenerator> IAppProject.ListAppProjectGenerators { get { return (this as AppProject).ListAppProjectGenerators; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListAppProjectGeneratorsChanging(ObservableCollection<AppProjectGenerator> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListAppProjectGeneratorsChanged();
        
        // 
        // repeated proto_plugin_group_generators_settings list_group_generators_settings = 18;
        [Browsable(false)]
        public ObservableCollectionWithActions<PluginGeneratorProjectSettings> ListGeneratorsProjectSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGeneratorsProjectSettings; }
            set
            {
                if (this._ListGeneratorsProjectSettings != value)
                {
                    this.OnListGeneratorsProjectSettingsChanging(value);
                    _ListGeneratorsProjectSettings = value;
                    this.OnListGeneratorsProjectSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<PluginGeneratorProjectSettings> _ListGeneratorsProjectSettings;
        IReadOnlyList<IPluginGeneratorProjectSettings> IAppProject.ListGeneratorsProjectSettings { get { return (this as AppProject).ListGeneratorsProjectSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGeneratorsProjectSettingsChanging(ObservableCollection<PluginGeneratorProjectSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGeneratorsProjectSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_app_project
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class PluginGeneratorNodeSettingsValidator : ValidatorBase<PluginGeneratorNodeSettings, PluginGeneratorNodeSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGeneratorNodeSettings : ConfigObjectCommonBase<PluginGeneratorNodeSettings, PluginGeneratorNodeSettingsValidator>, IComparable<PluginGeneratorNodeSettings>, IConfigAcceptVisitor, IPluginGeneratorNodeSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGeneratorNodeSettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorNodeSettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            // throw new Exception();
        }
        public static PluginGeneratorNodeSettings Clone(ITreeConfigNode? parent, IPluginGeneratorNodeSettings from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGeneratorNodeSettings vm = new PluginGeneratorNodeSettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.AppProjectGeneratorGuid = from.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGeneratorNodeSettings to, IPluginGeneratorNodeSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.AppProjectGeneratorGuid = from.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGeneratorNodeSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGeneratorNodeSettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGeneratorNodeSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGeneratorNodeSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator_node_settings' to 'PluginGeneratorNodeSettings'
        public static PluginGeneratorNodeSettings ConvertToVM(Proto.Config.proto_plugin_generator_node_settings m, PluginGeneratorNodeSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.AppProjectGeneratorGuid = m.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Settings = m.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGeneratorNodeSettings' to 'proto_plugin_generator_node_settings'
        public static Proto.Config.proto_plugin_generator_node_settings ConvertToProto(PluginGeneratorNodeSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator_node_settings m = new Proto.Config.proto_plugin_generator_node_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.AppProjectGeneratorGuid = vm.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Settings = vm.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        // Guid of solution-project-generator node
        public string AppProjectGeneratorGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._AppProjectGeneratorGuid; }
            set
            {
                if (this._AppProjectGeneratorGuid != value)
                {
                    this.OnAppProjectGeneratorGuidChanging(ref value);
                    this._AppProjectGeneratorGuid = value;
                    this.OnAppProjectGeneratorGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _AppProjectGeneratorGuid = string.Empty;
        partial void OnAppProjectGeneratorGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAppProjectGeneratorGuidChanged();
        
        // Name of solution-project-generator node
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        // string node_settings_vm_guid = 6;
        public string Settings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Settings; }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(ref value);
                    this._Settings = value;
                    this.OnSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Settings = string.Empty;
        partial void OnSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class PluginGeneratorSettingsValidator : ValidatorBase<PluginGeneratorSettings, PluginGeneratorSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGeneratorSettings : BaseSettings<PluginGeneratorSettings, PluginGeneratorSettingsValidator>, IPluginGeneratorSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGeneratorSettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorSettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static PluginGeneratorSettings Clone(ITreeConfigNode? parent, IPluginGeneratorSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGeneratorSettings vm = new PluginGeneratorSettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.AppProjectGeneratorGuid = from.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGeneratorSettings to, IPluginGeneratorSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.AppProjectGeneratorGuid = from.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGeneratorSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGeneratorSettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGeneratorSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGeneratorSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator_settings' to 'PluginGeneratorSettings'
        public static PluginGeneratorSettings ConvertToVM(Proto.Config.proto_plugin_generator_settings m, PluginGeneratorSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.AppProjectGeneratorGuid = m.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Settings = m.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGeneratorSettings' to 'proto_plugin_generator_settings'
        public static Proto.Config.proto_plugin_generator_settings ConvertToProto(PluginGeneratorSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator_settings m = new Proto.Config.proto_plugin_generator_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.AppProjectGeneratorGuid = vm.AppProjectGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Settings = vm.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Name = string.Empty;
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [PropertyOrderAttribute(2)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _NameUi = string.Empty;
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        // Guid of solution-project-generator node
        public string AppProjectGeneratorGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._AppProjectGeneratorGuid; }
            set
            {
                if (this._AppProjectGeneratorGuid != value)
                {
                    this.OnAppProjectGeneratorGuidChanging(ref value);
                    this._AppProjectGeneratorGuid = value;
                    this.OnAppProjectGeneratorGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _AppProjectGeneratorGuid = string.Empty;
        partial void OnAppProjectGeneratorGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAppProjectGeneratorGuidChanged();
        
        public string Settings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Settings; }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(ref value);
                    this._Settings = value;
                    this.OnSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Settings = string.Empty;
        partial void OnSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: True 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class AppProjectGeneratorValidator : ValidatorBase<AppProjectGenerator, AppProjectGeneratorValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Application project generator
    public partial class AppProjectGenerator : ConfigObjectVmBase<AppProjectGenerator, AppProjectGeneratorValidator>, IComparable<AppProjectGenerator>, IConfigAcceptVisitor, IAppProjectGenerator // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public AppProjectGenerator(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, AppProjectGeneratorValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GeneratorSettingsVm = new PluginGeneratorSettings(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            // throw new Exception();
        }
        public static AppProjectGenerator Clone(ITreeConfigNode? parent, IAppProjectGenerator from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            AppProjectGenerator vm = new AppProjectGenerator(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PluginGuid = from.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DescriptionPlugin = from.DescriptionPlugin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PluginGeneratorGuid = from.PluginGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DescriptionGenerator = from.DescriptionGenerator; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RelativePathToGenFolder = from.RelativePathToGenFolder; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.GenFileName = from.GenFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.GeneratorSettings = from.GeneratorSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.GeneratorSettingsVm = vSharpStudio.vm.ViewModels.PluginGeneratorSettings.Clone(vm, from.GeneratorSettingsVm, isDeep);
            vm.ConnStr = from.ConnStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ConnStrToPrevStable = from.ConnStrToPrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGenerateSqlSqriptToUpdatePrevStable = from.IsGenerateSqlSqriptToUpdatePrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.GenScriptFileName = from.GenScriptFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(AppProjectGenerator to, IAppProjectGenerator from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PluginGuid = from.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DescriptionPlugin = from.DescriptionPlugin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PluginGeneratorGuid = from.PluginGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DescriptionGenerator = from.DescriptionGenerator; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RelativePathToGenFolder = from.RelativePathToGenFolder; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.GenFileName = from.GenFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.GeneratorSettings = from.GeneratorSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.PluginGeneratorSettings.Update((PluginGeneratorSettings)to.GeneratorSettingsVm, from.GeneratorSettingsVm, isDeep);
            to.ConnStr = from.ConnStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ConnStrToPrevStable = from.ConnStrToPrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGenerateSqlSqriptToUpdatePrevStable = from.IsGenerateSqlSqriptToUpdatePrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.GenScriptFileName = from.GenScriptFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override AppProjectGenerator Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return AppProjectGenerator.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(AppProjectGenerator from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            AppProjectGenerator.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_app_project_generator' to 'AppProjectGenerator'
        public static AppProjectGenerator ConvertToVM(Proto.Config.proto_app_project_generator m, AppProjectGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PluginGuid = m.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DescriptionPlugin = m.DescriptionPlugin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PluginGeneratorGuid = m.PluginGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DescriptionGenerator = m.DescriptionGenerator; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RelativePathToGenFolder = m.RelativePathToGenFolder; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.GenFileName = m.GenFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.GeneratorSettings = m.GeneratorSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GeneratorSettingsVm == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GeneratorSettingsVm = new PluginGeneratorSettings(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.PluginGeneratorSettings.ConvertToVM(m.GeneratorSettingsVm, (PluginGeneratorSettings)vm.GeneratorSettingsVm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ConnStr = m.ConnStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ConnStrToPrevStable = m.ConnStrToPrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGenerateSqlSqriptToUpdatePrevStable = m.IsGenerateSqlSqriptToUpdatePrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.GenScriptFileName = m.GenScriptFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'AppProjectGenerator' to 'proto_app_project_generator'
        public static Proto.Config.proto_app_project_generator ConvertToProto(AppProjectGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_app_project_generator m = new Proto.Config.proto_app_project_generator(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PluginGuid = vm.PluginGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DescriptionPlugin = vm.DescriptionPlugin; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PluginGeneratorGuid = vm.PluginGeneratorGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DescriptionGenerator = vm.DescriptionGenerator; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RelativePathToGenFolder = vm.RelativePathToGenFolder; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GenFileName = vm.GenFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GeneratorSettings = vm.GeneratorSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GeneratorSettingsVm = vSharpStudio.vm.ViewModels.PluginGeneratorSettings.ConvertToProto((PluginGeneratorSettings)vm.GeneratorSettingsVm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.ConnStr = vm.ConnStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ConnStrToPrevStable = vm.ConnStrToPrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGenerateSqlSqriptToUpdatePrevStable = vm.IsGenerateSqlSqriptToUpdatePrevStable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GenScriptFileName = vm.GenScriptFileName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GeneratorSettingsVm.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(4)]
        [DisplayName("Plugin")]
        [Description("Plugins with generators")]
        [Editor(typeof(EditorPluginSelection), typeof(ITypeEditor))]
        public string PluginGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginGuid; }
            set
            {
                if (this._PluginGuid != value)
                {
                    this.OnPluginGuidChanging(ref value);
                    this._PluginGuid = value;
                    this.OnPluginGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginGuid = string.Empty;
        partial void OnPluginGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginGuidChanged();
        
        [PropertyOrderAttribute(5)]
        [DisplayName("Description")]
        [ReadOnly(true)]
        public string DescriptionPlugin // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DescriptionPlugin; }
            set
            {
                if (this._DescriptionPlugin != value)
                {
                    this.OnDescriptionPluginChanging(ref value);
                    this._DescriptionPlugin = value;
                    this.OnDescriptionPluginChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _DescriptionPlugin = string.Empty;
        partial void OnDescriptionPluginChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionPluginChanged();
        
        [PropertyOrderAttribute(6)]
        [DisplayName("Generator")]
        [Description("Plugin generator")]
        [Editor(typeof(EditorPluginGeneratorSelection), typeof(ITypeEditor))]
        public string PluginGeneratorGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PluginGeneratorGuid; }
            set
            {
                if (this._PluginGeneratorGuid != value)
                {
                    this.OnPluginGeneratorGuidChanging(ref value);
                    this._PluginGeneratorGuid = value;
                    this.OnPluginGeneratorGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PluginGeneratorGuid = string.Empty;
        partial void OnPluginGeneratorGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPluginGeneratorGuidChanged();
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Description")]
        [ReadOnly(true)]
        public string DescriptionGenerator // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DescriptionGenerator; }
            set
            {
                if (this._DescriptionGenerator != value)
                {
                    this.OnDescriptionGeneratorChanging(ref value);
                    this._DescriptionGenerator = value;
                    this.OnDescriptionGeneratorChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _DescriptionGenerator = string.Empty;
        partial void OnDescriptionGeneratorChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionGeneratorChanged();
        
        // Relative folder path to project file
        [PropertyOrderAttribute(8)]
        [DisplayName("Output Folder")]
        [Editor(typeof(EditorFolderPicker), typeof(ITypeEditor))]
        [Description("Project subfolder for generated file/files")]
        public string RelativePathToGenFolder // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RelativePathToGenFolder; }
            set
            {
                if (this._RelativePathToGenFolder != value)
                {
                    this.OnRelativePathToGenFolderChanging(ref value);
                    this._RelativePathToGenFolder = value;
                    this.OnRelativePathToGenFolderChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RelativePathToGenFolder = string.Empty;
        partial void OnRelativePathToGenFolderChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRelativePathToGenFolderChanged();
        
        // Generator output file name
        [DisplayName("Output File")]
        [PropertyOrderAttribute(9)]
        [Description("Generator output file name")]
        public string GenFileName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GenFileName; }
            set
            {
                if (this._GenFileName != value)
                {
                    this.OnGenFileNameChanging(ref value);
                    this._GenFileName = value;
                    this.OnGenFileNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _GenFileName = string.Empty;
        partial void OnGenFileNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGenFileNameChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [Browsable(false)]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public string GeneratorSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GeneratorSettings; }
            set
            {
                if (this._GeneratorSettings != value)
                {
                    this.OnGeneratorSettingsChanging(ref value);
                    this._GeneratorSettings = value;
                    this.OnGeneratorSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _GeneratorSettings = string.Empty;
        partial void OnGeneratorSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGeneratorSettingsChanged();
        
        [PropertyOrderAttribute(29)]
        [Browsable(false)]
        public PluginGeneratorSettings GeneratorSettingsVm // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GeneratorSettingsVm; }
            set
            {
                if (this._GeneratorSettingsVm != value)
                {
                    this.OnGeneratorSettingsVmChanging(ref value);
                    this._GeneratorSettingsVm = value;
                    this.OnGeneratorSettingsVmChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private PluginGeneratorSettings _GeneratorSettingsVm;
        IPluginGeneratorSettings IAppProjectGenerator.GeneratorSettingsVm { get { return (this as AppProjectGenerator).GeneratorSettingsVm; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGeneratorSettingsVmChanging(ref PluginGeneratorSettings to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGeneratorSettingsVmChanged();
        //IPluginGeneratorSettings IAppProjectGenerator.GeneratorSettingsVm { get { return this._GeneratorSettingsVm; } }
        
        [PropertyOrderAttribute(9)]
        [Description("Db connection string. Directly editable or generated based on settings")]
        public string ConnStr // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ConnStr; }
            set
            {
                if (this._ConnStr != value)
                {
                    this.OnConnStrChanging(ref value);
                    this._ConnStr = value;
                    this.OnConnStrChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ConnStr = string.Empty;
        partial void OnConnStrChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnConnStrChanged();
        
        [PropertyOrderAttribute(13)]
        [DisplayName("Stable DB")]
        [Description("Db connection string to previous stable version")]
        public string ConnStrToPrevStable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ConnStrToPrevStable; }
            set
            {
                if (this._ConnStrToPrevStable != value)
                {
                    this.OnConnStrToPrevStableChanging(ref value);
                    this._ConnStrToPrevStable = value;
                    this.OnConnStrToPrevStableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ConnStrToPrevStable = string.Empty;
        partial void OnConnStrToPrevStableChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnConnStrToPrevStableChanged();
        
        [PropertyOrderAttribute(14)]
        [DisplayName("Migrate DB")]
        [Description("Generate Sql script to update stable DB version to current state")]
        public bool IsGenerateSqlSqriptToUpdatePrevStable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGenerateSqlSqriptToUpdatePrevStable; }
            set
            {
                if (this._IsGenerateSqlSqriptToUpdatePrevStable != value)
                {
                    this.OnIsGenerateSqlSqriptToUpdatePrevStableChanging(ref value);
                    this._IsGenerateSqlSqriptToUpdatePrevStable = value;
                    this.OnIsGenerateSqlSqriptToUpdatePrevStableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsGenerateSqlSqriptToUpdatePrevStable;
        partial void OnIsGenerateSqlSqriptToUpdatePrevStableChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGenerateSqlSqriptToUpdatePrevStableChanged();
        
        // Generator output file name
        [DisplayName("SQL file")]
        [PropertyOrderAttribute(15)]
        [Description("SQL script output file name")]
        public string GenScriptFileName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GenScriptFileName; }
            set
            {
                if (this._GenScriptFileName != value)
                {
                    this.OnGenScriptFileNameChanging(ref value);
                    this._GenScriptFileName = value;
                    this.OnGenScriptFileNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _GenScriptFileName = string.Empty;
        partial void OnGenScriptFileNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGenScriptFileNameChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_app_project_generator
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class PluginGeneratorNodeDefaultSettingsValidator : ValidatorBase<PluginGeneratorNodeDefaultSettings, PluginGeneratorNodeDefaultSettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PluginGeneratorNodeDefaultSettings : BaseSettings<PluginGeneratorNodeDefaultSettings, PluginGeneratorNodeDefaultSettingsValidator>, IPluginGeneratorNodeDefaultSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PluginGeneratorNodeDefaultSettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PluginGeneratorNodeDefaultSettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static PluginGeneratorNodeDefaultSettings Clone(ITreeConfigNode? parent, IPluginGeneratorNodeDefaultSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PluginGeneratorNodeDefaultSettings vm = new PluginGeneratorNodeDefaultSettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.NodeSettingsVmGuid = from.NodeSettingsVmGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PluginGeneratorNodeDefaultSettings to, IPluginGeneratorNodeDefaultSettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.NodeSettingsVmGuid = from.NodeSettingsVmGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Settings = from.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PluginGeneratorNodeDefaultSettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PluginGeneratorNodeDefaultSettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PluginGeneratorNodeDefaultSettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PluginGeneratorNodeDefaultSettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_plugin_generator_node_default_settings' to 'PluginGeneratorNodeDefaultSettings'
        public static PluginGeneratorNodeDefaultSettings ConvertToVM(Proto.Config.proto_plugin_generator_node_default_settings m, PluginGeneratorNodeDefaultSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.NodeSettingsVmGuid = m.NodeSettingsVmGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Settings = m.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PluginGeneratorNodeDefaultSettings' to 'proto_plugin_generator_node_default_settings'
        public static Proto.Config.proto_plugin_generator_node_default_settings ConvertToProto(PluginGeneratorNodeDefaultSettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_plugin_generator_node_default_settings m = new Proto.Config.proto_plugin_generator_node_default_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.NodeSettingsVmGuid = vm.NodeSettingsVmGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Settings = vm.Settings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        // Guid of solution-project-generator node
        public string NodeSettingsVmGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NodeSettingsVmGuid; }
            set
            {
                if (this._NodeSettingsVmGuid != value)
                {
                    this.OnNodeSettingsVmGuidChanging(ref value);
                    this._NodeSettingsVmGuid = value;
                    this.OnNodeSettingsVmGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _NodeSettingsVmGuid = string.Empty;
        partial void OnNodeSettingsVmGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNodeSettingsVmGuidChanged();
        
        public string Settings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Settings; }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(ref value);
                    this._Settings = value;
                    this.OnSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Settings = string.Empty;
        partial void OnSettingsChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class ModelValidator : ValidatorBase<Model, ModelValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Configuration model
    [CategoryOrder("Db Names Generation", 5)]
    public partial class Model : ConfigObjectVmGenSettings<Model, ModelValidator>, IComparable<Model>, IConfigAcceptVisitor, IModel // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Model(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, ModelValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupCommon = new GroupListCommon(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupConstantGroups = new GroupConstantGroups(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupEnumerations = new GroupListEnumerations(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupCatalogs = new GroupListCatalogs(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupDocuments = new GroupDocuments(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupJournals = new GroupListJournals(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Model Clone(ITreeConfigNode? parent, IModel from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Model vm = new Model(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.CompositeNameMaxLength = from.CompositeNameMaxLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseCompositeNames = from.IsUseCompositeNames; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseGroupPrefix = from.IsUseGroupPrefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PKeyGuid = from.PKeyGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PKeyName = from.PKeyName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PKeyType = from.PKeyType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RecordVersionFieldGuid = from.RecordVersionFieldGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RecordVersionFieldName = from.RecordVersionFieldName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RecordVersionFieldType = from.RecordVersionFieldType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyCodeName = from.PropertyCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyNameName = from.PropertyNameName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDescriptionName = from.PropertyDescriptionName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIsFolderName = from.PropertyIsFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDocDateName = from.PropertyDocDateName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDocCodeName = from.PropertyDocCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDocCodeProperty = from.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LastConstantGroupShortId = from.LastConstantGroupShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LastCatalogShortId = from.LastCatalogShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LastDocumentShortId = from.LastDocumentShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LastDetailShortId = from.LastDetailShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupCommon = vSharpStudio.vm.ViewModels.GroupListCommon.Clone(vm, from.GroupCommon, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupConstantGroups = vSharpStudio.vm.ViewModels.GroupConstantGroups.Clone(vm, from.GroupConstantGroups, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupEnumerations = vSharpStudio.vm.ViewModels.GroupListEnumerations.Clone(vm, from.GroupEnumerations, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupCatalogs = vSharpStudio.vm.ViewModels.GroupListCatalogs.Clone(vm, from.GroupCatalogs, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupDocuments = vSharpStudio.vm.ViewModels.GroupDocuments.Clone(vm, from.GroupDocuments, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupJournals = vSharpStudio.vm.ViewModels.GroupListJournals.Clone(vm, from.GroupJournals, isDeep);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Model to, IModel from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Version = from.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.CompositeNameMaxLength = from.CompositeNameMaxLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseCompositeNames = from.IsUseCompositeNames; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseGroupPrefix = from.IsUseGroupPrefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PKeyGuid = from.PKeyGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PKeyName = from.PKeyName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PKeyType = from.PKeyType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RecordVersionFieldGuid = from.RecordVersionFieldGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RecordVersionFieldName = from.RecordVersionFieldName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RecordVersionFieldType = from.RecordVersionFieldType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyCodeName = from.PropertyCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyNameName = from.PropertyNameName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDescriptionName = from.PropertyDescriptionName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIsFolderName = from.PropertyIsFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDocDateName = from.PropertyDocDateName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDocCodeName = from.PropertyDocCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDocCodeProperty = from.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LastConstantGroupShortId = from.LastConstantGroupShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LastCatalogShortId = from.LastCatalogShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LastDocumentShortId = from.LastDocumentShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LastDetailShortId = from.LastDetailShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListCommon.Update((GroupListCommon)to.GroupCommon, from.GroupCommon, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupConstantGroups.Update((GroupConstantGroups)to.GroupConstantGroups, from.GroupConstantGroups, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListEnumerations.Update((GroupListEnumerations)to.GroupEnumerations, from.GroupEnumerations, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListCatalogs.Update((GroupListCatalogs)to.GroupCatalogs, from.GroupCatalogs, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupDocuments.Update((GroupDocuments)to.GroupDocuments, from.GroupDocuments, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListJournals.Update((GroupListJournals)to.GroupJournals, from.GroupJournals, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Model Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Model.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Model from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Model.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_model' to 'Model'
        public static Model ConvertToVM(Proto.Config.proto_model m, Model vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Version = m.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.CompositeNameMaxLength = m.CompositeNameMaxLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseCompositeNames = m.IsUseCompositeNames; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseGroupPrefix = m.IsUseGroupPrefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PKeyGuid = m.PKeyGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PKeyName = m.PKeyName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PKeyType = (EnumPrimaryKeyType)m.PKeyType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RecordVersionFieldGuid = m.RecordVersionFieldGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RecordVersionFieldName = m.RecordVersionFieldName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RecordVersionFieldType = (EnumVersionFieldType)m.RecordVersionFieldType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyCodeName = m.PropertyCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyNameName = m.PropertyNameName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNameProperty = m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDescriptionName = m.PropertyDescriptionName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIsFolderName = m.PropertyIsFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDocDateName = m.PropertyDocDateName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDocDateProperty = m.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDocCodeName = m.PropertyDocCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDocCodeProperty = m.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LastConstantGroupShortId = m.LastConstantGroupShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LastCatalogShortId = m.LastCatalogShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LastDocumentShortId = m.LastDocumentShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LastDetailShortId = m.LastDetailShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupCommon == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupCommon = new GroupListCommon(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListCommon.ConvertToVM(m.GroupCommon, (GroupListCommon)vm.GroupCommon); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupConstantGroups == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupConstantGroups = new GroupConstantGroups(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupConstantGroups.ConvertToVM(m.GroupConstantGroups, (GroupConstantGroups)vm.GroupConstantGroups); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupEnumerations == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupEnumerations = new GroupListEnumerations(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListEnumerations.ConvertToVM(m.GroupEnumerations, (GroupListEnumerations)vm.GroupEnumerations); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupCatalogs == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupCatalogs = new GroupListCatalogs(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListCatalogs.ConvertToVM(m.GroupCatalogs, (GroupListCatalogs)vm.GroupCatalogs); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupDocuments == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupDocuments = new GroupDocuments(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupDocuments.ConvertToVM(m.GroupDocuments, (GroupDocuments)vm.GroupDocuments); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupJournals == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupJournals = new GroupListJournals(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListJournals.ConvertToVM(m.GroupJournals, (GroupListJournals)vm.GroupJournals); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Model' to 'proto_model'
        public static Proto.Config.proto_model ConvertToProto(Model vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_model m = new Proto.Config.proto_model(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Version = vm.Version; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.CompositeNameMaxLength = vm.CompositeNameMaxLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsUseCompositeNames = vm.IsUseCompositeNames; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsUseGroupPrefix = vm.IsUseGroupPrefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PKeyGuid = vm.PKeyGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PKeyName = vm.PKeyName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PKeyType = (Proto.Config.proto_enum_primary_key_type)vm.PKeyType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.RecordVersionFieldGuid = vm.RecordVersionFieldGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RecordVersionFieldName = vm.RecordVersionFieldName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RecordVersionFieldType = (Proto.Config.proto_enum_version_field_type)vm.RecordVersionFieldType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PropertyCodeName = vm.PropertyCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyNameName = vm.PropertyNameName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseNameProperty = vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDescriptionName = vm.PropertyDescriptionName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDescriptionProperty = vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIsFolderName = vm.PropertyIsFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDocDateName = vm.PropertyDocDateName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDocDateProperty = vm.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDocCodeName = vm.PropertyDocCodeName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDocCodeProperty = vm.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LastConstantGroupShortId = vm.LastConstantGroupShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LastCatalogShortId = vm.LastCatalogShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LastDocumentShortId = vm.LastDocumentShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LastDetailShortId = vm.LastDetailShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortableCustom = vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridFilterable = vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupCommon = vSharpStudio.vm.ViewModels.GroupListCommon.ConvertToProto((GroupListCommon)vm.GroupCommon); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupConstantGroups = vSharpStudio.vm.ViewModels.GroupConstantGroups.ConvertToProto((GroupConstantGroups)vm.GroupConstantGroups); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupEnumerations = vSharpStudio.vm.ViewModels.GroupListEnumerations.ConvertToProto((GroupListEnumerations)vm.GroupEnumerations); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupCatalogs = vSharpStudio.vm.ViewModels.GroupListCatalogs.ConvertToProto((GroupListCatalogs)vm.GroupCatalogs); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupDocuments = vSharpStudio.vm.ViewModels.GroupDocuments.ConvertToProto((GroupDocuments)vm.GroupDocuments); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupJournals = vSharpStudio.vm.ViewModels.GroupListJournals.ConvertToProto((GroupListJournals)vm.GroupJournals); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupCommon.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupConstantGroups.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupEnumerations.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupCatalogs.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupDocuments.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupJournals.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [ReadOnly(true)]
        public int Version // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Version; }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(ref value);
                    this._Version = value;
                    this.OnVersionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _Version;
        partial void OnVersionChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVersionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(8)]
        [DisplayName("Max length")]
        [Category("Composite Names Generation")]
        public uint CompositeNameMaxLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._CompositeNameMaxLength; }
            set
            {
                if (this._CompositeNameMaxLength != value)
                {
                    this.OnCompositeNameMaxLengthChanging(ref value);
                    this._CompositeNameMaxLength = value;
                    this.OnCompositeNameMaxLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _CompositeNameMaxLength;
        partial void OnCompositeNameMaxLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCompositeNameMaxLengthChanged();
        
        [PropertyOrderAttribute(9)]
        [DisplayName("Use Composite")]
        [Description("Use parent-child composite names.")]
        [Category("Composite Names Generation")]
        public bool IsUseCompositeNames // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseCompositeNames; }
            set
            {
                if (this._IsUseCompositeNames != value)
                {
                    this.OnIsUseCompositeNamesChanging(ref value);
                    this._IsUseCompositeNames = value;
                    this.OnIsUseCompositeNamesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsUseCompositeNames;
        partial void OnIsUseCompositeNamesChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseCompositeNamesChanged();
        
        [PropertyOrderAttribute(10)]
        [DisplayName("Use Prefix")]
        [Description("Composite names use their parent name as prefix. In a case of simple names all object's name will have only group name as a prefix.")]
        [Category("Composite Names Generation")]
        public bool IsUseGroupPrefix // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseGroupPrefix; }
            set
            {
                if (this._IsUseGroupPrefix != value)
                {
                    this.OnIsUseGroupPrefixChanging(ref value);
                    this._IsUseGroupPrefix = value;
                    this.OnIsUseGroupPrefixChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsUseGroupPrefix;
        partial void OnIsUseGroupPrefixChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseGroupPrefixChanged();
        
        [Browsable(false)]
        public string PKeyGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PKeyGuid; }
            set
            {
                if (this._PKeyGuid != value)
                {
                    this.OnPKeyGuidChanging(ref value);
                    this._PKeyGuid = value;
                    this.OnPKeyGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PKeyGuid = string.Empty;
        partial void OnPKeyGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPKeyGuidChanged();
        
        [PropertyOrderAttribute(14)]
        [DisplayName("Id name")]
        [Description("Primary key field name")]
        [Category("Property settings")]
        public string PKeyName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PKeyName; }
            set
            {
                if (this._PKeyName != value)
                {
                    this.OnPKeyNameChanging(ref value);
                    this._PKeyName = value;
                    this.OnPKeyNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PKeyName = string.Empty;
        partial void OnPKeyNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPKeyNameChanged();
        
        [PropertyOrderAttribute(15)]
        [DisplayName("Id type")]
        [Description("Primary key field type")]
        [Category("Property settings")]
        public EnumPrimaryKeyType PKeyType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PKeyType; }
            set
            {
                if (this._PKeyType != value)
                {
                    this.OnPKeyTypeChanging(ref value);
                    this._PKeyType = value;
                    this.OnPKeyTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrimaryKeyType _PKeyType;
        partial void OnPKeyTypeChanging(ref EnumPrimaryKeyType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPKeyTypeChanged();
        
        [Browsable(false)]
        public string RecordVersionFieldGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RecordVersionFieldGuid; }
            set
            {
                if (this._RecordVersionFieldGuid != value)
                {
                    this.OnRecordVersionFieldGuidChanging(ref value);
                    this._RecordVersionFieldGuid = value;
                    this.OnRecordVersionFieldGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RecordVersionFieldGuid = string.Empty;
        partial void OnRecordVersionFieldGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRecordVersionFieldGuidChanged();
        
        [PropertyOrderAttribute(18)]
        [DisplayName("Version field")]
        [Description("Record version field name")]
        [Category("Property settings")]
        public string RecordVersionFieldName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RecordVersionFieldName; }
            set
            {
                if (this._RecordVersionFieldName != value)
                {
                    this.OnRecordVersionFieldNameChanging(ref value);
                    this._RecordVersionFieldName = value;
                    this.OnRecordVersionFieldNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RecordVersionFieldName = string.Empty;
        partial void OnRecordVersionFieldNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRecordVersionFieldNameChanged();
        
        [PropertyOrderAttribute(19)]
        [DisplayName("Version type")]
        [Description("Record version field type")]
        [Category("Property settings")]
        public EnumVersionFieldType RecordVersionFieldType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RecordVersionFieldType; }
            set
            {
                if (this._RecordVersionFieldType != value)
                {
                    this.OnRecordVersionFieldTypeChanging(ref value);
                    this._RecordVersionFieldType = value;
                    this.OnRecordVersionFieldTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumVersionFieldType _RecordVersionFieldType;
        partial void OnRecordVersionFieldTypeChanging(ref EnumVersionFieldType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRecordVersionFieldTypeChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(21)]
        [DisplayName("Code property")]
        [Description("Name of code auto generated property if it is used in catalog")]
        public string PropertyCodeName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyCodeName; }
            set
            {
                if (this._PropertyCodeName != value)
                {
                    this.OnPropertyCodeNameChanging(ref value);
                    this._PropertyCodeName = value;
                    this.OnPropertyCodeNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyCodeName = string.Empty;
        partial void OnPropertyCodeNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyCodeNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(22)]
        [DisplayName("Use Code")]
        [Description("Use Code property for catalog item by default")]
        public bool UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(23)]
        [DisplayName("Name property")]
        [Description("Name of name auto generated property if it is used in catalog")]
        public string PropertyNameName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyNameName; }
            set
            {
                if (this._PropertyNameName != value)
                {
                    this.OnPropertyNameNameChanging(ref value);
                    this._PropertyNameName = value;
                    this.OnPropertyNameNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyNameName = string.Empty;
        partial void OnPropertyNameNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyNameNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Name")]
        [Description("Use Name property for catalog item by default")]
        public bool UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(25)]
        [DisplayName("Description property")]
        [Description("Name of description auto generated property if it is used in catalog")]
        public string PropertyDescriptionName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDescriptionName; }
            set
            {
                if (this._PropertyDescriptionName != value)
                {
                    this.OnPropertyDescriptionNameChanging(ref value);
                    this._PropertyDescriptionName = value;
                    this.OnPropertyDescriptionNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDescriptionName = string.Empty;
        partial void OnPropertyDescriptionNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDescriptionNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(26)]
        [DisplayName("Use Description")]
        [Description("Use Description property for catalog item by default")]
        public bool UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(27)]
        [DisplayName("IsFolder property")]
        [Description("Name of is folder auto generated property if it is used in catalog")]
        public string PropertyIsFolderName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIsFolderName; }
            set
            {
                if (this._PropertyIsFolderName != value)
                {
                    this.OnPropertyIsFolderNameChanging(ref value);
                    this._PropertyIsFolderName = value;
                    this.OnPropertyIsFolderNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIsFolderName = string.Empty;
        partial void OnPropertyIsFolderNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIsFolderNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(31)]
        [DisplayName("Date property")]
        [Description("Name of date auto generated property if it is used in documents")]
        public string PropertyDocDateName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDocDateName; }
            set
            {
                if (this._PropertyDocDateName != value)
                {
                    this.OnPropertyDocDateNameChanging(ref value);
                    this._PropertyDocDateName = value;
                    this.OnPropertyDocDateNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDocDateName = string.Empty;
        partial void OnPropertyDocDateNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDocDateNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(32)]
        [DisplayName("Use Doc Date")]
        [Description("Use Date property for documents")]
        public bool UseDocDateProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocDateProperty; }
            set
            {
                if (this._UseDocDateProperty != value)
                {
                    this.OnUseDocDatePropertyChanging(ref value);
                    this._UseDocDateProperty = value;
                    this.OnUseDocDatePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseDocDateProperty;
        partial void OnUseDocDatePropertyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocDatePropertyChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(29)]
        [DisplayName("Doc Code property")]
        [Description("Name of document code auto generated property")]
        public string PropertyDocCodeName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDocCodeName; }
            set
            {
                if (this._PropertyDocCodeName != value)
                {
                    this.OnPropertyDocCodeNameChanging(ref value);
                    this._PropertyDocCodeName = value;
                    this.OnPropertyDocCodeNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDocCodeName = string.Empty;
        partial void OnPropertyDocCodeNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDocCodeNameChanged();
        
        [Category("Property settings")]
        [PropertyOrderAttribute(30)]
        [DisplayName("Use Doc Code")]
        [Description("Use Code property for documents")]
        public bool UseDocCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocCodeProperty; }
            set
            {
                if (this._UseDocCodeProperty != value)
                {
                    this.OnUseDocCodePropertyChanging(ref value);
                    this._UseDocCodeProperty = value;
                    this.OnUseDocCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseDocCodeProperty;
        partial void OnUseDocCodePropertyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocCodePropertyChanged();
        
        [Browsable(false)]
        public int LastConstantGroupShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastConstantGroupShortId; }
            set
            {
                if (this._LastConstantGroupShortId != value)
                {
                    this.OnLastConstantGroupShortIdChanging(ref value);
                    this._LastConstantGroupShortId = value;
                    this.OnLastConstantGroupShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LastConstantGroupShortId;
        partial void OnLastConstantGroupShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastConstantGroupShortIdChanged();
        
        [Browsable(false)]
        public int LastCatalogShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastCatalogShortId; }
            set
            {
                if (this._LastCatalogShortId != value)
                {
                    this.OnLastCatalogShortIdChanging(ref value);
                    this._LastCatalogShortId = value;
                    this.OnLastCatalogShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LastCatalogShortId;
        partial void OnLastCatalogShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastCatalogShortIdChanged();
        
        [Browsable(false)]
        public int LastDocumentShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastDocumentShortId; }
            set
            {
                if (this._LastDocumentShortId != value)
                {
                    this.OnLastDocumentShortIdChanging(ref value);
                    this._LastDocumentShortId = value;
                    this.OnLastDocumentShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LastDocumentShortId;
        partial void OnLastDocumentShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastDocumentShortIdChanged();
        
        [Browsable(false)]
        public int LastDetailShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastDetailShortId; }
            set
            {
                if (this._LastDetailShortId != value)
                {
                    this.OnLastDetailShortIdChanging(ref value);
                    this._LastDetailShortId = value;
                    this.OnLastDetailShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LastDetailShortId;
        partial void OnLastDetailShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastDetailShortIdChanged();
        
        [Category("DataGrid settings")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public bool IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsGridSortable;
        partial void OnIsGridSortableChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("DataGrid settings")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public bool IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("DataGrid settings")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public bool IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public GroupListCommon GroupCommon // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupCommon; }
            set
            {
                if (this._GroupCommon != value)
                {
                    this.OnGroupCommonChanging(ref value);
                    this._GroupCommon = value;
                    this.OnGroupCommonChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListCommon _GroupCommon;
        IGroupListCommon IModel.GroupCommon { get { return (this as Model).GroupCommon; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupCommonChanging(ref GroupListCommon to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupCommonChanged();
        //IGroupListCommon IModel.GroupCommon { get { return this._GroupCommon; } }
        
        [Browsable(false)]
        public GroupConstantGroups GroupConstantGroups // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupConstantGroups; }
            set
            {
                if (this._GroupConstantGroups != value)
                {
                    this.OnGroupConstantGroupsChanging(ref value);
                    this._GroupConstantGroups = value;
                    this.OnGroupConstantGroupsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupConstantGroups _GroupConstantGroups;
        IGroupConstantGroups IModel.GroupConstantGroups { get { return (this as Model).GroupConstantGroups; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupConstantGroupsChanging(ref GroupConstantGroups to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupConstantGroupsChanged();
        //IGroupConstantGroups IModel.GroupConstantGroups { get { return this._GroupConstantGroups; } }
        
        [Browsable(false)]
        public GroupListEnumerations GroupEnumerations // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupEnumerations; }
            set
            {
                if (this._GroupEnumerations != value)
                {
                    this.OnGroupEnumerationsChanging(ref value);
                    this._GroupEnumerations = value;
                    this.OnGroupEnumerationsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListEnumerations _GroupEnumerations;
        IGroupListEnumerations IModel.GroupEnumerations { get { return (this as Model).GroupEnumerations; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupEnumerationsChanging(ref GroupListEnumerations to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupEnumerationsChanged();
        //IGroupListEnumerations IModel.GroupEnumerations { get { return this._GroupEnumerations; } }
        
        [Browsable(false)]
        public GroupListCatalogs GroupCatalogs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupCatalogs; }
            set
            {
                if (this._GroupCatalogs != value)
                {
                    this.OnGroupCatalogsChanging(ref value);
                    this._GroupCatalogs = value;
                    this.OnGroupCatalogsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListCatalogs _GroupCatalogs;
        IGroupListCatalogs IModel.GroupCatalogs { get { return (this as Model).GroupCatalogs; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupCatalogsChanging(ref GroupListCatalogs to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupCatalogsChanged();
        //IGroupListCatalogs IModel.GroupCatalogs { get { return this._GroupCatalogs; } }
        
        [Browsable(false)]
        public GroupDocuments GroupDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupDocuments; }
            set
            {
                if (this._GroupDocuments != value)
                {
                    this.OnGroupDocumentsChanging(ref value);
                    this._GroupDocuments = value;
                    this.OnGroupDocumentsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupDocuments _GroupDocuments;
        IGroupDocuments IModel.GroupDocuments { get { return (this as Model).GroupDocuments; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupDocumentsChanging(ref GroupDocuments to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupDocumentsChanged();
        //IGroupDocuments IModel.GroupDocuments { get { return this._GroupDocuments; } }
        
        [Browsable(false)]
        public GroupListJournals GroupJournals // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupJournals; }
            set
            {
                if (this._GroupJournals != value)
                {
                    this.OnGroupJournalsChanging(ref value);
                    this._GroupJournals = value;
                    this.OnGroupJournalsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListJournals _GroupJournals;
        IGroupListJournals IModel.GroupJournals { get { return (this as Model).GroupJournals; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupJournalsChanging(ref GroupListJournals to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupJournalsChanged();
        //IGroupListJournals IModel.GroupJournals { get { return this._GroupJournals; } }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IModel.ListNodeGeneratorsSettings { get { return (this as Model).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class DataTypeValidator : ValidatorBase<DataType, DataTypeValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class DataType : BaseSettings<DataType, DataTypeValidator>, IDataType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public DataType(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, DataTypeValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListObjectGuids = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static DataType Clone(ITreeConfigNode? parent, IDataType from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            DataType vm = new DataType(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.DataTypeEnum = from.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Length = from.Length; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsPositive = from.IsPositive; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Accuracy = from.Accuracy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ObjectGuid = from.ObjectGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            foreach (var t in from.ListObjectGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListObjectGuids.Add(t);
            vm.IsPKey = from.IsPKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsRefParent = from.IsRefParent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(DataType to, IDataType from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.DataTypeEnum = from.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Length = from.Length; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsPositive = from.IsPositive; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Accuracy = from.Accuracy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ObjectGuid = from.ObjectGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
                to.ListObjectGuids.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListObjectGuids)
                {
                    to.ListObjectGuids.Add(tt);
                }
            to.IsPKey = from.IsPKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsRefParent = from.IsRefParent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override DataType Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return DataType.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(DataType from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            DataType.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_data_type' to 'DataType'
        public static DataType ConvertToVM(Proto.Config.proto_data_type m, DataType vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.DataTypeEnum = (EnumDataType)m.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Length = m.Length; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsPositive = m.IsPositive; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Accuracy = m.Accuracy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ObjectGuid = m.ObjectGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListObjectGuids = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListObjectGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListObjectGuids.Add(t);
            }
            vm.IsPKey = m.IsPKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsRefParent = m.IsRefParent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'DataType' to 'proto_data_type'
        public static Proto.Config.proto_data_type ConvertToProto(DataType vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_data_type m = new Proto.Config.proto_data_type(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.DataTypeEnum = (Proto.Config.proto_enum_data_type)vm.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Length = vm.Length; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsPositive = vm.IsPositive; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Accuracy = vm.Accuracy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ObjectGuid = vm.ObjectGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListObjectGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListObjectGuids.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            m.IsPKey = vm.IsPKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsRefParent = vm.IsRefParent; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(1)]
        [DisplayName("Type")]
        public EnumDataType DataTypeEnum // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataTypeEnum; }
            set
            {
                if (this._DataTypeEnum != value)
                {
                    this.OnDataTypeEnumChanging(ref value);
                    this._DataTypeEnum = value;
                    this.OnDataTypeEnumChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDataType _DataTypeEnum;
        partial void OnDataTypeEnumChanging(ref EnumDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeEnumChanged();
        
        [PropertyOrderAttribute(3)]
        [DisplayName("Length")]
        [Description("Maximum length of data (characters in string, or decimal digits for numeric data)")]
        public uint Length // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Length; }
            set
            {
                if (this._Length != value)
                {
                    this.OnLengthChanging(ref value);
                    this._Length = value;
                    this.OnLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _Length;
        partial void OnLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLengthChanged();
        
        [PropertyOrderAttribute(4)]
        [DisplayName("Positive")]
        [Description("Expected numerical value always >= 0")]
        public bool IsPositive // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsPositive; }
            set
            {
                if (this._IsPositive != value)
                {
                    this.OnIsPositiveChanging(ref value);
                    this._IsPositive = value;
                    this.OnIsPositiveChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsPositive;
        partial void OnIsPositiveChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsPositiveChanged();
        
        [PropertyOrderAttribute(5)]
        [DisplayName("Accuracy")]
        [Description("Number of decimal places in fractional part for numeric data)")]
        public uint Accuracy // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Accuracy; }
            set
            {
                if (this._Accuracy != value)
                {
                    this.OnAccuracyChanging(ref value);
                    this._Accuracy = value;
                    this.OnAccuracyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _Accuracy;
        partial void OnAccuracyChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAccuracyChanged();
        
        // <summary>
        // / Guid of complex type. It can be Guid of Enumeration, Catalog, Document. 
        // / Numerical, string, bool, date and similar are simple types. For simple types this property is empty.
        // / If Guid of group types is assigned, then any type of such group of types is acceptable as type
        // / If Guid is empty, but EnumDataType is Any, then any complex type is acceptable as type
        // / </summary>
        [PropertyOrderAttribute(6)]
        [Editor(typeof(EditorDataTypeObjectName), typeof(EditorDataTypeObjectName))]
        public string ObjectGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ObjectGuid; }
            set
            {
                if (this._ObjectGuid != value)
                {
                    this.OnObjectGuidChanging(ref value);
                    this._ObjectGuid = value;
                    this.OnObjectGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ObjectGuid = string.Empty;
        partial void OnObjectGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnObjectGuidChanged();
        
        // <summary>
        // / Guids of selected complex types, that are acceptable as types
        // / </summary>
        [PropertyOrderAttribute(8)]
        public ObservableCollectionWithActions<string> ListObjectGuids // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListObjectGuids; }
            set
            {
                if (this._ListObjectGuids != value)
                {
                    this.OnListObjectGuidsChanging(value);
                    _ListObjectGuids = value;
                    this.OnListObjectGuidsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListObjectGuids;
        IReadOnlyList<string> IDataType.ListObjectGuids { get { return (this as DataType).ListObjectGuids; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListObjectGuidsChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListObjectGuidsChanged();
        
        [Browsable(false)]
        public bool IsPKey // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsPKey; }
            set
            {
                if (this._IsPKey != value)
                {
                    this.OnIsPKeyChanging(ref value);
                    this._IsPKey = value;
                    this.OnIsPKeyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsPKey;
        partial void OnIsPKeyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsPKeyChanged();
        
        [Browsable(false)]
        public bool IsRefParent // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsRefParent; }
            set
            {
                if (this._IsRefParent != value)
                {
                    this.OnIsRefParentChanging(ref value);
                    this._IsRefParent = value;
                    this.OnIsRefParentChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsRefParent;
        partial void OnIsRefParentChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsRefParentChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListCommonValidator : ValidatorBase<GroupListCommon, GroupListCommonValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Common parameters section
    public partial class GroupListCommon : ConfigObjectVmGenSettings<GroupListCommon, GroupListCommonValidator>, IComparable<GroupListCommon>, IConfigAcceptVisitor, IGroupListCommon // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListCommon(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListCommonValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupRoles = new GroupListRoles(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupViewForms = new GroupListMainViewForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupListSequences = new GroupListEnumeratorSequences(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListCommon Clone(ITreeConfigNode? parent, IGroupListCommon from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListCommon vm = new GroupListCommon(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupRoles = vSharpStudio.vm.ViewModels.GroupListRoles.Clone(vm, from.GroupRoles, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupViewForms = vSharpStudio.vm.ViewModels.GroupListMainViewForms.Clone(vm, from.GroupViewForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupListSequences = vSharpStudio.vm.ViewModels.GroupListEnumeratorSequences.Clone(vm, from.GroupListSequences, isDeep);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListCommon to, IGroupListCommon from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListRoles.Update((GroupListRoles)to.GroupRoles, from.GroupRoles, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListMainViewForms.Update((GroupListMainViewForms)to.GroupViewForms, from.GroupViewForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListEnumeratorSequences.Update((GroupListEnumeratorSequences)to.GroupListSequences, from.GroupListSequences, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListCommon Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListCommon.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListCommon from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListCommon.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_common' to 'GroupListCommon'
        public static GroupListCommon ConvertToVM(Proto.Config.proto_group_list_common m, GroupListCommon vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupRoles == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupRoles = new GroupListRoles(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListRoles.ConvertToVM(m.GroupRoles, (GroupListRoles)vm.GroupRoles); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupViewForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupViewForms = new GroupListMainViewForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListMainViewForms.ConvertToVM(m.GroupViewForms, (GroupListMainViewForms)vm.GroupViewForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupListSequences == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupListSequences = new GroupListEnumeratorSequences(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListEnumeratorSequences.ConvertToVM(m.GroupListSequences, (GroupListEnumeratorSequences)vm.GroupListSequences); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListCommon' to 'proto_group_list_common'
        public static Proto.Config.proto_group_list_common ConvertToProto(GroupListCommon vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_common m = new Proto.Config.proto_group_list_common(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupRoles = vSharpStudio.vm.ViewModels.GroupListRoles.ConvertToProto((GroupListRoles)vm.GroupRoles); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupViewForms = vSharpStudio.vm.ViewModels.GroupListMainViewForms.ConvertToProto((GroupListMainViewForms)vm.GroupViewForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupListSequences = vSharpStudio.vm.ViewModels.GroupListEnumeratorSequences.ConvertToProto((GroupListEnumeratorSequences)vm.GroupListSequences); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupRoles.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupViewForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupListSequences.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public GroupListRoles GroupRoles // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupRoles; }
            set
            {
                if (this._GroupRoles != value)
                {
                    this.OnGroupRolesChanging(ref value);
                    this._GroupRoles = value;
                    this.OnGroupRolesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListRoles _GroupRoles;
        IGroupListRoles IGroupListCommon.GroupRoles { get { return (this as GroupListCommon).GroupRoles; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupRolesChanging(ref GroupListRoles to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupRolesChanged();
        //IGroupListRoles IGroupListCommon.GroupRoles { get { return this._GroupRoles; } }
        
        [Browsable(false)]
        public GroupListMainViewForms GroupViewForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupViewForms; }
            set
            {
                if (this._GroupViewForms != value)
                {
                    this.OnGroupViewFormsChanging(ref value);
                    this._GroupViewForms = value;
                    this.OnGroupViewFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListMainViewForms _GroupViewForms;
        IGroupListMainViewForms IGroupListCommon.GroupViewForms { get { return (this as GroupListCommon).GroupViewForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupViewFormsChanging(ref GroupListMainViewForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupViewFormsChanged();
        //IGroupListMainViewForms IGroupListCommon.GroupViewForms { get { return this._GroupViewForms; } }
        
        [Browsable(false)]
        public GroupListEnumeratorSequences GroupListSequences // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupListSequences; }
            set
            {
                if (this._GroupListSequences != value)
                {
                    this.OnGroupListSequencesChanging(ref value);
                    this._GroupListSequences = value;
                    this.OnGroupListSequencesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListEnumeratorSequences _GroupListSequences;
        IGroupListEnumeratorSequences IGroupListCommon.GroupListSequences { get { return (this as GroupListCommon).GroupListSequences; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupListSequencesChanging(ref GroupListEnumeratorSequences to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupListSequencesChanged();
        //IGroupListEnumeratorSequences IGroupListCommon.GroupListSequences { get { return this._GroupListSequences; } }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListCommon.ListNodeGeneratorsSettings { get { return (this as GroupListCommon).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class EnumeratorSequenceValidator : ValidatorBase<EnumeratorSequence, EnumeratorSequenceValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class EnumeratorSequence : ConfigObjectVmGenSettings<EnumeratorSequence, EnumeratorSequenceValidator>, IComparable<EnumeratorSequence>, IConfigAcceptVisitor, IEnumeratorSequence // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public EnumeratorSequence(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, EnumeratorSequenceValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static EnumeratorSequence Clone(ITreeConfigNode? parent, IEnumeratorSequence from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            EnumeratorSequence vm = new EnumeratorSequence(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(EnumeratorSequence to, IEnumeratorSequence from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override EnumeratorSequence Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return EnumeratorSequence.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(EnumeratorSequence from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            EnumeratorSequence.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_enumerator_sequence' to 'EnumeratorSequence'
        public static EnumeratorSequence ConvertToVM(Proto.Config.proto_enumerator_sequence m, EnumeratorSequence vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SequenceType = (EnumCodeType)m.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxSequenceLength = m.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Prefix = m.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'EnumeratorSequence' to 'proto_enumerator_sequence'
        public static Proto.Config.proto_enumerator_sequence ConvertToProto(EnumeratorSequence vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_enumerator_sequence m = new Proto.Config.proto_enumerator_sequence(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SequenceType = (Proto.Config.proto_enum_code_type)vm.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxSequenceLength = vm.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Prefix = vm.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(11)]
        [DisplayName("Sequence type")]
        [Description("Sequence type for code")]
        public EnumCodeType SequenceType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SequenceType; }
            set
            {
                if (this._SequenceType != value)
                {
                    this.OnSequenceTypeChanging(ref value);
                    this._SequenceType = value;
                    this.OnSequenceTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCodeType _SequenceType;
        partial void OnSequenceTypeChanging(ref EnumCodeType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSequenceTypeChanged();
        
        [Category("")]
        [PropertyOrderAttribute(12)]
        [DisplayName("Max Sequence")]
        [Description("Maximum number of character places for generated sequence numbers")]
        public uint MaxSequenceLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxSequenceLength; }
            set
            {
                if (this._MaxSequenceLength != value)
                {
                    this.OnMaxSequenceLengthChanging(ref value);
                    this._MaxSequenceLength = value;
                    this.OnMaxSequenceLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxSequenceLength;
        partial void OnMaxSequenceLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxSequenceLengthChanged();
        
        [Category("")]
        [PropertyOrderAttribute(13)]
        [DisplayName("Prefix")]
        [Description("Prefix for text code sequence")]
        public string Prefix // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Prefix; }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(ref value);
                    this._Prefix = value;
                    this.OnPrefixChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Prefix = string.Empty;
        partial void OnPrefixChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IEnumeratorSequence.ListNodeGeneratorsSettings { get { return (this as EnumeratorSequence).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_enumerator_sequence
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListEnumeratorSequencesValidator : ValidatorBase<GroupListEnumeratorSequences, GroupListEnumeratorSequencesValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListEnumeratorSequences : ConfigObjectVmGenSettings<GroupListEnumeratorSequences, GroupListEnumeratorSequencesValidator>, IComparable<GroupListEnumeratorSequences>, IConfigAcceptVisitor, IGroupListEnumeratorSequences // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListEnumeratorSequences(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListEnumeratorSequencesValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListEnumeratorSequences = new ConfigNodesCollection<EnumeratorSequence>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(EnumeratorSequence)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListEnumeratorSequences.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListEnumeratorSequences Clone(ITreeConfigNode? parent, IGroupListEnumeratorSequences from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListEnumeratorSequences vm = new GroupListEnumeratorSequences(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListEnumeratorSequences = new ConfigNodesCollection<EnumeratorSequence>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListEnumeratorSequences) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListEnumeratorSequences.Add(EnumeratorSequence.Clone(vm, (EnumeratorSequence)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListEnumeratorSequences to, IGroupListEnumeratorSequences from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListEnumeratorSequences.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListEnumeratorSequences)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            EnumeratorSequence.Update((EnumeratorSequence)t, (EnumeratorSequence)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListEnumeratorSequences.Remove(t);
                }
                foreach (var tt in from.ListEnumeratorSequences)
                {
                    bool isfound = false;
                    foreach (var t in to.ListEnumeratorSequences.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new EnumeratorSequence(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        EnumeratorSequence.Update(p, (EnumeratorSequence)tt, isDeep);
                        to.ListEnumeratorSequences.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListEnumeratorSequences Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListEnumeratorSequences.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListEnumeratorSequences from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListEnumeratorSequences.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_enumerator_sequences' to 'GroupListEnumeratorSequences'
        public static GroupListEnumeratorSequences ConvertToVM(Proto.Config.proto_group_list_enumerator_sequences m, GroupListEnumeratorSequences vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListEnumeratorSequences = new ConfigNodesCollection<EnumeratorSequence>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListEnumeratorSequences) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = EnumeratorSequence.ConvertToVM(t, new EnumeratorSequence(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListEnumeratorSequences.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListEnumeratorSequences' to 'proto_group_list_enumerator_sequences'
        public static Proto.Config.proto_group_list_enumerator_sequences ConvertToProto(GroupListEnumeratorSequences vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_enumerator_sequences m = new Proto.Config.proto_group_list_enumerator_sequences(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListEnumeratorSequences) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListEnumeratorSequences.Add(EnumeratorSequence.ConvertToProto((EnumeratorSequence)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListEnumeratorSequences)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        [Description("Document number sequences")]
        public ConfigNodesCollection<EnumeratorSequence> ListEnumeratorSequences // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListEnumeratorSequences; }
            set
            {
                if (this._ListEnumeratorSequences != value)
                {
                    this.OnListEnumeratorSequencesChanging(value);
                    _ListEnumeratorSequences = value;
                    this.OnListEnumeratorSequencesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<EnumeratorSequence> _ListEnumeratorSequences;
        IReadOnlyList<IEnumeratorSequence> IGroupListEnumeratorSequences.ListEnumeratorSequences { get { return (this as GroupListEnumeratorSequences).ListEnumeratorSequences; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListEnumeratorSequencesChanging(ObservableCollection<EnumeratorSequence> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListEnumeratorSequencesChanged();
        public EnumeratorSequence this[int index] { get { return (EnumeratorSequence)this.ListEnumeratorSequences[index]; } }
        IEnumeratorSequence IGroupListEnumeratorSequences.this[int index] { get { return (EnumeratorSequence)this.ListEnumeratorSequences[index]; } }
        public void Add(EnumeratorSequence item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListEnumeratorSequences.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<EnumeratorSequence> items) 
        { 
            Debug.Assert(items != null);
            this.ListEnumeratorSequences.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListEnumeratorSequences.Count; }
        int IGroupListEnumeratorSequences.Count() { return this.Count(); }
        public void Remove(EnumeratorSequence item) 
        {
            Debug.Assert(item != null);
            this.ListEnumeratorSequences.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListEnumeratorSequences.ListNodeGeneratorsSettings { get { return (this as GroupListEnumeratorSequences).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class RoleValidator : ValidatorBase<Role, RoleValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Role : ConfigObjectVmGenSettings<Role, RoleValidator>, IComparable<Role>, IConfigAcceptVisitor, IRole // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Role(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, RoleValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Role Clone(ITreeConfigNode? parent, IRole from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Role vm = new Role(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultConstantPrintAccessSettings = from.DefaultConstantPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultConstantEditAccessSettings = from.DefaultConstantEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultCatalogPrintAccessSettings = from.DefaultCatalogPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultCatalogEditAccessSettings = from.DefaultCatalogEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultDocumentPrintAccessSettings = from.DefaultDocumentPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultDocumentEditAccessSettings = from.DefaultDocumentEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Role to, IRole from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultConstantPrintAccessSettings = from.DefaultConstantPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultConstantEditAccessSettings = from.DefaultConstantEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultCatalogPrintAccessSettings = from.DefaultCatalogPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultCatalogEditAccessSettings = from.DefaultCatalogEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultDocumentPrintAccessSettings = from.DefaultDocumentPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultDocumentEditAccessSettings = from.DefaultDocumentEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Role Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Role.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Role from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Role.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role' to 'Role'
        public static Role ConvertToVM(Proto.Config.proto_role m, Role vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultConstantPrintAccessSettings = (EnumPrintAccess)m.DefaultConstantPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultConstantEditAccessSettings = (EnumConstantAccess)m.DefaultConstantEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultCatalogPrintAccessSettings = (EnumPrintAccess)m.DefaultCatalogPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultCatalogEditAccessSettings = (EnumCatalogDetailAccess)m.DefaultCatalogEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultDocumentPrintAccessSettings = (EnumPrintAccess)m.DefaultDocumentPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultDocumentEditAccessSettings = (EnumDocumentAccess)m.DefaultDocumentEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Role' to 'proto_role'
        public static Proto.Config.proto_role ConvertToProto(Role vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role m = new Proto.Config.proto_role(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DefaultConstantPrintAccessSettings = (Proto.Config.proto_enum_print_access)vm.DefaultConstantPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DefaultConstantEditAccessSettings = (Proto.Config.proto_enum_constant_access)vm.DefaultConstantEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DefaultCatalogPrintAccessSettings = (Proto.Config.proto_enum_print_access)vm.DefaultCatalogPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DefaultCatalogEditAccessSettings = (Proto.Config.proto_enum_catalog_detail_access)vm.DefaultCatalogEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DefaultDocumentPrintAccessSettings = (Proto.Config.proto_enum_print_access)vm.DefaultDocumentPrintAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DefaultDocumentEditAccessSettings = (Proto.Config.proto_enum_document_access)vm.DefaultDocumentEditAccessSettings; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(11)]
        [DisplayName("Print Constants")]
        [Description("Default constant-print access for role")]
        public EnumPrintAccess DefaultConstantPrintAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultConstantPrintAccessSettings; }
            set
            {
                if (this._DefaultConstantPrintAccessSettings != value)
                {
                    this.OnDefaultConstantPrintAccessSettingsChanging(ref value);
                    this._DefaultConstantPrintAccessSettings = value;
                    this.OnDefaultConstantPrintAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _DefaultConstantPrintAccessSettings;
        partial void OnDefaultConstantPrintAccessSettingsChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultConstantPrintAccessSettingsChanged();
        
        [Category("")]
        [PropertyOrderAttribute(12)]
        [DisplayName("Edit Constants")]
        [Description("Default constant-edit access for role")]
        public EnumConstantAccess DefaultConstantEditAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultConstantEditAccessSettings; }
            set
            {
                if (this._DefaultConstantEditAccessSettings != value)
                {
                    this.OnDefaultConstantEditAccessSettingsChanging(ref value);
                    this._DefaultConstantEditAccessSettings = value;
                    this.OnDefaultConstantEditAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumConstantAccess _DefaultConstantEditAccessSettings;
        partial void OnDefaultConstantEditAccessSettingsChanging(ref EnumConstantAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultConstantEditAccessSettingsChanged();
        
        [Category("")]
        [PropertyOrderAttribute(13)]
        [DisplayName("Print Catalog")]
        [Description("Default catalog-print access for role")]
        public EnumPrintAccess DefaultCatalogPrintAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultCatalogPrintAccessSettings; }
            set
            {
                if (this._DefaultCatalogPrintAccessSettings != value)
                {
                    this.OnDefaultCatalogPrintAccessSettingsChanging(ref value);
                    this._DefaultCatalogPrintAccessSettings = value;
                    this.OnDefaultCatalogPrintAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _DefaultCatalogPrintAccessSettings;
        partial void OnDefaultCatalogPrintAccessSettingsChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultCatalogPrintAccessSettingsChanged();
        
        [Category("")]
        [PropertyOrderAttribute(14)]
        [DisplayName("Edit Catalog")]
        [Description("Default catalog-edit access for role")]
        public EnumCatalogDetailAccess DefaultCatalogEditAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultCatalogEditAccessSettings; }
            set
            {
                if (this._DefaultCatalogEditAccessSettings != value)
                {
                    this.OnDefaultCatalogEditAccessSettingsChanging(ref value);
                    this._DefaultCatalogEditAccessSettings = value;
                    this.OnDefaultCatalogEditAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogDetailAccess _DefaultCatalogEditAccessSettings;
        partial void OnDefaultCatalogEditAccessSettingsChanging(ref EnumCatalogDetailAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultCatalogEditAccessSettingsChanged();
        
        [Category("")]
        [PropertyOrderAttribute(15)]
        [DisplayName("Print Document")]
        [Description("Default document-print access for role")]
        public EnumPrintAccess DefaultDocumentPrintAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultDocumentPrintAccessSettings; }
            set
            {
                if (this._DefaultDocumentPrintAccessSettings != value)
                {
                    this.OnDefaultDocumentPrintAccessSettingsChanging(ref value);
                    this._DefaultDocumentPrintAccessSettings = value;
                    this.OnDefaultDocumentPrintAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _DefaultDocumentPrintAccessSettings;
        partial void OnDefaultDocumentPrintAccessSettingsChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultDocumentPrintAccessSettingsChanged();
        
        [Category("")]
        [PropertyOrderAttribute(16)]
        [DisplayName("Edit Document")]
        [Description("Default document-edit access for role")]
        public EnumDocumentAccess DefaultDocumentEditAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultDocumentEditAccessSettings; }
            set
            {
                if (this._DefaultDocumentEditAccessSettings != value)
                {
                    this.OnDefaultDocumentEditAccessSettingsChanging(ref value);
                    this._DefaultDocumentEditAccessSettings = value;
                    this.OnDefaultDocumentEditAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDocumentAccess _DefaultDocumentEditAccessSettings;
        partial void OnDefaultDocumentEditAccessSettingsChanging(ref EnumDocumentAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultDocumentEditAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IRole.ListNodeGeneratorsSettings { get { return (this as Role).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_role
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class RoleConstantAccessValidator : ValidatorBase<RoleConstantAccess, RoleConstantAccessValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class RoleConstantAccess : VmValidatableWithSeverity<RoleConstantAccess, RoleConstantAccessValidator>, IRoleConstantAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public RoleConstantAccess() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public RoleConstantAccess() 
            : base(RoleConstantAccessValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static RoleConstantAccess Clone(IRoleConstantAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            RoleConstantAccess vm = new RoleConstantAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(RoleConstantAccess to, IRoleConstantAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override RoleConstantAccess Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return RoleConstantAccess.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(RoleConstantAccess from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            RoleConstantAccess.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role_constant_access' to 'RoleConstantAccess'
        public static RoleConstantAccess ConvertToVM(Proto.Config.proto_role_constant_access m, RoleConstantAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EditAccess = (EnumConstantAccess)m.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrintAccess = (EnumPrintAccess)m.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'RoleConstantAccess' to 'proto_role_constant_access'
        public static Proto.Config.proto_role_constant_access ConvertToProto(RoleConstantAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role_constant_access m = new Proto.Config.proto_role_constant_access(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EditAccess = (Proto.Config.proto_enum_constant_access)vm.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PrintAccess = (Proto.Config.proto_enum_print_access)vm.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public EnumConstantAccess EditAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EditAccess; }
            set
            {
                if (this._EditAccess != value)
                {
                    this.OnEditAccessChanging(ref value);
                    this._EditAccess = value;
                    this.OnEditAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumConstantAccess _EditAccess;
        partial void OnEditAccessChanging(ref EnumConstantAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEditAccessChanged();
        
        public EnumPrintAccess PrintAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrintAccess; }
            set
            {
                if (this._PrintAccess != value)
                {
                    this.OnPrintAccessChanging(ref value);
                    this._PrintAccess = value;
                    this.OnPrintAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _PrintAccess;
        partial void OnPrintAccessChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrintAccessChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class RolePropertyAccessValidator : ValidatorBase<RolePropertyAccess, RolePropertyAccessValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class RolePropertyAccess : VmValidatableWithSeverity<RolePropertyAccess, RolePropertyAccessValidator>, IRolePropertyAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public RolePropertyAccess() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public RolePropertyAccess() 
            : base(RolePropertyAccessValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static RolePropertyAccess Clone(IRolePropertyAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            RolePropertyAccess vm = new RolePropertyAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(RolePropertyAccess to, IRolePropertyAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override RolePropertyAccess Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return RolePropertyAccess.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(RolePropertyAccess from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            RolePropertyAccess.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role_property_access' to 'RolePropertyAccess'
        public static RolePropertyAccess ConvertToVM(Proto.Config.proto_role_property_access m, RolePropertyAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EditAccess = (EnumPropertyAccess)m.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrintAccess = (EnumPrintAccess)m.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'RolePropertyAccess' to 'proto_role_property_access'
        public static Proto.Config.proto_role_property_access ConvertToProto(RolePropertyAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role_property_access m = new Proto.Config.proto_role_property_access(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EditAccess = (Proto.Config.proto_enum_property_access)vm.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PrintAccess = (Proto.Config.proto_enum_print_access)vm.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public EnumPropertyAccess EditAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EditAccess; }
            set
            {
                if (this._EditAccess != value)
                {
                    this.OnEditAccessChanging(ref value);
                    this._EditAccess = value;
                    this.OnEditAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPropertyAccess _EditAccess;
        partial void OnEditAccessChanging(ref EnumPropertyAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEditAccessChanged();
        
        public EnumPrintAccess PrintAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrintAccess; }
            set
            {
                if (this._PrintAccess != value)
                {
                    this.OnPrintAccessChanging(ref value);
                    this._PrintAccess = value;
                    this.OnPrintAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _PrintAccess;
        partial void OnPrintAccessChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrintAccessChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class RoleCatalogAccessValidator : ValidatorBase<RoleCatalogAccess, RoleCatalogAccessValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class RoleCatalogAccess : VmValidatableWithSeverity<RoleCatalogAccess, RoleCatalogAccessValidator>, IRoleCatalogAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public RoleCatalogAccess() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public RoleCatalogAccess() 
            : base(RoleCatalogAccessValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static RoleCatalogAccess Clone(IRoleCatalogAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            RoleCatalogAccess vm = new RoleCatalogAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(RoleCatalogAccess to, IRoleCatalogAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override RoleCatalogAccess Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return RoleCatalogAccess.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(RoleCatalogAccess from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            RoleCatalogAccess.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role_catalog_access' to 'RoleCatalogAccess'
        public static RoleCatalogAccess ConvertToVM(Proto.Config.proto_role_catalog_access m, RoleCatalogAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EditAccess = (EnumCatalogDetailAccess)m.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrintAccess = (EnumPrintAccess)m.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'RoleCatalogAccess' to 'proto_role_catalog_access'
        public static Proto.Config.proto_role_catalog_access ConvertToProto(RoleCatalogAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role_catalog_access m = new Proto.Config.proto_role_catalog_access(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EditAccess = (Proto.Config.proto_enum_catalog_detail_access)vm.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PrintAccess = (Proto.Config.proto_enum_print_access)vm.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public EnumCatalogDetailAccess EditAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EditAccess; }
            set
            {
                if (this._EditAccess != value)
                {
                    this.OnEditAccessChanging(ref value);
                    this._EditAccess = value;
                    this.OnEditAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogDetailAccess _EditAccess;
        partial void OnEditAccessChanging(ref EnumCatalogDetailAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEditAccessChanged();
        
        public EnumPrintAccess PrintAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrintAccess; }
            set
            {
                if (this._PrintAccess != value)
                {
                    this.OnPrintAccessChanging(ref value);
                    this._PrintAccess = value;
                    this.OnPrintAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _PrintAccess;
        partial void OnPrintAccessChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrintAccessChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class RoleDetailAccessValidator : ValidatorBase<RoleDetailAccess, RoleDetailAccessValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class RoleDetailAccess : VmValidatableWithSeverity<RoleDetailAccess, RoleDetailAccessValidator>, IRoleDetailAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public RoleDetailAccess() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public RoleDetailAccess() 
            : base(RoleDetailAccessValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static RoleDetailAccess Clone(IRoleDetailAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            RoleDetailAccess vm = new RoleDetailAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(RoleDetailAccess to, IRoleDetailAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override RoleDetailAccess Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return RoleDetailAccess.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(RoleDetailAccess from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            RoleDetailAccess.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role_detail_access' to 'RoleDetailAccess'
        public static RoleDetailAccess ConvertToVM(Proto.Config.proto_role_detail_access m, RoleDetailAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EditAccess = (EnumCatalogDetailAccess)m.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrintAccess = (EnumPrintAccess)m.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'RoleDetailAccess' to 'proto_role_detail_access'
        public static Proto.Config.proto_role_detail_access ConvertToProto(RoleDetailAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role_detail_access m = new Proto.Config.proto_role_detail_access(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EditAccess = (Proto.Config.proto_enum_catalog_detail_access)vm.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PrintAccess = (Proto.Config.proto_enum_print_access)vm.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public EnumCatalogDetailAccess EditAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EditAccess; }
            set
            {
                if (this._EditAccess != value)
                {
                    this.OnEditAccessChanging(ref value);
                    this._EditAccess = value;
                    this.OnEditAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogDetailAccess _EditAccess;
        partial void OnEditAccessChanging(ref EnumCatalogDetailAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEditAccessChanged();
        
        public EnumPrintAccess PrintAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrintAccess; }
            set
            {
                if (this._PrintAccess != value)
                {
                    this.OnPrintAccessChanging(ref value);
                    this._PrintAccess = value;
                    this.OnPrintAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _PrintAccess;
        partial void OnPrintAccessChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrintAccessChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class RoleDocumentAccessValidator : ValidatorBase<RoleDocumentAccess, RoleDocumentAccessValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class RoleDocumentAccess : VmValidatableWithSeverity<RoleDocumentAccess, RoleDocumentAccessValidator>, IRoleDocumentAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public RoleDocumentAccess() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public RoleDocumentAccess() 
            : base(RoleDocumentAccessValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static RoleDocumentAccess Clone(IRoleDocumentAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            RoleDocumentAccess vm = new RoleDocumentAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(RoleDocumentAccess to, IRoleDocumentAccess from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EditAccess = from.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrintAccess = from.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override RoleDocumentAccess Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return RoleDocumentAccess.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(RoleDocumentAccess from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            RoleDocumentAccess.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_role_document_access' to 'RoleDocumentAccess'
        public static RoleDocumentAccess ConvertToVM(Proto.Config.proto_role_document_access m, RoleDocumentAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EditAccess = (EnumDocumentAccess)m.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrintAccess = (EnumPrintAccess)m.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'RoleDocumentAccess' to 'proto_role_document_access'
        public static Proto.Config.proto_role_document_access ConvertToProto(RoleDocumentAccess vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_role_document_access m = new Proto.Config.proto_role_document_access(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EditAccess = (Proto.Config.proto_enum_document_access)vm.EditAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.PrintAccess = (Proto.Config.proto_enum_print_access)vm.PrintAccess; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Browsable(false)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public EnumDocumentAccess EditAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EditAccess; }
            set
            {
                if (this._EditAccess != value)
                {
                    this.OnEditAccessChanging(ref value);
                    this._EditAccess = value;
                    this.OnEditAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDocumentAccess _EditAccess;
        partial void OnEditAccessChanging(ref EnumDocumentAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEditAccessChanged();
        
        public EnumPrintAccess PrintAccess // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrintAccess; }
            set
            {
                if (this._PrintAccess != value)
                {
                    this.OnPrintAccessChanging(ref value);
                    this._PrintAccess = value;
                    this.OnPrintAccessChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPrintAccess _PrintAccess;
        partial void OnPrintAccessChanging(ref EnumPrintAccess to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrintAccessChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListRolesValidator : ValidatorBase<GroupListRoles, GroupListRolesValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListRoles : ConfigObjectVmGenSettings<GroupListRoles, GroupListRolesValidator>, IComparable<GroupListRoles>, IConfigAcceptVisitor, IGroupListRoles // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListRoles(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListRolesValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListRoles = new ConfigNodesCollection<Role>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Role)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListRoles.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListRoles Clone(ITreeConfigNode? parent, IGroupListRoles from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListRoles vm = new GroupListRoles(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoles = new ConfigNodesCollection<Role>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListRoles) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListRoles.Add(Role.Clone(vm, (Role)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListRoles to, IGroupListRoles from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoles.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoles)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Role.Update((Role)t, (Role)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoles.Remove(t);
                }
                foreach (var tt in from.ListRoles)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoles.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Role(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Role.Update(p, (Role)tt, isDeep);
                        to.ListRoles.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListRoles Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListRoles.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListRoles from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListRoles.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_roles' to 'GroupListRoles'
        public static GroupListRoles ConvertToVM(Proto.Config.proto_group_list_roles m, GroupListRoles vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoles = new ConfigNodesCollection<Role>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListRoles) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Role.ConvertToVM(t, new Role(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListRoles.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListRoles' to 'proto_group_list_roles'
        public static Proto.Config.proto_group_list_roles ConvertToProto(GroupListRoles vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_roles m = new Proto.Config.proto_group_list_roles(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListRoles) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoles.Add(Role.ConvertToProto((Role)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListRoles)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Role> ListRoles // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoles; }
            set
            {
                if (this._ListRoles != value)
                {
                    this.OnListRolesChanging(value);
                    _ListRoles = value;
                    this.OnListRolesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Role> _ListRoles;
        IReadOnlyList<IRole> IGroupListRoles.ListRoles { get { return (this as GroupListRoles).ListRoles; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRolesChanging(ObservableCollection<Role> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRolesChanged();
        public Role this[int index] { get { return (Role)this.ListRoles[index]; } }
        IRole IGroupListRoles.this[int index] { get { return (Role)this.ListRoles[index]; } }
        public void Add(Role item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListRoles.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Role> items) 
        { 
            Debug.Assert(items != null);
            this.ListRoles.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListRoles.Count; }
        int IGroupListRoles.Count() { return this.Count(); }
        public void Remove(Role item) 
        {
            Debug.Assert(item != null);
            this.ListRoles.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListRoles.ListNodeGeneratorsSettings { get { return (this as GroupListRoles).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class MainViewFormValidator : ValidatorBase<MainViewForm, MainViewFormValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class MainViewForm : ConfigObjectVmGenSettings<MainViewForm, MainViewFormValidator>, IComparable<MainViewForm>, IConfigAcceptVisitor, IMainViewForm // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public MainViewForm(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, MainViewFormValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupListViewForms = new GroupListMainViewForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static MainViewForm Clone(ITreeConfigNode? parent, IMainViewForm from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            MainViewForm vm = new MainViewForm(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupListViewForms = vSharpStudio.vm.ViewModels.GroupListMainViewForms.Clone(vm, from.GroupListViewForms, isDeep);
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(MainViewForm to, IMainViewForm from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListMainViewForms.Update((GroupListMainViewForms)to.GroupListViewForms, from.GroupListViewForms, isDeep);
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override MainViewForm Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return MainViewForm.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(MainViewForm from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            MainViewForm.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_main_view_form' to 'MainViewForm'
        public static MainViewForm ConvertToVM(Proto.Config.proto_main_view_form m, MainViewForm vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupListViewForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupListViewForms = new GroupListMainViewForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListMainViewForms.ConvertToVM(m.GroupListViewForms, (GroupListMainViewForms)vm.GroupListViewForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'MainViewForm' to 'proto_main_view_form'
        public static Proto.Config.proto_main_view_form ConvertToProto(MainViewForm vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_main_view_form m = new Proto.Config.proto_main_view_form(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupListViewForms = vSharpStudio.vm.ViewModels.GroupListMainViewForms.ConvertToProto((GroupListMainViewForms)vm.GroupListViewForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupListViewForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public GroupListMainViewForms GroupListViewForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupListViewForms; }
            set
            {
                if (this._GroupListViewForms != value)
                {
                    this.OnGroupListViewFormsChanging(ref value);
                    this._GroupListViewForms = value;
                    this.OnGroupListViewFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListMainViewForms _GroupListViewForms;
        IGroupListMainViewForms IMainViewForm.GroupListViewForms { get { return (this as MainViewForm).GroupListViewForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupListViewFormsChanging(ref GroupListMainViewForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupListViewFormsChanged();
        //IGroupListMainViewForms IMainViewForm.GroupListViewForms { get { return this._GroupListViewForms; } }
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IMainViewForm.ListNodeGeneratorsSettings { get { return (this as MainViewForm).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListMainViewFormsValidator : ValidatorBase<GroupListMainViewForms, GroupListMainViewFormsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // main view forms hierarchy node with children
    public partial class GroupListMainViewForms : ConfigObjectVmGenSettings<GroupListMainViewForms, GroupListMainViewFormsValidator>, IComparable<GroupListMainViewForms>, IConfigAcceptVisitor, IGroupListMainViewForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListMainViewForms(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListMainViewFormsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListMainViewForms = new ConfigNodesCollection<MainViewForm>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(MainViewForm)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListMainViewForms.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListMainViewForms Clone(ITreeConfigNode? parent, IGroupListMainViewForms from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListMainViewForms vm = new GroupListMainViewForms(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListMainViewForms = new ConfigNodesCollection<MainViewForm>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListMainViewForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListMainViewForms.Add(MainViewForm.Clone(vm, (MainViewForm)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListMainViewForms to, IGroupListMainViewForms from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListMainViewForms.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListMainViewForms)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            MainViewForm.Update((MainViewForm)t, (MainViewForm)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListMainViewForms.Remove(t);
                }
                foreach (var tt in from.ListMainViewForms)
                {
                    bool isfound = false;
                    foreach (var t in to.ListMainViewForms.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new MainViewForm(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        MainViewForm.Update(p, (MainViewForm)tt, isDeep);
                        to.ListMainViewForms.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListMainViewForms Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListMainViewForms.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListMainViewForms from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListMainViewForms.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_main_view_forms' to 'GroupListMainViewForms'
        public static GroupListMainViewForms ConvertToVM(Proto.Config.proto_group_list_main_view_forms m, GroupListMainViewForms vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListMainViewForms = new ConfigNodesCollection<MainViewForm>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListMainViewForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = MainViewForm.ConvertToVM(t, new MainViewForm(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListMainViewForms.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListMainViewForms' to 'proto_group_list_main_view_forms'
        public static Proto.Config.proto_group_list_main_view_forms ConvertToProto(GroupListMainViewForms vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_main_view_forms m = new Proto.Config.proto_group_list_main_view_forms(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListMainViewForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListMainViewForms.Add(MainViewForm.ConvertToProto((MainViewForm)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListMainViewForms)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<MainViewForm> ListMainViewForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListMainViewForms; }
            set
            {
                if (this._ListMainViewForms != value)
                {
                    this.OnListMainViewFormsChanging(value);
                    _ListMainViewForms = value;
                    this.OnListMainViewFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<MainViewForm> _ListMainViewForms;
        IReadOnlyList<IMainViewForm> IGroupListMainViewForms.ListMainViewForms { get { return (this as GroupListMainViewForms).ListMainViewForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListMainViewFormsChanging(ObservableCollection<MainViewForm> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListMainViewFormsChanged();
        public MainViewForm this[int index] { get { return (MainViewForm)this.ListMainViewForms[index]; } }
        IMainViewForm IGroupListMainViewForms.this[int index] { get { return (MainViewForm)this.ListMainViewForms[index]; } }
        public void Add(MainViewForm item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListMainViewForms.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<MainViewForm> items) 
        { 
            Debug.Assert(items != null);
            this.ListMainViewForms.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListMainViewForms.Count; }
        int IGroupListMainViewForms.Count() { return this.Count(); }
        public void Remove(MainViewForm item) 
        {
            Debug.Assert(item != null);
            this.ListMainViewForms.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListMainViewForms.ListNodeGeneratorsSettings { get { return (this as GroupListMainViewForms).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListPropertiesValidator : ValidatorBase<GroupListProperties, GroupListPropertiesValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // P R O P E R T Y
    // @exclude
    // ####################################### P R O P E R T Y ##########################################
    public partial class GroupListProperties : ConfigObjectVmGenSettings<GroupListProperties, GroupListPropertiesValidator>, IComparable<GroupListProperties>, IConfigAcceptVisitor, IGroupListProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListProperties(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListPropertiesValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListProperties = new ConfigNodesCollection<Property>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Property)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListProperties.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListProperties Clone(ITreeConfigNode? parent, IGroupListProperties from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListProperties vm = new GroupListProperties(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListProperties = new ConfigNodesCollection<Property>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListProperties.Add(Property.Clone(vm, (Property)t, isDeep));
            vm.LastGenPosition = from.LastGenPosition; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRolePropertyAccessSettings.Add(RolePropertyAccess.Clone((RolePropertyAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListProperties to, IGroupListProperties from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListProperties.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListProperties)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Property.Update((Property)t, (Property)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListProperties.Remove(t);
                }
                foreach (var tt in from.ListProperties)
                {
                    bool isfound = false;
                    foreach (var t in to.ListProperties.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Property(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Property.Update(p, (Property)tt, isDeep);
                        to.ListProperties.Add(p);
                    }
                }
            }
            to.LastGenPosition = from.LastGenPosition; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRolePropertyAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRolePropertyAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RolePropertyAccess.Update((RolePropertyAccess)t, (RolePropertyAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRolePropertyAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRolePropertyAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRolePropertyAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RolePropertyAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RolePropertyAccess.Update(p, (RolePropertyAccess)tt, isDeep);
                        to.ListRolePropertyAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListProperties Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListProperties.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListProperties from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListProperties.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_properties' to 'GroupListProperties'
        public static GroupListProperties ConvertToVM(Proto.Config.proto_group_list_properties m, GroupListProperties vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListProperties = new ConfigNodesCollection<Property>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Property.ConvertToVM(t, new Property(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListProperties.Add(tvm);
            }
            vm.LastGenPosition = m.LastGenPosition; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RolePropertyAccess.ConvertToVM(t, new RolePropertyAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRolePropertyAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListProperties' to 'proto_group_list_properties'
        public static Proto.Config.proto_group_list_properties ConvertToProto(GroupListProperties vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_properties m = new Proto.Config.proto_group_list_properties(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListProperties.Add(Property.ConvertToProto((Property)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.LastGenPosition = vm.LastGenPosition; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRolePropertyAccessSettings.Add(RolePropertyAccess.ConvertToProto((RolePropertyAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListProperties)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListRolePropertyAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Property> ListProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListProperties; }
            set
            {
                if (this._ListProperties != value)
                {
                    this.OnListPropertiesChanging(value);
                    _ListProperties = value;
                    this.OnListPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Property> _ListProperties;
        IReadOnlyList<IProperty> IGroupListProperties.ListProperties { get { return (this as GroupListProperties).ListProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListPropertiesChanging(ObservableCollection<Property> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListPropertiesChanged();
        public Property this[int index] { get { return (Property)this.ListProperties[index]; } }
        IProperty IGroupListProperties.this[int index] { get { return (Property)this.ListProperties[index]; } }
        public void Add(Property item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListProperties.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Property> items) 
        { 
            Debug.Assert(items != null);
            this.ListProperties.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListProperties.Count; }
        int IGroupListProperties.Count() { return this.Count(); }
        public void Remove(Property item) 
        {
            Debug.Assert(item != null);
            this.ListProperties.Remove(item); 
            item.Parent = null;
        }
        
        // Last generated Protobuf field position
        [ReadOnly(true)]
        public uint LastGenPosition // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LastGenPosition; }
            set
            {
                if (this._LastGenPosition != value)
                {
                    this.OnLastGenPositionChanging(ref value);
                    this._LastGenPosition = value;
                    this.OnLastGenPositionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _LastGenPosition;
        partial void OnLastGenPositionChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLastGenPositionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RolePropertyAccess> ListRolePropertyAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRolePropertyAccessSettings; }
            set
            {
                if (this._ListRolePropertyAccessSettings != value)
                {
                    this.OnListRolePropertyAccessSettingsChanging(value);
                    _ListRolePropertyAccessSettings = value;
                    this.OnListRolePropertyAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RolePropertyAccess> _ListRolePropertyAccessSettings;
        IReadOnlyList<IRolePropertyAccess> IGroupListProperties.ListRolePropertyAccessSettings { get { return (this as GroupListProperties).ListRolePropertyAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRolePropertyAccessSettingsChanging(ObservableCollection<RolePropertyAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRolePropertyAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListProperties.ListNodeGeneratorsSettings { get { return (this as GroupListProperties).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class PropertyValidator : ValidatorBase<Property, PropertyValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Property : ConfigObjectVmGenSettings<Property, PropertyValidator>, IComparable<Property>, IConfigAcceptVisitor, IProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Property(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PropertyValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._DataType = new DataType(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._DataGenerator = new PropertyDataGenerator(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Property Clone(ITreeConfigNode? parent, IProperty from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Property vm = new Property(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.DataType = vSharpStudio.vm.ViewModels.DataType.Clone(vm, from.DataType, isDeep);
            vm.IsNullable = from.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultValue = from.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RangeValuesRequirementStr = from.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MinLengthRequirement = from.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxLengthRequirement = from.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.AccuracyForTime = from.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LinesOnScreen = from.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.DataGenerator = vSharpStudio.vm.ViewModels.PropertyDataGenerator.Clone(vm, from.DataGenerator, isDeep);
            vm.ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRolePropertyAccessSettings.Add(RolePropertyAccess.Clone((RolePropertyAccess)t, isDeep));
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Position = from.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Property to, IProperty from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.DataType.Update((DataType)to.DataType, from.DataType, isDeep);
            to.IsNullable = from.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultValue = from.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RangeValuesRequirementStr = from.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MinLengthRequirement = from.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxLengthRequirement = from.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.AccuracyForTime = from.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LinesOnScreen = from.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.PropertyDataGenerator.Update((PropertyDataGenerator)to.DataGenerator, from.DataGenerator, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRolePropertyAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRolePropertyAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RolePropertyAccess.Update((RolePropertyAccess)t, (RolePropertyAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRolePropertyAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRolePropertyAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRolePropertyAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RolePropertyAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RolePropertyAccess.Update(p, (RolePropertyAccess)tt, isDeep);
                        to.ListRolePropertyAccessSettings.Add(p);
                    }
                }
            }
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Position = from.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Property Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Property.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Property from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Property.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_property' to 'Property'
        public static Property ConvertToVM(Proto.Config.proto_property m, Property vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.DataType == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.DataType = new DataType(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.DataType.ConvertToVM(m.DataType, (DataType)vm.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.IsNullable = m.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultValue = m.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RangeValuesRequirementStr = m.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MinLengthRequirement = m.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxLengthRequirement = m.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.AccuracyForTime = (EnumTimeAccuracyType)m.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsTryAttach = m.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LinesOnScreen = m.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewRow = m.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.TabName = m.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewTabControl = m.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStopTabControl = m.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.DataGenerator == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.DataGenerator = new PropertyDataGenerator(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.PropertyDataGenerator.ConvertToVM(m.DataGenerator, (PropertyDataGenerator)vm.DataGenerator); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListRolePropertyAccessSettings = new ObservableCollectionWithActions<RolePropertyAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RolePropertyAccess.ConvertToVM(t, new RolePropertyAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRolePropertyAccessSettings.Add(tvm);
            }
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Position = m.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Property' to 'proto_property'
        public static Proto.Config.proto_property ConvertToProto(Property vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_property m = new Proto.Config.proto_property(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DataType = vSharpStudio.vm.ViewModels.DataType.ConvertToProto((DataType)vm.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.IsNullable = vm.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DefaultValue = vm.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RangeValuesRequirementStr = vm.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.MinLengthRequirement = vm.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.MaxLengthRequirement = vm.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.AccuracyForTime = (Proto.Config.proto_enum_time_accuracy_type)vm.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsTryAttach = vm.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LinesOnScreen = vm.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewRow = vm.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.TabName = vm.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewTabControl = vm.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStopTabControl = vm.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DataGenerator = vSharpStudio.vm.ViewModels.PropertyDataGenerator.ConvertToProto((PropertyDataGenerator)vm.DataGenerator); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRolePropertyAccessSettings.Add(RolePropertyAccess.ConvertToProto((RolePropertyAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Position = vm.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.DataType.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.DataGenerator.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRolePropertyAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Property name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Typically used as UI field label")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("Description")]
        [Description("Description of property")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public DataType DataType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataType; }
            set
            {
                if (this._DataType != value)
                {
                    this.OnDataTypeChanging(ref value);
                    this._DataType = value;
                    this.OnDataTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private DataType _DataType;
        IDataType IProperty.DataType { get { return (this as Property).DataType; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnDataTypeChanging(ref DataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeChanged();
        //IDataType IProperty.DataType { get { return this._DataType; } }
        
        [Category("")]
        [PropertyOrderAttribute(20)]
        [DisplayName("Can be NULL")]
        [Description("If unchecked always expected data")]
        public bool IsNullable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNullable; }
            set
            {
                if (this._IsNullable != value)
                {
                    this.OnIsNullableChanging(ref value);
                    this._IsNullable = value;
                    this.OnIsNullableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNullable;
        partial void OnIsNullableChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNullableChanged();
        
        [Category("")]
        [PropertyOrderAttribute(8)]
        [DisplayName("Default")]
        [Description("Chunk of code to calculate Default value (can be inserted in generated code by generator if supported)")]
        public string DefaultValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultValue; }
            set
            {
                if (this._DefaultValue != value)
                {
                    this.OnDefaultValueChanging(ref value);
                    this._DefaultValue = value;
                    this.OnDefaultValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _DefaultValue = string.Empty;
        partial void OnDefaultValueChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(32)]
        [DisplayName("Expected")]
        [Description("Expected values or ranges of values. Use '#' to create range, and ';' to separate values or ranges")]
        public string RangeValuesRequirementStr // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RangeValuesRequirementStr; }
            set
            {
                if (this._RangeValuesRequirementStr != value)
                {
                    this.OnRangeValuesRequirementStrChanging(ref value);
                    this._RangeValuesRequirementStr = value;
                    this.OnRangeValuesRequirementStrChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RangeValuesRequirementStr = string.Empty;
        partial void OnRangeValuesRequirementStrChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRangeValuesRequirementStrChanged();
        
        [Category("")]
        [PropertyOrderAttribute(34)]
        [DisplayName("Min Length")]
        [Description("Minimum length of string")]
        public string MinLengthRequirement // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MinLengthRequirement; }
            set
            {
                if (this._MinLengthRequirement != value)
                {
                    this.OnMinLengthRequirementChanging(ref value);
                    this._MinLengthRequirement = value;
                    this.OnMinLengthRequirementChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _MinLengthRequirement = string.Empty;
        partial void OnMinLengthRequirementChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMinLengthRequirementChanged();
        
        [Category("")]
        [PropertyOrderAttribute(35)]
        [DisplayName("Max Length")]
        [Description("Maximum length of string")]
        public string MaxLengthRequirement // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxLengthRequirement; }
            set
            {
                if (this._MaxLengthRequirement != value)
                {
                    this.OnMaxLengthRequirementChanging(ref value);
                    this._MaxLengthRequirement = value;
                    this.OnMaxLengthRequirementChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _MaxLengthRequirement = string.Empty;
        partial void OnMaxLengthRequirementChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxLengthRequirementChanged();
        
        [Category("")]
        [PropertyOrderAttribute(36)]
        [DisplayName("Time accuracy")]
        [Description("Time accuracy for TimeOnly type. Business model is expecting selected accuracy")]
        public EnumTimeAccuracyType AccuracyForTime // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._AccuracyForTime; }
            set
            {
                if (this._AccuracyForTime != value)
                {
                    this.OnAccuracyForTimeChanging(ref value);
                    this._AccuracyForTime = value;
                    this.OnAccuracyForTimeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumTimeAccuracyType _AccuracyForTime;
        partial void OnAccuracyForTimeChanging(ref EnumTimeAccuracyType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAccuracyForTimeChanged();
        
        [PropertyOrderAttribute(23)]
        [Category("Auto Layout")]
        [DisplayName("UI attach")]
        [Description("UI engine will try put this field on same line as previous field")]
        public bool IsTryAttach // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsTryAttach; }
            set
            {
                if (this._IsTryAttach != value)
                {
                    this.OnIsTryAttachChanging(ref value);
                    this._IsTryAttach = value;
                    this.OnIsTryAttachChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsTryAttach;
        partial void OnIsTryAttachChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsTryAttachChanged();
        
        [PropertyOrderAttribute(22)]
        [Category("Auto Layout")]
        [DisplayName("UI lines")]
        [Description("Lines on screen for edit box")]
        public int LinesOnScreen // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LinesOnScreen; }
            set
            {
                if (this._LinesOnScreen != value)
                {
                    this.OnLinesOnScreenChanging(ref value);
                    this._LinesOnScreen = value;
                    this.OnLinesOnScreenChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LinesOnScreen;
        partial void OnLinesOnScreenChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLinesOnScreenChanged();
        
        [PropertyOrderAttribute(24)]
        [Category("Auto Layout")]
        [DisplayName("Start UI row")]
        [Description("Start new UI row for this property")]
        public bool IsStartNewRow // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewRow; }
            set
            {
                if (this._IsStartNewRow != value)
                {
                    this.OnIsStartNewRowChanging(ref value);
                    this._IsStartNewRow = value;
                    this.OnIsStartNewRowChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewRow;
        partial void OnIsStartNewRowChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewRowChanged();
        
        [PropertyOrderAttribute(26)]
        [Category("Auto Layout")]
        [DisplayName("Tab Name")]
        [Description("If not empty, then start new tab in tab control. If empty, then continue adding fields in current control")]
        public string TabName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._TabName; }
            set
            {
                if (this._TabName != value)
                {
                    this.OnTabNameChanging(ref value);
                    this._TabName = value;
                    this.OnTabNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _TabName = string.Empty;
        partial void OnTabNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnTabNameChanged();
        
        [PropertyOrderAttribute(25)]
        [Category("Auto Layout")]
        [DisplayName("Start Tab Control")]
        [Description("Start new tab control as current control")]
        public bool IsStartNewTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewTabControl; }
            set
            {
                if (this._IsStartNewTabControl != value)
                {
                    this.OnIsStartNewTabControlChanging(ref value);
                    this._IsStartNewTabControl = value;
                    this.OnIsStartNewTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewTabControl;
        partial void OnIsStartNewTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewTabControlChanged();
        
        [PropertyOrderAttribute(27)]
        [Category("Auto Layout")]
        [DisplayName("Stop Tab Control")]
        [Description("Stop using tab control for layout")]
        public bool IsStopTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStopTabControl; }
            set
            {
                if (this._IsStopTabControl != value)
                {
                    this.OnIsStopTabControlChanging(ref value);
                    this._IsStopTabControl = value;
                    this.OnIsStopTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStopTabControl;
        partial void OnIsStopTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStopTabControlChanged();
        
        [PropertyOrderAttribute(31)]
        [ExpandableObjectAttribute()]
        [DisplayName("Data Generator")]
        [Browsable(false)]
        public PropertyDataGenerator DataGenerator // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataGenerator; }
            set
            {
                if (this._DataGenerator != value)
                {
                    this.OnDataGeneratorChanging(ref value);
                    this._DataGenerator = value;
                    this.OnDataGeneratorChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private PropertyDataGenerator _DataGenerator;
        IPropertyDataGenerator IProperty.DataGenerator { get { return (this as Property).DataGenerator; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnDataGeneratorChanging(ref PropertyDataGenerator to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataGeneratorChanged();
        //IPropertyDataGenerator IProperty.DataGenerator { get { return this._DataGenerator; } }
        
        // 
        // // @attr [PropertyOrderAttribute(28)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("Start Grid")]
        // // @attr [Description("Start new container of 12 columns grid system")]
        // bool is_start_12_col_grid_system = 28;
        // // @attr [PropertyOrderAttribute(29)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("Stop Grid")]
        // // @attr [Description("Stop current container of 12 columns grid system")]
        // bool is_stop_12_col_grid_system = 29;
        // // @attr [PropertyOrderAttribute(30)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("Start Column")]
        // // @attr [Description("Start new column of 12 columns grid system")]
        // bool is_start_new_column_12_col_grid_system = 30;
        // // @attr [PropertyOrderAttribute(32)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("Start Row")]
        // // @attr [Description("Start new row of 12 columns grid system")]
        // bool is_start_new_row_12_col_grid_system = 31;
        // // @attr [PropertyOrderAttribute(31)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("Column Name")]
        // // @attr [Description("Column Name of 12 columns grid system")]
        // string column_name_12_col_grid_system = 32;
        // // @attr [PropertyOrderAttribute(33)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("When Hide")]
        // // @attr [Description("Condition of hiding base on screen size")]
        // proto_enum_hidden_type hide_type = 33;
        // // @attr [PropertyOrderAttribute(34)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("XS")]
        // // @attr [Description("Extra small. Small to large phone. Range: < 600px")]
        // google.protobuf.UInt32Value width_xs = 34;
        // // @attr [PropertyOrderAttribute(35)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("SM")]
        // // @attr [Description("Small. Small to medium tablet. Range: 600px > < 960px")]
        // google.protobuf.UInt32Value width_sm = 35;
        // // @attr [PropertyOrderAttribute(36)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("MD")]
        // // @attr [Description("Medium. Large tablet to laptop. Range: 960px > < 1280px")]
        // google.protobuf.UInt32Value width_md = 36;
        // // @attr [PropertyOrderAttribute(37)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("LG")]
        // // @attr [Description("Large. Desktop. Range: 1280px > < 1920px")]
        // google.protobuf.UInt32Value width_lg = 37;
        // // @attr [PropertyOrderAttribute(38)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("XL")]
        // // @attr [Description("Extra Large. HD and 4k. Range: 1920px > < 2560px")]
        // google.protobuf.UInt32Value width_xl = 38;
        // // @attr [PropertyOrderAttribute(39)]
        // // @attr [Category("12 Column Grid System")]
        // // @attr [DisplayName("XX")]
        // // @attr [Description("Extra Extra Large. 4k+ and ultra-wide. Range: >= 2560px")]
        // google.protobuf.UInt32Value width_xx = 39;
        [Browsable(false)]
        public ObservableCollectionWithActions<RolePropertyAccess> ListRolePropertyAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRolePropertyAccessSettings; }
            set
            {
                if (this._ListRolePropertyAccessSettings != value)
                {
                    this.OnListRolePropertyAccessSettingsChanging(value);
                    _ListRolePropertyAccessSettings = value;
                    this.OnListRolePropertyAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RolePropertyAccess> _ListRolePropertyAccessSettings;
        IReadOnlyList<IRolePropertyAccess> IProperty.ListRolePropertyAccessSettings { get { return (this as Property).ListRolePropertyAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRolePropertyAccessSettingsChanging(ObservableCollection<RolePropertyAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRolePropertyAccessSettingsChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        // Protobuf field position
        // Reserved positions: 1 - primary key
        [ReadOnly(true)]
        public uint Position // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Position; }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(ref value);
                    this._Position = value;
                    this.OnPositionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _Position;
        partial void OnPositionChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPositionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IProperty.ListNodeGeneratorsSettings { get { return (this as Property).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_property
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListDetailsValidator : ValidatorBase<GroupListDetails, GroupListDetailsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // D E T A I L S
    // @exclude
    // ####################################### D E T A I L S ########################################
    public partial class GroupListDetails : ConfigObjectVmGenSettings<GroupListDetails, GroupListDetailsValidator>, IComparable<GroupListDetails>, IConfigAcceptVisitor, IGroupListDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListDetails(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListDetailsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListDetails = new ConfigNodesCollection<Detail>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Detail)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListDetails.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListDetails Clone(ITreeConfigNode? parent, IGroupListDetails from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListDetails vm = new GroupListDetails(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListDetails = new ConfigNodesCollection<Detail>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListDetails) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListDetails.Add(Detail.Clone(vm, (Detail)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleDetailAccessSettings.Add(RoleDetailAccess.Clone((RoleDetailAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListDetails to, IGroupListDetails from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListDetails.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListDetails)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Detail.Update((Detail)t, (Detail)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListDetails.Remove(t);
                }
                foreach (var tt in from.ListDetails)
                {
                    bool isfound = false;
                    foreach (var t in to.ListDetails.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Detail(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Detail.Update(p, (Detail)tt, isDeep);
                        to.ListDetails.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleDetailAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleDetailAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleDetailAccess.Update((RoleDetailAccess)t, (RoleDetailAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleDetailAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleDetailAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleDetailAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleDetailAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleDetailAccess.Update(p, (RoleDetailAccess)tt, isDeep);
                        to.ListRoleDetailAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListDetails Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListDetails.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListDetails from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListDetails.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_details' to 'GroupListDetails'
        public static GroupListDetails ConvertToVM(Proto.Config.proto_group_list_details m, GroupListDetails vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListDetails = new ConfigNodesCollection<Detail>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListDetails) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Detail.ConvertToVM(t, new Detail(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListDetails.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = (EnumUseType)m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNameProperty = (EnumUseType)m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = (EnumUseType)m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleDetailAccess.ConvertToVM(t, new RoleDetailAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleDetailAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListDetails' to 'proto_group_list_details'
        public static Proto.Config.proto_group_list_details ConvertToProto(GroupListDetails vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_details m = new Proto.Config.proto_group_list_details(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListDetails) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListDetails.Add(Detail.ConvertToProto((Detail)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseNameProperty = (Proto.Config.proto_enum_use_type)vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseDescriptionProperty = (Proto.Config.proto_enum_use_type)vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleDetailAccessSettings.Add(RoleDetailAccess.ConvertToProto((RoleDetailAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListDetails)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListRoleDetailAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Detail> ListDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListDetails; }
            set
            {
                if (this._ListDetails != value)
                {
                    this.OnListDetailsChanging(value);
                    _ListDetails = value;
                    this.OnListDetailsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Detail> _ListDetails;
        IReadOnlyList<IDetail> IGroupListDetails.ListDetails { get { return (this as GroupListDetails).ListDetails; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListDetailsChanging(ObservableCollection<Detail> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListDetailsChanged();
        public Detail this[int index] { get { return (Detail)this.ListDetails[index]; } }
        IDetail IGroupListDetails.this[int index] { get { return (Detail)this.ListDetails[index]; } }
        public void Add(Detail item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListDetails.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Detail> items) 
        { 
            Debug.Assert(items != null);
            this.ListDetails.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListDetails.Count; }
        int IGroupListDetails.Count() { return this.Count(); }
        public void Remove(Detail item) 
        {
            Debug.Assert(item != null);
            this.ListDetails.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Use Code")]
        [Description("Use Code property for detail item")]
        public EnumUseType UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Name")]
        [Description("Use Name property for detail item")]
        public EnumUseType UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [PropertyOrderAttribute(26)]
        [DisplayName("Use Description")]
        [Description("Use Description property for detail item")]
        public EnumUseType UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleDetailAccess> ListRoleDetailAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleDetailAccessSettings; }
            set
            {
                if (this._ListRoleDetailAccessSettings != value)
                {
                    this.OnListRoleDetailAccessSettingsChanging(value);
                    _ListRoleDetailAccessSettings = value;
                    this.OnListRoleDetailAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleDetailAccess> _ListRoleDetailAccessSettings;
        IReadOnlyList<IRoleDetailAccess> IGroupListDetails.ListRoleDetailAccessSettings { get { return (this as GroupListDetails).ListRoleDetailAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleDetailAccessSettingsChanging(ObservableCollection<RoleDetailAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleDetailAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListDetails.ListNodeGeneratorsSettings { get { return (this as GroupListDetails).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class DetailValidator : ValidatorBase<Detail, DetailValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Detail : ConfigObjectVmGenSettings<Detail, DetailValidator>, IComparable<Detail>, IConfigAcceptVisitor, IDetail // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Detail(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, DetailValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupProperties = new GroupListProperties(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupDetails = new GroupListDetails(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupForms = new GroupListForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Detail Clone(ITreeConfigNode? parent, IDetail from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Detail vm = new Detail(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsIndexFk = from.IsIndexFk; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.Clone(vm, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.Clone(vm, from.GroupDetails, isDeep);
            vm.Position = from.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewTab = from.IsStartNewTab; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyRefParentGuid = from.PropertyRefParentGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.Clone(vm, from.GroupForms, isDeep);
            vm.ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleDetailAccessSettings.Add(RoleDetailAccess.Clone((RoleDetailAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Detail to, IDetail from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsIndexFk = from.IsIndexFk; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListProperties.Update((GroupListProperties)to.GroupProperties, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListDetails.Update((GroupListDetails)to.GroupDetails, from.GroupDetails, isDeep);
            to.Position = from.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewTab = from.IsStartNewTab; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyRefParentGuid = from.PropertyRefParentGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListForms.Update((GroupListForms)to.GroupForms, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleDetailAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleDetailAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleDetailAccess.Update((RoleDetailAccess)t, (RoleDetailAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleDetailAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleDetailAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleDetailAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleDetailAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleDetailAccess.Update(p, (RoleDetailAccess)tt, isDeep);
                        to.ListRoleDetailAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Detail Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Detail.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Detail from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Detail.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_detail' to 'Detail'
        public static Detail ConvertToVM(Proto.Config.proto_detail m, Detail vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsIndexFk = m.IsIndexFk; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupProperties == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupProperties = new GroupListProperties(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToVM(m.GroupProperties, (GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupDetails == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupDetails = new GroupListDetails(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToVM(m.GroupDetails, (GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.Position = m.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = (EnumUseType)m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNameProperty = (EnumUseType)m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = (EnumUseType)m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortId = m.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsTryAttach = m.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewRow = m.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewTab = m.IsStartNewTab; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.TabName = m.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewTabControl = m.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStopTabControl = m.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListWideGuid = m.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListNarrowGuid = m.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIdGuid = m.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyCodeGuid = m.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyNameGuid = m.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDescriptionGuid = m.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyRefParentGuid = m.PropertyRefParentGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyVersionGuid = m.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupForms = new GroupListForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListForms.ConvertToVM(m.GroupForms, (GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListRoleDetailAccessSettings = new ObservableCollectionWithActions<RoleDetailAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleDetailAccess.ConvertToVM(t, new RoleDetailAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleDetailAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Detail' to 'proto_detail'
        public static Proto.Config.proto_detail ConvertToProto(Detail vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_detail m = new Proto.Config.proto_detail(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsIndexFk = vm.IsIndexFk; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToProto((GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToProto((GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.Position = vm.Position; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseNameProperty = (Proto.Config.proto_enum_use_type)vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseDescriptionProperty = (Proto.Config.proto_enum_use_type)vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.ShortId = vm.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsTryAttach = vm.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewRow = vm.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewTab = vm.IsStartNewTab; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.TabName = vm.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewTabControl = vm.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStopTabControl = vm.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ViewListWideGuid = vm.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ViewListNarrowGuid = vm.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIdGuid = vm.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyCodeGuid = vm.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyNameGuid = vm.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDescriptionGuid = vm.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyRefParentGuid = vm.PropertyRefParentGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyVersionGuid = vm.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.ConvertToProto((GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleDetailAccessSettings.Add(RoleDetailAccess.ConvertToProto((RoleDetailAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupProperties.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupDetails.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRoleDetailAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // Create Index for foreign key navigation property
        [PropertyOrderAttribute(5)]
        public bool IsIndexFk // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsIndexFk; }
            set
            {
                if (this._IsIndexFk != value)
                {
                    this.OnIsIndexFkChanging(ref value);
                    this._IsIndexFk = value;
                    this.OnIsIndexFkChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsIndexFk;
        partial void OnIsIndexFkChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsIndexFkChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public GroupListProperties GroupProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupProperties; }
            set
            {
                if (this._GroupProperties != value)
                {
                    this.OnGroupPropertiesChanging(ref value);
                    this._GroupProperties = value;
                    this.OnGroupPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListProperties _GroupProperties;
        IGroupListProperties IDetail.GroupProperties { get { return (this as Detail).GroupProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupPropertiesChanging(ref GroupListProperties to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupPropertiesChanged();
        //IGroupListProperties IDetail.GroupProperties { get { return this._GroupProperties; } }
        
        [Browsable(false)]
        public GroupListDetails GroupDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupDetails; }
            set
            {
                if (this._GroupDetails != value)
                {
                    this.OnGroupDetailsChanging(ref value);
                    this._GroupDetails = value;
                    this.OnGroupDetailsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListDetails _GroupDetails;
        IGroupListDetails IDetail.GroupDetails { get { return (this as Detail).GroupDetails; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupDetailsChanging(ref GroupListDetails to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupDetailsChanged();
        //IGroupListDetails IDetail.GroupDetails { get { return this._GroupDetails; } }
        
        // Protobuf field position
        // Reserved positions: 1 - primary key
        [ReadOnly(true)]
        public uint Position // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Position; }
            set
            {
                if (this._Position != value)
                {
                    this.OnPositionChanging(ref value);
                    this._Position = value;
                    this.OnPositionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _Position;
        partial void OnPositionChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPositionChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Use Code")]
        [Description("Use Code property for detail item")]
        public EnumUseType UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Name")]
        [Description("Use Name property for detail item")]
        public EnumUseType UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [PropertyOrderAttribute(26)]
        [DisplayName("Use Description")]
        [Description("Use Description property for detail item")]
        public EnumUseType UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [Browsable(false)]
        public int ShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortId; }
            set
            {
                if (this._ShortId != value)
                {
                    this.OnShortIdChanging(ref value);
                    this._ShortId = value;
                    this.OnShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _ShortId;
        partial void OnShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdChanged();
        
        [PropertyOrderAttribute(22)]
        [Category("Auto Layout")]
        [DisplayName("UI attach")]
        [Description("UI engine will try put this detail block on same line as previous detail block or block of header fields")]
        public bool IsTryAttach // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsTryAttach; }
            set
            {
                if (this._IsTryAttach != value)
                {
                    this.OnIsTryAttachChanging(ref value);
                    this._IsTryAttach = value;
                    this.OnIsTryAttachChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsTryAttach;
        partial void OnIsTryAttachChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsTryAttachChanged();
        
        [PropertyOrderAttribute(23)]
        [Category("Auto Layout")]
        [DisplayName("Start UI row")]
        [Description("Start new UI row for this detaail block")]
        public bool IsStartNewRow // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewRow; }
            set
            {
                if (this._IsStartNewRow != value)
                {
                    this.OnIsStartNewRowChanging(ref value);
                    this._IsStartNewRow = value;
                    this.OnIsStartNewRowChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewRow;
        partial void OnIsStartNewRowChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewRowChanged();
        
        [PropertyOrderAttribute(24)]
        [Category("Auto Layout")]
        [DisplayName("Start New Tab")]
        [Description("Start tab in current tab control (create new tab control if current not created yet or start new tab control is specified). Tab name is taken from details name if not specified explicitly")]
        public bool IsStartNewTab // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewTab; }
            set
            {
                if (this._IsStartNewTab != value)
                {
                    this.OnIsStartNewTabChanging(ref value);
                    this._IsStartNewTab = value;
                    this.OnIsStartNewTabChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewTab;
        partial void OnIsStartNewTabChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewTabChanged();
        
        [PropertyOrderAttribute(25)]
        [Category("Auto Layout")]
        [DisplayName("Tab Name")]
        [Description("If not empty, try to find tab in previous tab controls. If not found, then start new tab in tab control. If empty, then continue adding data grids in current tab control")]
        public string TabName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._TabName; }
            set
            {
                if (this._TabName != value)
                {
                    this.OnTabNameChanging(ref value);
                    this._TabName = value;
                    this.OnTabNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _TabName = string.Empty;
        partial void OnTabNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnTabNameChanged();
        
        [PropertyOrderAttribute(26)]
        [Category("Auto Layout")]
        [DisplayName("Start Tab Control")]
        [Description("Start new tab control as current control")]
        public bool IsStartNewTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewTabControl; }
            set
            {
                if (this._IsStartNewTabControl != value)
                {
                    this.OnIsStartNewTabControlChanging(ref value);
                    this._IsStartNewTabControl = value;
                    this.OnIsStartNewTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewTabControl;
        partial void OnIsStartNewTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewTabControlChanged();
        
        [PropertyOrderAttribute(27)]
        [Category("Auto Layout")]
        [DisplayName("Stop Tab Control")]
        [Description("Stop using tab control for layout")]
        public bool IsStopTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStopTabControl; }
            set
            {
                if (this._IsStopTabControl != value)
                {
                    this.OnIsStopTabControlChanging(ref value);
                    this._IsStopTabControl = value;
                    this.OnIsStopTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStopTabControl;
        partial void OnIsStopTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStopTabControlChanged();
        
        [Browsable(false)]
        public string ViewListWideGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListWideGuid; }
            set
            {
                if (this._ViewListWideGuid != value)
                {
                    this.OnViewListWideGuidChanging(ref value);
                    this._ViewListWideGuid = value;
                    this.OnViewListWideGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListWideGuid = string.Empty;
        partial void OnViewListWideGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListWideGuidChanged();
        
        [Browsable(false)]
        public string ViewListNarrowGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListNarrowGuid; }
            set
            {
                if (this._ViewListNarrowGuid != value)
                {
                    this.OnViewListNarrowGuidChanging(ref value);
                    this._ViewListNarrowGuid = value;
                    this.OnViewListNarrowGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListNarrowGuid = string.Empty;
        partial void OnViewListNarrowGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListNarrowGuidChanged();
        
        [Browsable(false)]
        public string PropertyIdGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIdGuid; }
            set
            {
                if (this._PropertyIdGuid != value)
                {
                    this.OnPropertyIdGuidChanging(ref value);
                    this._PropertyIdGuid = value;
                    this.OnPropertyIdGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIdGuid = string.Empty;
        partial void OnPropertyIdGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIdGuidChanged();
        
        [Browsable(false)]
        public string PropertyCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyCodeGuid; }
            set
            {
                if (this._PropertyCodeGuid != value)
                {
                    this.OnPropertyCodeGuidChanging(ref value);
                    this._PropertyCodeGuid = value;
                    this.OnPropertyCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyCodeGuid = string.Empty;
        partial void OnPropertyCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyCodeGuidChanged();
        
        [Browsable(false)]
        public string PropertyNameGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyNameGuid; }
            set
            {
                if (this._PropertyNameGuid != value)
                {
                    this.OnPropertyNameGuidChanging(ref value);
                    this._PropertyNameGuid = value;
                    this.OnPropertyNameGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyNameGuid = string.Empty;
        partial void OnPropertyNameGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyNameGuidChanged();
        
        [Browsable(false)]
        public string PropertyDescriptionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDescriptionGuid; }
            set
            {
                if (this._PropertyDescriptionGuid != value)
                {
                    this.OnPropertyDescriptionGuidChanging(ref value);
                    this._PropertyDescriptionGuid = value;
                    this.OnPropertyDescriptionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDescriptionGuid = string.Empty;
        partial void OnPropertyDescriptionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDescriptionGuidChanged();
        
        [Browsable(false)]
        public string PropertyRefParentGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyRefParentGuid; }
            set
            {
                if (this._PropertyRefParentGuid != value)
                {
                    this.OnPropertyRefParentGuidChanging(ref value);
                    this._PropertyRefParentGuid = value;
                    this.OnPropertyRefParentGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyRefParentGuid = string.Empty;
        partial void OnPropertyRefParentGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyRefParentGuidChanged();
        
        [Browsable(false)]
        public string PropertyVersionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyVersionGuid; }
            set
            {
                if (this._PropertyVersionGuid != value)
                {
                    this.OnPropertyVersionGuidChanging(ref value);
                    this._PropertyVersionGuid = value;
                    this.OnPropertyVersionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyVersionGuid = string.Empty;
        partial void OnPropertyVersionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyVersionGuidChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public GroupListForms GroupForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupForms; }
            set
            {
                if (this._GroupForms != value)
                {
                    this.OnGroupFormsChanging(ref value);
                    this._GroupForms = value;
                    this.OnGroupFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListForms _GroupForms;
        IGroupListForms IDetail.GroupForms { get { return (this as Detail).GroupForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupFormsChanging(ref GroupListForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupFormsChanged();
        //IGroupListForms IDetail.GroupForms { get { return this._GroupForms; } }
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleDetailAccess> ListRoleDetailAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleDetailAccessSettings; }
            set
            {
                if (this._ListRoleDetailAccessSettings != value)
                {
                    this.OnListRoleDetailAccessSettingsChanging(value);
                    _ListRoleDetailAccessSettings = value;
                    this.OnListRoleDetailAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleDetailAccess> _ListRoleDetailAccessSettings;
        IReadOnlyList<IRoleDetailAccess> IDetail.ListRoleDetailAccessSettings { get { return (this as Detail).ListRoleDetailAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleDetailAccessSettingsChanging(ObservableCollection<RoleDetailAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleDetailAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IDetail.ListNodeGeneratorsSettings { get { return (this as Detail).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_detail
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class PropertyDataGeneratorValidator : ValidatorBase<PropertyDataGenerator, PropertyDataGeneratorValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class PropertyDataGenerator : BaseSettings<PropertyDataGenerator, PropertyDataGeneratorValidator>, IPropertyDataGenerator // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public PropertyDataGenerator(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, PropertyDataGeneratorValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static PropertyDataGenerator Clone(ITreeConfigNode? parent, IPropertyDataGenerator from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            PropertyDataGenerator vm = new PropertyDataGenerator(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.DataType = from.DataType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Address = from.Address; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Commerce = from.Commerce; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Company = from.Company; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Date = from.Date; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Database = from.Database; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Finance = from.Finance; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Hacker = from.Hacker; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Image = from.Image; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Internet = from.Internet; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Lorem = from.Lorem; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Phone = from.Phone; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Rant = from.Rant; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.System = from.System; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Vehicle = from.Vehicle; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Random = from.Random; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(PropertyDataGenerator to, IPropertyDataGenerator from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.DataType = from.DataType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Address = from.Address; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Commerce = from.Commerce; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Company = from.Company; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Date = from.Date; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Database = from.Database; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Finance = from.Finance; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Hacker = from.Hacker; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Image = from.Image; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Internet = from.Internet; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Lorem = from.Lorem; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Phone = from.Phone; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Rant = from.Rant; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.System = from.System; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Vehicle = from.Vehicle; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Random = from.Random; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override PropertyDataGenerator Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return PropertyDataGenerator.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(PropertyDataGenerator from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            PropertyDataGenerator.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_property_data_generator' to 'PropertyDataGenerator'
        public static PropertyDataGenerator ConvertToVM(Proto.Config.proto_property_data_generator m, PropertyDataGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.DataType = (EnumPropertyDataType)m.DataType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Address = (EnumAddressDataType)m.Address; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Commerce = (EnumCommerceDataType)m.Commerce; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Company = (EnumCompanyDataType)m.Company; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Date = (EnumDateDataType)m.Date; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Database = (EnumDatabaseDataType)m.Database; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Finance = (EnumFinanceDataType)m.Finance; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Hacker = (EnumHackerDataType)m.Hacker; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Image = (EnumImageDataType)m.Image; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Internet = (EnumInternetDataType)m.Internet; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Lorem = (EnumLoremDataType)m.Lorem; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = (EnumNameDataType)m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Phone = (EnumPhoneDataType)m.Phone; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Rant = (EnumRantDataType)m.Rant; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.System = (EnumSystemDataType)m.System; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Vehicle = (EnumVehicleDataType)m.Vehicle; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Random = (EnumRandomDataType)m.Random; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'PropertyDataGenerator' to 'proto_property_data_generator'
        public static Proto.Config.proto_property_data_generator ConvertToProto(PropertyDataGenerator vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_property_data_generator m = new Proto.Config.proto_property_data_generator(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.DataType = (Proto.Config.proto_enum_property_data_type)vm.DataType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Address = (Proto.Config.proto_enum_address_data_type)vm.Address; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Commerce = (Proto.Config.proto_enum_commerce_data_type)vm.Commerce; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Company = (Proto.Config.proto_enum_company_data_type)vm.Company; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Date = (Proto.Config.proto_enum_date_data_type)vm.Date; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Database = (Proto.Config.proto_enum_database_data_type)vm.Database; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Finance = (Proto.Config.proto_enum_finance_data_type)vm.Finance; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Hacker = (Proto.Config.proto_enum_hacker_data_type)vm.Hacker; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Image = (Proto.Config.proto_enum_image_data_type)vm.Image; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Internet = (Proto.Config.proto_enum_internet_data_type)vm.Internet; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Lorem = (Proto.Config.proto_enum_lorem_data_type)vm.Lorem; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Name = (Proto.Config.proto_enum_name_data_type)vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Phone = (Proto.Config.proto_enum_phone_data_type)vm.Phone; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Rant = (Proto.Config.proto_enum_rant_data_type)vm.Rant; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.System = (Proto.Config.proto_enum_system_data_type)vm.System; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Vehicle = (Proto.Config.proto_enum_vehicle_data_type)vm.Vehicle; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Random = (Proto.Config.proto_enum_random_data_type)vm.Random; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(3)]
        [DisplayName("Group")]
        [Description("Data generator type")]
        public EnumPropertyDataType DataType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataType; }
            set
            {
                if (this._DataType != value)
                {
                    this.OnDataTypeChanging(ref value);
                    this._DataType = value;
                    this.OnDataTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPropertyDataType _DataType;
        partial void OnDataTypeChanging(ref EnumPropertyDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeChanged();
        
        public EnumAddressDataType Address // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Address; }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(ref value);
                    this._Address = value;
                    this.OnAddressChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumAddressDataType _Address;
        partial void OnAddressChanging(ref EnumAddressDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAddressChanged();
        
        public EnumCommerceDataType Commerce // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Commerce; }
            set
            {
                if (this._Commerce != value)
                {
                    this.OnCommerceChanging(ref value);
                    this._Commerce = value;
                    this.OnCommerceChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCommerceDataType _Commerce;
        partial void OnCommerceChanging(ref EnumCommerceDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCommerceChanged();
        
        public EnumCompanyDataType Company // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Company; }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(ref value);
                    this._Company = value;
                    this.OnCompanyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCompanyDataType _Company;
        partial void OnCompanyChanging(ref EnumCompanyDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCompanyChanged();
        
        public EnumDateDataType Date // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Date; }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(ref value);
                    this._Date = value;
                    this.OnDateChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDateDataType _Date;
        partial void OnDateChanging(ref EnumDateDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDateChanged();
        
        public EnumDatabaseDataType Database // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Database; }
            set
            {
                if (this._Database != value)
                {
                    this.OnDatabaseChanging(ref value);
                    this._Database = value;
                    this.OnDatabaseChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDatabaseDataType _Database;
        partial void OnDatabaseChanging(ref EnumDatabaseDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDatabaseChanged();
        
        public EnumFinanceDataType Finance // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Finance; }
            set
            {
                if (this._Finance != value)
                {
                    this.OnFinanceChanging(ref value);
                    this._Finance = value;
                    this.OnFinanceChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumFinanceDataType _Finance;
        partial void OnFinanceChanging(ref EnumFinanceDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnFinanceChanged();
        
        public EnumHackerDataType Hacker // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Hacker; }
            set
            {
                if (this._Hacker != value)
                {
                    this.OnHackerChanging(ref value);
                    this._Hacker = value;
                    this.OnHackerChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumHackerDataType _Hacker;
        partial void OnHackerChanging(ref EnumHackerDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnHackerChanged();
        
        public EnumImageDataType Image // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Image; }
            set
            {
                if (this._Image != value)
                {
                    this.OnImageChanging(ref value);
                    this._Image = value;
                    this.OnImageChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumImageDataType _Image;
        partial void OnImageChanging(ref EnumImageDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnImageChanged();
        
        public EnumInternetDataType Internet // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Internet; }
            set
            {
                if (this._Internet != value)
                {
                    this.OnInternetChanging(ref value);
                    this._Internet = value;
                    this.OnInternetChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumInternetDataType _Internet;
        partial void OnInternetChanging(ref EnumInternetDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnInternetChanged();
        
        public EnumLoremDataType Lorem // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Lorem; }
            set
            {
                if (this._Lorem != value)
                {
                    this.OnLoremChanging(ref value);
                    this._Lorem = value;
                    this.OnLoremChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumLoremDataType _Lorem;
        partial void OnLoremChanging(ref EnumLoremDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLoremChanged();
        
        public EnumNameDataType Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumNameDataType _Name;
        partial void OnNameChanging(ref EnumNameDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        public EnumPhoneDataType Phone // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Phone; }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(ref value);
                    this._Phone = value;
                    this.OnPhoneChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumPhoneDataType _Phone;
        partial void OnPhoneChanging(ref EnumPhoneDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPhoneChanged();
        
        public EnumRantDataType Rant // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Rant; }
            set
            {
                if (this._Rant != value)
                {
                    this.OnRantChanging(ref value);
                    this._Rant = value;
                    this.OnRantChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumRantDataType _Rant;
        partial void OnRantChanging(ref EnumRantDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRantChanged();
        
        public EnumSystemDataType System // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._System; }
            set
            {
                if (this._System != value)
                {
                    this.OnSystemChanging(ref value);
                    this._System = value;
                    this.OnSystemChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumSystemDataType _System;
        partial void OnSystemChanging(ref EnumSystemDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSystemChanged();
        
        public EnumVehicleDataType Vehicle // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Vehicle; }
            set
            {
                if (this._Vehicle != value)
                {
                    this.OnVehicleChanging(ref value);
                    this._Vehicle = value;
                    this.OnVehicleChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumVehicleDataType _Vehicle;
        partial void OnVehicleChanging(ref EnumVehicleDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnVehicleChanged();
        
        public EnumRandomDataType Random // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Random; }
            set
            {
                if (this._Random != value)
                {
                    this.OnRandomChanging(ref value);
                    this._Random = value;
                    this.OnRandomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumRandomDataType _Random;
        partial void OnRandomChanging(ref EnumRandomDataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRandomChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupConstantGroupsValidator : ValidatorBase<GroupConstantGroups, GroupConstantGroupsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // C O N S T A N T
    // @exclude
    // ####################################### C O N S T A N T ##########################################
    public partial class GroupConstantGroups : ConfigObjectVmGenSettings<GroupConstantGroups, GroupConstantGroupsValidator>, IComparable<GroupConstantGroups>, IConfigAcceptVisitor, IGroupConstantGroups // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupConstantGroups(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupConstantGroupsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListConstantGroups = new ConfigNodesCollection<GroupListConstants>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(GroupListConstants)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListConstantGroups.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupConstantGroups Clone(ITreeConfigNode? parent, IGroupConstantGroups from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupConstantGroups vm = new GroupConstantGroups(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListConstantGroups = new ConfigNodesCollection<GroupListConstants>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListConstantGroups) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListConstantGroups.Add(GroupListConstants.Clone(vm, (GroupListConstants)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupConstantGroups to, IGroupConstantGroups from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListConstantGroups.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListConstantGroups)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            GroupListConstants.Update((GroupListConstants)t, (GroupListConstants)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListConstantGroups.Remove(t);
                }
                foreach (var tt in from.ListConstantGroups)
                {
                    bool isfound = false;
                    foreach (var t in to.ListConstantGroups.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new GroupListConstants(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        GroupListConstants.Update(p, (GroupListConstants)tt, isDeep);
                        to.ListConstantGroups.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupConstantGroups Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupConstantGroups.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupConstantGroups from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupConstantGroups.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_constant_groups' to 'GroupConstantGroups'
        public static GroupConstantGroups ConvertToVM(Proto.Config.proto_group_constant_groups m, GroupConstantGroups vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrefixForDbTables = m.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListConstantGroups = new ConfigNodesCollection<GroupListConstants>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListConstantGroups) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = GroupListConstants.ConvertToVM(t, new GroupListConstants(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListConstantGroups.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupConstantGroups' to 'proto_group_constant_groups'
        public static Proto.Config.proto_group_constant_groups ConvertToProto(GroupConstantGroups vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_constant_groups m = new Proto.Config.proto_group_constant_groups(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PrefixForDbTables = vm.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListConstantGroups) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListConstantGroups.Add(GroupListConstants.ConvertToProto((GroupListConstants)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListConstantGroups)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Constants group name")]
        [ReadOnly(true)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        [ReadOnly(true)]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [Description("Description constants group name")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Db prefix")]
        [Description("Prefix for constants db table names. Used if set to use in config model")]
        public string PrefixForDbTables // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrefixForDbTables; }
            set
            {
                if (this._PrefixForDbTables != value)
                {
                    this.OnPrefixForDbTablesChanging(ref value);
                    this._PrefixForDbTables = value;
                    this.OnPrefixForDbTablesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PrefixForDbTables = string.Empty;
        partial void OnPrefixForDbTablesChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixForDbTablesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<GroupListConstants> ListConstantGroups // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListConstantGroups; }
            set
            {
                if (this._ListConstantGroups != value)
                {
                    this.OnListConstantGroupsChanging(value);
                    _ListConstantGroups = value;
                    this.OnListConstantGroupsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<GroupListConstants> _ListConstantGroups;
        IReadOnlyList<IGroupListConstants> IGroupConstantGroups.ListConstantGroups { get { return (this as GroupConstantGroups).ListConstantGroups; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListConstantGroupsChanging(ObservableCollection<GroupListConstants> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListConstantGroupsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupConstantGroups.ListNodeGeneratorsSettings { get { return (this as GroupConstantGroups).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class GroupListConstantsValidator : ValidatorBase<GroupListConstants, GroupListConstantsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListConstants : ConfigObjectVmGenSettings<GroupListConstants, GroupListConstantsValidator>, IComparable<GroupListConstants>, IConfigAcceptVisitor, IGroupListConstants // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListConstants(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListConstantsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListConstants = new ConfigNodesCollection<Constant>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Constant)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListConstants.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListConstants Clone(ITreeConfigNode? parent, IGroupListConstants from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListConstants vm = new GroupListConstants(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListConstants = new ConfigNodesCollection<Constant>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListConstants) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListConstants.Add(Constant.Clone(vm, (Constant)t, isDeep));
            vm.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleConstantAccessSettings.Add(RoleConstantAccess.Clone((RoleConstantAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListConstants to, IGroupListConstants from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListConstants.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListConstants)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Constant.Update((Constant)t, (Constant)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListConstants.Remove(t);
                }
                foreach (var tt in from.ListConstants)
                {
                    bool isfound = false;
                    foreach (var t in to.ListConstants.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Constant(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Constant.Update(p, (Constant)tt, isDeep);
                        to.ListConstants.Add(p);
                    }
                }
            }
            to.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleConstantAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleConstantAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleConstantAccess.Update((RoleConstantAccess)t, (RoleConstantAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleConstantAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleConstantAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleConstantAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleConstantAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleConstantAccess.Update(p, (RoleConstantAccess)tt, isDeep);
                        to.ListRoleConstantAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListConstants Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListConstants.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListConstants from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListConstants.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_constants' to 'GroupListConstants'
        public static GroupListConstants ConvertToVM(Proto.Config.proto_group_list_constants m, GroupListConstants vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListConstants = new ConfigNodesCollection<Constant>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListConstants) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Constant.ConvertToVM(t, new Constant(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListConstants.Add(tvm);
            }
            vm.ShortIdTypeForCacheKey = m.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortId = m.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleConstantAccess.ConvertToVM(t, new RoleConstantAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleConstantAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListConstants' to 'proto_group_list_constants'
        public static Proto.Config.proto_group_list_constants ConvertToProto(GroupListConstants vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_constants m = new Proto.Config.proto_group_list_constants(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListConstants) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListConstants.Add(Constant.ConvertToProto((Constant)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.ShortIdTypeForCacheKey = vm.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortId = vm.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleConstantAccessSettings.Add(RoleConstantAccess.ConvertToProto((RoleConstantAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListConstants)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListRoleConstantAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Group name of constants")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Constant> ListConstants // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListConstants; }
            set
            {
                if (this._ListConstants != value)
                {
                    this.OnListConstantsChanging(value);
                    _ListConstants = value;
                    this.OnListConstantsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Constant> _ListConstants;
        IReadOnlyList<IConstant> IGroupListConstants.ListConstants { get { return (this as GroupListConstants).ListConstants; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListConstantsChanging(ObservableCollection<Constant> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListConstantsChanged();
        public Constant this[int index] { get { return (Constant)this.ListConstants[index]; } }
        IConstant IGroupListConstants.this[int index] { get { return (Constant)this.ListConstants[index]; } }
        public void Add(Constant item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListConstants.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Constant> items) 
        { 
            Debug.Assert(items != null);
            this.ListConstants.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListConstants.Count; }
        int IGroupListConstants.Count() { return this.Count(); }
        public void Remove(Constant item) 
        {
            Debug.Assert(item != null);
            this.ListConstants.Remove(item); 
            item.Parent = null;
        }
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Short ID")]
        [Description("Short constant type ID for cache key generator")]
        public string ShortIdTypeForCacheKey // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortIdTypeForCacheKey; }
            set
            {
                if (this._ShortIdTypeForCacheKey != value)
                {
                    this.OnShortIdTypeForCacheKeyChanging(ref value);
                    this._ShortIdTypeForCacheKey = value;
                    this.OnShortIdTypeForCacheKeyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ShortIdTypeForCacheKey = string.Empty;
        partial void OnShortIdTypeForCacheKeyChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdTypeForCacheKeyChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public int ShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortId; }
            set
            {
                if (this._ShortId != value)
                {
                    this.OnShortIdChanging(ref value);
                    this._ShortId = value;
                    this.OnShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _ShortId;
        partial void OnShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleConstantAccess> ListRoleConstantAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleConstantAccessSettings; }
            set
            {
                if (this._ListRoleConstantAccessSettings != value)
                {
                    this.OnListRoleConstantAccessSettingsChanging(value);
                    _ListRoleConstantAccessSettings = value;
                    this.OnListRoleConstantAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleConstantAccess> _ListRoleConstantAccessSettings;
        IReadOnlyList<IRoleConstantAccess> IGroupListConstants.ListRoleConstantAccessSettings { get { return (this as GroupListConstants).ListRoleConstantAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleConstantAccessSettingsChanging(ObservableCollection<RoleConstantAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleConstantAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListConstants.ListNodeGeneratorsSettings { get { return (this as GroupListConstants).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_group_list_constants
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class ConstantValidator : ValidatorBase<Constant, ConstantValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Constant application wise value
    public partial class Constant : ConfigObjectVmGenSettings<Constant, ConstantValidator>, IComparable<Constant>, IConfigAcceptVisitor, IConstant // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Constant(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, ConstantValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._DataType = new DataType(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Constant Clone(ITreeConfigNode? parent, IConstant from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Constant vm = new Constant(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.DataType = vSharpStudio.vm.ViewModels.DataType.Clone(vm, from.DataType, isDeep);
            vm.IsNullable = from.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DefaultValue = from.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.RangeValuesRequirementStr = from.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MinLengthRequirement = from.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxLengthRequirement = from.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.AccuracyForTime = from.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.LinesOnScreen = from.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleConstantAccessSettings.Add(RoleConstantAccess.Clone((RoleConstantAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Constant to, IConstant from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.DataType.Update((DataType)to.DataType, from.DataType, isDeep);
            to.IsNullable = from.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DefaultValue = from.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.RangeValuesRequirementStr = from.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MinLengthRequirement = from.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxLengthRequirement = from.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.AccuracyForTime = from.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsTryAttach = from.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.LinesOnScreen = from.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewRow = from.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.TabName = from.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStartNewTabControl = from.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsStopTabControl = from.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleConstantAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleConstantAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleConstantAccess.Update((RoleConstantAccess)t, (RoleConstantAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleConstantAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleConstantAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleConstantAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleConstantAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleConstantAccess.Update(p, (RoleConstantAccess)tt, isDeep);
                        to.ListRoleConstantAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Constant Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Constant.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Constant from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Constant.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_constant' to 'Constant'
        public static Constant ConvertToVM(Proto.Config.proto_constant m, Constant vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.DataType == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.DataType = new DataType(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.DataType.ConvertToVM(m.DataType, (DataType)vm.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.IsNullable = m.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DefaultValue = m.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortId = m.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.RangeValuesRequirementStr = m.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MinLengthRequirement = m.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxLengthRequirement = m.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.AccuracyForTime = (EnumTimeAccuracyType)m.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsTryAttach = m.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.LinesOnScreen = m.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewRow = m.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.TabName = m.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStartNewTabControl = m.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsStopTabControl = m.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoleConstantAccessSettings = new ObservableCollectionWithActions<RoleConstantAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleConstantAccess.ConvertToVM(t, new RoleConstantAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleConstantAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Constant' to 'proto_constant'
        public static Proto.Config.proto_constant ConvertToProto(Constant vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_constant m = new Proto.Config.proto_constant(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DataType = vSharpStudio.vm.ViewModels.DataType.ConvertToProto((DataType)vm.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.IsNullable = vm.IsNullable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DefaultValue = vm.DefaultValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortId = vm.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.RangeValuesRequirementStr = vm.RangeValuesRequirementStr; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.MinLengthRequirement = vm.MinLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.MaxLengthRequirement = vm.MaxLengthRequirement; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.AccuracyForTime = (Proto.Config.proto_enum_time_accuracy_type)vm.AccuracyForTime; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsTryAttach = vm.IsTryAttach; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.LinesOnScreen = vm.LinesOnScreen; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewRow = vm.IsStartNewRow; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.TabName = vm.TabName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStartNewTabControl = vm.IsStartNewTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsStopTabControl = vm.IsStopTabControl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleConstantAccessSettings.Add(RoleConstantAccess.ConvertToProto((RoleConstantAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.DataType.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRoleConstantAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Constant name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [Description("Description of constant")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public DataType DataType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataType; }
            set
            {
                if (this._DataType != value)
                {
                    this.OnDataTypeChanging(ref value);
                    this._DataType = value;
                    this.OnDataTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private DataType _DataType;
        IDataType IConstant.DataType { get { return (this as Constant).DataType; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnDataTypeChanging(ref DataType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeChanged();
        //IDataType IConstant.DataType { get { return this._DataType; } }
        
        [Category("")]
        [PropertyOrderAttribute(20)]
        [DisplayName("Can be NULL")]
        [Description("If unchecked always expected data")]
        public bool IsNullable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNullable; }
            set
            {
                if (this._IsNullable != value)
                {
                    this.OnIsNullableChanging(ref value);
                    this._IsNullable = value;
                    this.OnIsNullableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNullable;
        partial void OnIsNullableChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNullableChanged();
        
        [Category("")]
        [PropertyOrderAttribute(8)]
        [DisplayName("Default")]
        [Description("Chunk of code to calculate Default value (can be inserted in generated code by generator if supported)")]
        public string DefaultValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DefaultValue; }
            set
            {
                if (this._DefaultValue != value)
                {
                    this.OnDefaultValueChanging(ref value);
                    this._DefaultValue = value;
                    this.OnDefaultValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _DefaultValue = string.Empty;
        partial void OnDefaultValueChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDefaultValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public int ShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortId; }
            set
            {
                if (this._ShortId != value)
                {
                    this.OnShortIdChanging(ref value);
                    this._ShortId = value;
                    this.OnShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _ShortId;
        partial void OnShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdChanged();
        
        [Category("")]
        [PropertyOrderAttribute(32)]
        [DisplayName("Expected")]
        [Description("Expected values or ranges of values. Use '#' to create range, and ';' to separate values or ranges")]
        public string RangeValuesRequirementStr // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._RangeValuesRequirementStr; }
            set
            {
                if (this._RangeValuesRequirementStr != value)
                {
                    this.OnRangeValuesRequirementStrChanging(ref value);
                    this._RangeValuesRequirementStr = value;
                    this.OnRangeValuesRequirementStrChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _RangeValuesRequirementStr = string.Empty;
        partial void OnRangeValuesRequirementStrChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnRangeValuesRequirementStrChanged();
        
        [Category("")]
        [PropertyOrderAttribute(34)]
        [DisplayName("Min Length")]
        [Description("Minimum length of string")]
        public string MinLengthRequirement // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MinLengthRequirement; }
            set
            {
                if (this._MinLengthRequirement != value)
                {
                    this.OnMinLengthRequirementChanging(ref value);
                    this._MinLengthRequirement = value;
                    this.OnMinLengthRequirementChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _MinLengthRequirement = string.Empty;
        partial void OnMinLengthRequirementChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMinLengthRequirementChanged();
        
        [Category("")]
        [PropertyOrderAttribute(35)]
        [DisplayName("Max Length")]
        [Description("Maximum length of string")]
        public string MaxLengthRequirement // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxLengthRequirement; }
            set
            {
                if (this._MaxLengthRequirement != value)
                {
                    this.OnMaxLengthRequirementChanging(ref value);
                    this._MaxLengthRequirement = value;
                    this.OnMaxLengthRequirementChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _MaxLengthRequirement = string.Empty;
        partial void OnMaxLengthRequirementChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxLengthRequirementChanged();
        
        [Category("")]
        [PropertyOrderAttribute(36)]
        [DisplayName("Time accuracy")]
        [Description("Time accuracy for TimeOnly type. Business model is expecting selected accuracy")]
        public EnumTimeAccuracyType AccuracyForTime // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._AccuracyForTime; }
            set
            {
                if (this._AccuracyForTime != value)
                {
                    this.OnAccuracyForTimeChanging(ref value);
                    this._AccuracyForTime = value;
                    this.OnAccuracyForTimeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumTimeAccuracyType _AccuracyForTime;
        partial void OnAccuracyForTimeChanging(ref EnumTimeAccuracyType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAccuracyForTimeChanged();
        
        [Category("Auto Layout")]
        [DisplayName("UI attach")]
        [Description("UI engine will try put this field on same line as previous field")]
        public bool IsTryAttach // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsTryAttach; }
            set
            {
                if (this._IsTryAttach != value)
                {
                    this.OnIsTryAttachChanging(ref value);
                    this._IsTryAttach = value;
                    this.OnIsTryAttachChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsTryAttach;
        partial void OnIsTryAttachChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsTryAttachChanged();
        
        [Category("Auto Layout")]
        [DisplayName("UI lines")]
        [Description("Lines on screen for edit box")]
        public int LinesOnScreen // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._LinesOnScreen; }
            set
            {
                if (this._LinesOnScreen != value)
                {
                    this.OnLinesOnScreenChanging(ref value);
                    this._LinesOnScreen = value;
                    this.OnLinesOnScreenChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _LinesOnScreen;
        partial void OnLinesOnScreenChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnLinesOnScreenChanged();
        
        [Category("Auto Layout")]
        [DisplayName("New UI row")]
        [Description("Start new UI row for this property")]
        public bool IsStartNewRow // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewRow; }
            set
            {
                if (this._IsStartNewRow != value)
                {
                    this.OnIsStartNewRowChanging(ref value);
                    this._IsStartNewRow = value;
                    this.OnIsStartNewRowChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewRow;
        partial void OnIsStartNewRowChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewRowChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Tab Name")]
        [Description("If not empty, then start new tab in tab control. If empty, then continue adding fields in current control")]
        public string TabName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._TabName; }
            set
            {
                if (this._TabName != value)
                {
                    this.OnTabNameChanging(ref value);
                    this._TabName = value;
                    this.OnTabNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _TabName = string.Empty;
        partial void OnTabNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnTabNameChanged();
        
        [Category("Auto Layout")]
        [DisplayName("New Tab Control")]
        [Description("Start new tab control as current control")]
        public bool IsStartNewTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStartNewTabControl; }
            set
            {
                if (this._IsStartNewTabControl != value)
                {
                    this.OnIsStartNewTabControlChanging(ref value);
                    this._IsStartNewTabControl = value;
                    this.OnIsStartNewTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStartNewTabControl;
        partial void OnIsStartNewTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStartNewTabControlChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Stop Tab Control")]
        [Description("Stop using tab control for layout")]
        public bool IsStopTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsStopTabControl; }
            set
            {
                if (this._IsStopTabControl != value)
                {
                    this.OnIsStopTabControlChanging(ref value);
                    this._IsStopTabControl = value;
                    this.OnIsStopTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsStopTabControl;
        partial void OnIsStopTabControlChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsStopTabControlChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleConstantAccess> ListRoleConstantAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleConstantAccessSettings; }
            set
            {
                if (this._ListRoleConstantAccessSettings != value)
                {
                    this.OnListRoleConstantAccessSettingsChanging(value);
                    _ListRoleConstantAccessSettings = value;
                    this.OnListRoleConstantAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleConstantAccess> _ListRoleConstantAccessSettings;
        IReadOnlyList<IRoleConstantAccess> IConstant.ListRoleConstantAccessSettings { get { return (this as Constant).ListRoleConstantAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleConstantAccessSettingsChanging(ObservableCollection<RoleConstantAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleConstantAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IConstant.ListNodeGeneratorsSettings { get { return (this as Constant).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_constant
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListEnumerationsValidator : ValidatorBase<GroupListEnumerations, GroupListEnumerationsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // E N U M E R A T I O N
    // @exclude
    // ####################################### E N U M E R A T I O N ##########################################
    public partial class GroupListEnumerations : ConfigObjectVmGenSettings<GroupListEnumerations, GroupListEnumerationsValidator>, IComparable<GroupListEnumerations>, IConfigAcceptVisitor, IGroupListEnumerations // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListEnumerations(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListEnumerationsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListEnumerations = new ConfigNodesCollection<Enumeration>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Enumeration)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListEnumerations.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListEnumerations Clone(ITreeConfigNode? parent, IGroupListEnumerations from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListEnumerations vm = new GroupListEnumerations(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListEnumerations = new ConfigNodesCollection<Enumeration>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListEnumerations) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListEnumerations.Add(Enumeration.Clone(vm, (Enumeration)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListEnumerations to, IGroupListEnumerations from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListEnumerations.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListEnumerations)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Enumeration.Update((Enumeration)t, (Enumeration)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListEnumerations.Remove(t);
                }
                foreach (var tt in from.ListEnumerations)
                {
                    bool isfound = false;
                    foreach (var t in to.ListEnumerations.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Enumeration(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Enumeration.Update(p, (Enumeration)tt, isDeep);
                        to.ListEnumerations.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListEnumerations Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListEnumerations.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListEnumerations from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListEnumerations.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_enumerations' to 'GroupListEnumerations'
        public static GroupListEnumerations ConvertToVM(Proto.Config.proto_group_list_enumerations m, GroupListEnumerations vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListEnumerations = new ConfigNodesCollection<Enumeration>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListEnumerations) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Enumeration.ConvertToVM(t, new Enumeration(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListEnumerations.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListEnumerations' to 'proto_group_list_enumerations'
        public static Proto.Config.proto_group_list_enumerations ConvertToProto(GroupListEnumerations vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_enumerations m = new Proto.Config.proto_group_list_enumerations(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListEnumerations) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListEnumerations.Add(Enumeration.ConvertToProto((Enumeration)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListEnumerations)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Enumeration> ListEnumerations // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListEnumerations; }
            set
            {
                if (this._ListEnumerations != value)
                {
                    this.OnListEnumerationsChanging(value);
                    _ListEnumerations = value;
                    this.OnListEnumerationsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Enumeration> _ListEnumerations;
        IReadOnlyList<IEnumeration> IGroupListEnumerations.ListEnumerations { get { return (this as GroupListEnumerations).ListEnumerations; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListEnumerationsChanging(ObservableCollection<Enumeration> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListEnumerationsChanged();
        public Enumeration this[int index] { get { return (Enumeration)this.ListEnumerations[index]; } }
        IEnumeration IGroupListEnumerations.this[int index] { get { return (Enumeration)this.ListEnumerations[index]; } }
        public void Add(Enumeration item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListEnumerations.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Enumeration> items) 
        { 
            Debug.Assert(items != null);
            this.ListEnumerations.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListEnumerations.Count; }
        int IGroupListEnumerations.Count() { return this.Count(); }
        public void Remove(Enumeration item) 
        {
            Debug.Assert(item != null);
            this.ListEnumerations.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListEnumerations.ListNodeGeneratorsSettings { get { return (this as GroupListEnumerations).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class EnumerationValidator : ValidatorBase<Enumeration, EnumerationValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Enumeration : ConfigObjectVmGenSettings<Enumeration, EnumerationValidator>, IComparable<Enumeration>, IConfigAcceptVisitor, IEnumeration // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Enumeration(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, EnumerationValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListEnumerationPairs = new ConfigNodesCollection<EnumerationPair>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(EnumerationPair)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListEnumerationPairs.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Enumeration Clone(ITreeConfigNode? parent, IEnumeration from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Enumeration vm = new Enumeration(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DataTypeEnum = from.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.DataTypeLength = from.DataTypeLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListEnumerationPairs = new ConfigNodesCollection<EnumerationPair>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListEnumerationPairs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListEnumerationPairs.Add(EnumerationPair.Clone(vm, (EnumerationPair)t, isDeep));
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Enumeration to, IEnumeration from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DataTypeEnum = from.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.DataTypeLength = from.DataTypeLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListEnumerationPairs.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListEnumerationPairs)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            EnumerationPair.Update((EnumerationPair)t, (EnumerationPair)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListEnumerationPairs.Remove(t);
                }
                foreach (var tt in from.ListEnumerationPairs)
                {
                    bool isfound = false;
                    foreach (var t in to.ListEnumerationPairs.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new EnumerationPair(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        EnumerationPair.Update(p, (EnumerationPair)tt, isDeep);
                        to.ListEnumerationPairs.Add(p);
                    }
                }
            }
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Enumeration Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Enumeration.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Enumeration from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Enumeration.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_enumeration' to 'Enumeration'
        public static Enumeration ConvertToVM(Proto.Config.proto_enumeration m, Enumeration vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DataTypeEnum = (EnumEnumerationType)m.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.DataTypeLength = m.DataTypeLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListEnumerationPairs = new ConfigNodesCollection<EnumerationPair>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListEnumerationPairs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = EnumerationPair.ConvertToVM(t, new EnumerationPair(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListEnumerationPairs.Add(tvm);
            }
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Enumeration' to 'proto_enumeration'
        public static Proto.Config.proto_enumeration ConvertToProto(Enumeration vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_enumeration m = new Proto.Config.proto_enumeration(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.DataTypeEnum = (Proto.Config.enum_enumeration_type)vm.DataTypeEnum; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DataTypeLength = vm.DataTypeLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListEnumerationPairs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListEnumerationPairs.Add(EnumerationPair.ConvertToProto((EnumerationPair)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListEnumerationPairs)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Enumeration name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("Description")]
        [Description("Description of enumeration")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // Enumeration element type
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Type")]
        public EnumEnumerationType DataTypeEnum // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataTypeEnum; }
            set
            {
                if (this._DataTypeEnum != value)
                {
                    this.OnDataTypeEnumChanging(ref value);
                    this._DataTypeEnum = value;
                    this.OnDataTypeEnumChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumEnumerationType _DataTypeEnum;
        partial void OnDataTypeEnumChanging(ref EnumEnumerationType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeEnumChanged();
        
        // Length of string if 'STRING' is selected as enumeration element type
        [Category("")]
        [PropertyOrderAttribute(5)]
        [DisplayName("Length")]
        public int DataTypeLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataTypeLength; }
            set
            {
                if (this._DataTypeLength != value)
                {
                    this.OnDataTypeLengthChanging(ref value);
                    this._DataTypeLength = value;
                    this.OnDataTypeLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _DataTypeLength;
        partial void OnDataTypeLengthChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataTypeLengthChanged();
        
        [DisplayName("Elements")]
        [NewItemTypes(typeof(EnumerationPair))]
        public ConfigNodesCollection<EnumerationPair> ListEnumerationPairs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListEnumerationPairs; }
            set
            {
                if (this._ListEnumerationPairs != value)
                {
                    this.OnListEnumerationPairsChanging(value);
                    _ListEnumerationPairs = value;
                    this.OnListEnumerationPairsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<EnumerationPair> _ListEnumerationPairs;
        IReadOnlyList<IEnumerationPair> IEnumeration.ListEnumerationPairs { get { return (this as Enumeration).ListEnumerationPairs; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListEnumerationPairsChanging(ObservableCollection<EnumerationPair> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListEnumerationPairsChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IEnumeration.ListNodeGeneratorsSettings { get { return (this as Enumeration).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_enumeration
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class EnumerationPairValidator : ValidatorBase<EnumerationPair, EnumerationPairValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class EnumerationPair : ConfigObjectVmGenSettings<EnumerationPair, EnumerationPairValidator>, IComparable<EnumerationPair>, IConfigAcceptVisitor, IEnumerationPair // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public EnumerationPair(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, EnumerationPairValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static EnumerationPair Clone(ITreeConfigNode? parent, IEnumerationPair from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            EnumerationPair vm = new EnumerationPair(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Value = from.Value; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsDefault = from.IsDefault; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NumericValue = from.NumericValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(EnumerationPair to, IEnumerationPair from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Value = from.Value; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsDefault = from.IsDefault; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NumericValue = from.NumericValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override EnumerationPair Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return EnumerationPair.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(EnumerationPair from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            EnumerationPair.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_enumeration_pair' to 'EnumerationPair'
        public static EnumerationPair ConvertToVM(Proto.Config.proto_enumeration_pair m, EnumerationPair vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Value = m.Value; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsDefault = m.IsDefault; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NumericValue = m.NumericValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'EnumerationPair' to 'proto_enumeration_pair'
        public static Proto.Config.proto_enumeration_pair ConvertToProto(EnumerationPair vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_enumeration_pair m = new Proto.Config.proto_enumeration_pair(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Value = vm.Value; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsDefault = vm.IsDefault; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NumericValue = vm.NumericValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        [Description("Enumeration element name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(5)]
        [Description("Description of enumeration element")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(6)]
        [DisplayName("Value")]
        [Description("Enumeration element value")]
        public string Value // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Value; }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(ref value);
                    this._Value = value;
                    this.OnValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Value = string.Empty;
        partial void OnValueChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnValueChanged();
        
        [PropertyOrderAttribute(9)]
        [DisplayName("Is default")]
        [Description("Used as default value for enumeration")]
        public bool IsDefault // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsDefault; }
            set
            {
                if (this._IsDefault != value)
                {
                    this.OnIsDefaultChanging(ref value);
                    this._IsDefault = value;
                    this.OnIsDefaultChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsDefault;
        partial void OnIsDefaultChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsDefaultChanged();
        
        [PropertyOrderAttribute(8)]
        [DisplayName("Numeric Value")]
        [Description("Enumeration element numeric value")]
        public int NumericValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NumericValue; }
            set
            {
                if (this._NumericValue != value)
                {
                    this.OnNumericValueChanging(ref value);
                    this._NumericValue = value;
                    this.OnNumericValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _NumericValue;
        partial void OnNumericValueChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNumericValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IEnumerationPair.ListNodeGeneratorsSettings { get { return (this as EnumerationPair).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_enumeration_pair
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class CatalogFolderValidator : ValidatorBase<CatalogFolder, CatalogFolderValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // C A T A L O G
    // @exclude
    // ####################################### C A T A L O G ##########################################
    public partial class CatalogFolder : ConfigObjectVmGenSettings<CatalogFolder, CatalogFolderValidator>, IComparable<CatalogFolder>, IConfigAcceptVisitor, ICatalogFolder // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public CatalogFolder(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, CatalogFolderValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._CodePropertySettings = new CatalogCodePropertySettings(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupProperties = new GroupListProperties(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupDetails = new GroupListDetails(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupForms = new GroupListForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupReports = new GroupListReports(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static CatalogFolder Clone(ITreeConfigNode? parent, ICatalogFolder from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            CatalogFolder vm = new CatalogFolder(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.CodePropertySettings = vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.Clone(vm, from.CodePropertySettings, isDeep);
            vm.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexUniqueCodeGuid = from.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexRefTreeParentCodeGuid = from.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexNotUniqueCodeGuid = from.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxNameLength = from.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxDescriptionLength = from.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIsFolderGuid = from.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyRefSelfGuid = from.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.Clone(vm, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.Clone(vm, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.Clone(vm, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.Clone(vm, from.GroupReports, isDeep);
            vm.ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleCatalogAccessSettings.Add(RoleCatalogAccess.Clone((RoleCatalogAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(CatalogFolder to, ICatalogFolder from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.Update((CatalogCodePropertySettings)to.CodePropertySettings, from.CodePropertySettings, isDeep);
            to.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexUniqueCodeGuid = from.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexRefTreeParentCodeGuid = from.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexNotUniqueCodeGuid = from.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxNameLength = from.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxDescriptionLength = from.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIsFolderGuid = from.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyRefSelfGuid = from.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListProperties.Update((GroupListProperties)to.GroupProperties, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListDetails.Update((GroupListDetails)to.GroupDetails, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListForms.Update((GroupListForms)to.GroupForms, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListReports.Update((GroupListReports)to.GroupReports, from.GroupReports, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleCatalogAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleCatalogAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleCatalogAccess.Update((RoleCatalogAccess)t, (RoleCatalogAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleCatalogAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleCatalogAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleCatalogAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleCatalogAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleCatalogAccess.Update(p, (RoleCatalogAccess)tt, isDeep);
                        to.ListRoleCatalogAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override CatalogFolder Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return CatalogFolder.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(CatalogFolder from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            CatalogFolder.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_catalog_folder' to 'CatalogFolder'
        public static CatalogFolder ConvertToVM(Proto.Config.proto_catalog_folder m, CatalogFolder vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIdGuid = m.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = (EnumUseType)m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.CodePropertySettings == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.CodePropertySettings = new CatalogCodePropertySettings(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.ConvertToVM(m.CodePropertySettings, (CatalogCodePropertySettings)vm.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.PropertyCodeGuid = m.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyVersionGuid = m.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexUniqueCodeGuid = m.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexRefTreeParentCodeGuid = m.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexNotUniqueCodeGuid = m.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNameProperty = (EnumUseType)m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxNameLength = m.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyNameGuid = m.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = (EnumUseType)m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxDescriptionLength = m.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDescriptionGuid = m.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListWideGuid = m.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListNarrowGuid = m.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIsFolderGuid = m.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyRefSelfGuid = m.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupProperties == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupProperties = new GroupListProperties(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToVM(m.GroupProperties, (GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupDetails == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupDetails = new GroupListDetails(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToVM(m.GroupDetails, (GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupForms = new GroupListForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListForms.ConvertToVM(m.GroupForms, (GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupReports == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupReports = new GroupListReports(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListReports.ConvertToVM(m.GroupReports, (GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleCatalogAccess.ConvertToVM(t, new RoleCatalogAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleCatalogAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'CatalogFolder' to 'proto_catalog_folder'
        public static Proto.Config.proto_catalog_folder ConvertToProto(CatalogFolder vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_catalog_folder m = new Proto.Config.proto_catalog_folder(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIdGuid = vm.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.CodePropertySettings = vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.ConvertToProto((CatalogCodePropertySettings)vm.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.PropertyCodeGuid = vm.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyVersionGuid = vm.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexUniqueCodeGuid = vm.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexRefTreeParentCodeGuid = vm.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexNotUniqueCodeGuid = vm.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseNameProperty = (Proto.Config.proto_enum_use_type)vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxNameLength = vm.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyNameGuid = vm.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDescriptionProperty = (Proto.Config.proto_enum_use_type)vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxDescriptionLength = vm.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDescriptionGuid = vm.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ViewListWideGuid = vm.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ViewListNarrowGuid = vm.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIsFolderGuid = vm.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyRefSelfGuid = vm.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToProto((GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToProto((GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.ConvertToProto((GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.ConvertToProto((GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleCatalogAccessSettings.Add(RoleCatalogAccess.ConvertToProto((RoleCatalogAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.CodePropertySettings.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupProperties.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupDetails.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupReports.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRoleCatalogAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public string PropertyIdGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIdGuid; }
            set
            {
                if (this._PropertyIdGuid != value)
                {
                    this.OnPropertyIdGuidChanging(ref value);
                    this._PropertyIdGuid = value;
                    this.OnPropertyIdGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIdGuid = string.Empty;
        partial void OnPropertyIdGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIdGuidChanged();
        
        [PropertyOrderAttribute(21)]
        [DisplayName("Use Code")]
        [Description("Use Code property for catalog item")]
        public EnumUseType UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Code")]
        [Description("Code property settings for catalog folder")]
        [Editor(typeof(EditorPropertyGridDialog), typeof(EditorPropertyGridDialog))]
        public CatalogCodePropertySettings CodePropertySettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._CodePropertySettings; }
            set
            {
                if (this._CodePropertySettings != value)
                {
                    this.OnCodePropertySettingsChanging(ref value);
                    this._CodePropertySettings = value;
                    this.OnCodePropertySettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private CatalogCodePropertySettings _CodePropertySettings;
        ICatalogCodePropertySettings ICatalogFolder.CodePropertySettings { get { return (this as CatalogFolder).CodePropertySettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnCodePropertySettingsChanging(ref CatalogCodePropertySettings to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCodePropertySettingsChanged();
        //ICatalogCodePropertySettings ICatalogFolder.CodePropertySettings { get { return this._CodePropertySettings; } }
        
        [Browsable(false)]
        public string PropertyCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyCodeGuid; }
            set
            {
                if (this._PropertyCodeGuid != value)
                {
                    this.OnPropertyCodeGuidChanging(ref value);
                    this._PropertyCodeGuid = value;
                    this.OnPropertyCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyCodeGuid = string.Empty;
        partial void OnPropertyCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyCodeGuidChanged();
        
        [Browsable(false)]
        public string PropertyVersionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyVersionGuid; }
            set
            {
                if (this._PropertyVersionGuid != value)
                {
                    this.OnPropertyVersionGuidChanging(ref value);
                    this._PropertyVersionGuid = value;
                    this.OnPropertyVersionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyVersionGuid = string.Empty;
        partial void OnPropertyVersionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyVersionGuidChanged();
        
        [Browsable(false)]
        public string IndexUniqueCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexUniqueCodeGuid; }
            set
            {
                if (this._IndexUniqueCodeGuid != value)
                {
                    this.OnIndexUniqueCodeGuidChanging(ref value);
                    this._IndexUniqueCodeGuid = value;
                    this.OnIndexUniqueCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexUniqueCodeGuid = string.Empty;
        partial void OnIndexUniqueCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexUniqueCodeGuidChanged();
        
        [Browsable(false)]
        public string IndexRefTreeParentCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexRefTreeParentCodeGuid; }
            set
            {
                if (this._IndexRefTreeParentCodeGuid != value)
                {
                    this.OnIndexRefTreeParentCodeGuidChanging(ref value);
                    this._IndexRefTreeParentCodeGuid = value;
                    this.OnIndexRefTreeParentCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexRefTreeParentCodeGuid = string.Empty;
        partial void OnIndexRefTreeParentCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexRefTreeParentCodeGuidChanged();
        
        [Browsable(false)]
        public string IndexNotUniqueCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexNotUniqueCodeGuid; }
            set
            {
                if (this._IndexNotUniqueCodeGuid != value)
                {
                    this.OnIndexNotUniqueCodeGuidChanging(ref value);
                    this._IndexNotUniqueCodeGuid = value;
                    this.OnIndexNotUniqueCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexNotUniqueCodeGuid = string.Empty;
        partial void OnIndexNotUniqueCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexNotUniqueCodeGuidChanged();
        
        [PropertyOrderAttribute(41)]
        [DisplayName("Use Name")]
        [Description("Use Name property for catalog item")]
        public EnumUseType UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [PropertyOrderAttribute(42)]
        [DisplayName("Max Length")]
        [Description("Maximum catalog item name length. If zero, than unlimited length")]
        public uint MaxNameLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxNameLength; }
            set
            {
                if (this._MaxNameLength != value)
                {
                    this.OnMaxNameLengthChanging(ref value);
                    this._MaxNameLength = value;
                    this.OnMaxNameLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxNameLength;
        partial void OnMaxNameLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxNameLengthChanged();
        
        [Browsable(false)]
        public string PropertyNameGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyNameGuid; }
            set
            {
                if (this._PropertyNameGuid != value)
                {
                    this.OnPropertyNameGuidChanging(ref value);
                    this._PropertyNameGuid = value;
                    this.OnPropertyNameGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyNameGuid = string.Empty;
        partial void OnPropertyNameGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyNameGuidChanged();
        
        [PropertyOrderAttribute(51)]
        [DisplayName("Use Description")]
        [Description("Use Description property for catalog item")]
        public EnumUseType UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [PropertyOrderAttribute(52)]
        [DisplayName("Max Length")]
        [Description("Maximum catalog item description length. If zero, than unlimited length")]
        public uint MaxDescriptionLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxDescriptionLength; }
            set
            {
                if (this._MaxDescriptionLength != value)
                {
                    this.OnMaxDescriptionLengthChanging(ref value);
                    this._MaxDescriptionLength = value;
                    this.OnMaxDescriptionLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxDescriptionLength;
        partial void OnMaxDescriptionLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxDescriptionLengthChanged();
        
        [Browsable(false)]
        public string PropertyDescriptionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDescriptionGuid; }
            set
            {
                if (this._PropertyDescriptionGuid != value)
                {
                    this.OnPropertyDescriptionGuidChanging(ref value);
                    this._PropertyDescriptionGuid = value;
                    this.OnPropertyDescriptionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDescriptionGuid = string.Empty;
        partial void OnPropertyDescriptionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDescriptionGuidChanged();
        
        [Browsable(false)]
        public string ViewListWideGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListWideGuid; }
            set
            {
                if (this._ViewListWideGuid != value)
                {
                    this.OnViewListWideGuidChanging(ref value);
                    this._ViewListWideGuid = value;
                    this.OnViewListWideGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListWideGuid = string.Empty;
        partial void OnViewListWideGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListWideGuidChanged();
        
        [Browsable(false)]
        public string ViewListNarrowGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListNarrowGuid; }
            set
            {
                if (this._ViewListNarrowGuid != value)
                {
                    this.OnViewListNarrowGuidChanging(ref value);
                    this._ViewListNarrowGuid = value;
                    this.OnViewListNarrowGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListNarrowGuid = string.Empty;
        partial void OnViewListNarrowGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListNarrowGuidChanged();
        
        [Browsable(false)]
        public string PropertyIsFolderGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIsFolderGuid; }
            set
            {
                if (this._PropertyIsFolderGuid != value)
                {
                    this.OnPropertyIsFolderGuidChanging(ref value);
                    this._PropertyIsFolderGuid = value;
                    this.OnPropertyIsFolderGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIsFolderGuid = string.Empty;
        partial void OnPropertyIsFolderGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIsFolderGuidChanged();
        
        [Browsable(false)]
        public string PropertyRefSelfGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyRefSelfGuid; }
            set
            {
                if (this._PropertyRefSelfGuid != value)
                {
                    this.OnPropertyRefSelfGuidChanging(ref value);
                    this._PropertyRefSelfGuid = value;
                    this.OnPropertyRefSelfGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyRefSelfGuid = string.Empty;
        partial void OnPropertyRefSelfGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyRefSelfGuidChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public GroupListProperties GroupProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupProperties; }
            set
            {
                if (this._GroupProperties != value)
                {
                    this.OnGroupPropertiesChanging(ref value);
                    this._GroupProperties = value;
                    this.OnGroupPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListProperties _GroupProperties;
        IGroupListProperties ICatalogFolder.GroupProperties { get { return (this as CatalogFolder).GroupProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupPropertiesChanging(ref GroupListProperties to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupPropertiesChanged();
        //IGroupListProperties ICatalogFolder.GroupProperties { get { return this._GroupProperties; } }
        
        [Browsable(false)]
        public GroupListDetails GroupDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupDetails; }
            set
            {
                if (this._GroupDetails != value)
                {
                    this.OnGroupDetailsChanging(ref value);
                    this._GroupDetails = value;
                    this.OnGroupDetailsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListDetails _GroupDetails;
        IGroupListDetails ICatalogFolder.GroupDetails { get { return (this as CatalogFolder).GroupDetails; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupDetailsChanging(ref GroupListDetails to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupDetailsChanged();
        //IGroupListDetails ICatalogFolder.GroupDetails { get { return this._GroupDetails; } }
        
        [Browsable(false)]
        public GroupListForms GroupForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupForms; }
            set
            {
                if (this._GroupForms != value)
                {
                    this.OnGroupFormsChanging(ref value);
                    this._GroupForms = value;
                    this.OnGroupFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListForms _GroupForms;
        IGroupListForms ICatalogFolder.GroupForms { get { return (this as CatalogFolder).GroupForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupFormsChanging(ref GroupListForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupFormsChanged();
        //IGroupListForms ICatalogFolder.GroupForms { get { return this._GroupForms; } }
        
        [Browsable(false)]
        public GroupListReports GroupReports // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupReports; }
            set
            {
                if (this._GroupReports != value)
                {
                    this.OnGroupReportsChanging(ref value);
                    this._GroupReports = value;
                    this.OnGroupReportsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListReports _GroupReports;
        IGroupListReports ICatalogFolder.GroupReports { get { return (this as CatalogFolder).GroupReports; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupReportsChanging(ref GroupListReports to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupReportsChanged();
        //IGroupListReports ICatalogFolder.GroupReports { get { return this._GroupReports; } }
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleCatalogAccess> ListRoleCatalogAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleCatalogAccessSettings; }
            set
            {
                if (this._ListRoleCatalogAccessSettings != value)
                {
                    this.OnListRoleCatalogAccessSettingsChanging(value);
                    _ListRoleCatalogAccessSettings = value;
                    this.OnListRoleCatalogAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleCatalogAccess> _ListRoleCatalogAccessSettings;
        IReadOnlyList<IRoleCatalogAccess> ICatalogFolder.ListRoleCatalogAccessSettings { get { return (this as CatalogFolder).ListRoleCatalogAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleCatalogAccessSettingsChanging(ObservableCollection<RoleCatalogAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleCatalogAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> ICatalogFolder.ListNodeGeneratorsSettings { get { return (this as CatalogFolder).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class CatalogCodePropertySettingsValidator : ValidatorBase<CatalogCodePropertySettings, CatalogCodePropertySettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class CatalogCodePropertySettings : BaseSettings<CatalogCodePropertySettings, CatalogCodePropertySettingsValidator>, ICatalogCodePropertySettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public CatalogCodePropertySettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, CatalogCodePropertySettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static CatalogCodePropertySettings Clone(ITreeConfigNode? parent, ICatalogCodePropertySettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            CatalogCodePropertySettings vm = new CatalogCodePropertySettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UniqueScope = from.UniqueScope; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(CatalogCodePropertySettings to, ICatalogCodePropertySettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UniqueScope = from.UniqueScope; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override CatalogCodePropertySettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return CatalogCodePropertySettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(CatalogCodePropertySettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            CatalogCodePropertySettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_catalog_code_property_settings' to 'CatalogCodePropertySettings'
        public static CatalogCodePropertySettings ConvertToVM(Proto.Config.proto_catalog_code_property_settings m, CatalogCodePropertySettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.SequenceType = (EnumCodeType)m.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxSequenceLength = m.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Prefix = m.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UniqueScope = (EnumCatalogCodeUniqueScope)m.UniqueScope; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'CatalogCodePropertySettings' to 'proto_catalog_code_property_settings'
        public static Proto.Config.proto_catalog_code_property_settings ConvertToProto(CatalogCodePropertySettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_catalog_code_property_settings m = new Proto.Config.proto_catalog_code_property_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.SequenceType = (Proto.Config.proto_enum_code_type)vm.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxSequenceLength = vm.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Prefix = vm.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UniqueScope = (Proto.Config.proto_enum_catalog_code_unique_scope)vm.UniqueScope; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(1)]
        [DisplayName("Sequence type")]
        [Description("Sequence type general settings")]
        public EnumCodeType SequenceType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SequenceType; }
            set
            {
                if (this._SequenceType != value)
                {
                    this.OnSequenceTypeChanging(ref value);
                    this._SequenceType = value;
                    this.OnSequenceTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCodeType _SequenceType;
        partial void OnSequenceTypeChanging(ref EnumCodeType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSequenceTypeChanged();
        
        [PropertyOrderAttribute(2)]
        [DisplayName("Max Sequence")]
        [Description("Maximum number of character places for generated sequence numbers. Valid sequence numbers from 1 to 999, where number '9' is limited by this parameter")]
        public uint MaxSequenceLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxSequenceLength; }
            set
            {
                if (this._MaxSequenceLength != value)
                {
                    this.OnMaxSequenceLengthChanging(ref value);
                    this._MaxSequenceLength = value;
                    this.OnMaxSequenceLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxSequenceLength;
        partial void OnMaxSequenceLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxSequenceLengthChanged();
        
        [PropertyOrderAttribute(3)]
        [DisplayName("Prefix")]
        [Description("Prefix for text code sequence")]
        public string Prefix // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Prefix; }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(ref value);
                    this._Prefix = value;
                    this.OnPrefixChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Prefix = string.Empty;
        partial void OnPrefixChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixChanged();
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Unique Scope")]
        [Description("Code has to be unique in selected scope")]
        public EnumCatalogCodeUniqueScope UniqueScope // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UniqueScope; }
            set
            {
                if (this._UniqueScope != value)
                {
                    this.OnUniqueScopeChanging(ref value);
                    this._UniqueScope = value;
                    this.OnUniqueScopeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogCodeUniqueScope _UniqueScope;
        partial void OnUniqueScopeChanging(ref EnumCatalogCodeUniqueScope to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUniqueScopeChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class CatalogValidator : ValidatorBase<Catalog, CatalogValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Catalog : ConfigObjectVmGenSettings<Catalog, CatalogValidator>, IComparable<Catalog>, IConfigAcceptVisitor, ICatalog // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Catalog(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, CatalogValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._CodePropertySettings = new CatalogCodePropertySettings(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._Folder = new CatalogFolder(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupProperties = new GroupListProperties(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupDetails = new GroupListDetails(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupForms = new GroupListForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupReports = new GroupListReports(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Catalog Clone(ITreeConfigNode? parent, ICatalog from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Catalog vm = new Catalog(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseTree = from.UseTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseSeparateTreeForFolders = from.UseSeparateTreeForFolders; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxTreeLevels = from.MaxTreeLevels; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.CodePropertySettings = vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.Clone(vm, from.CodePropertySettings, isDeep);
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxNameLength = from.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxDescriptionLength = from.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexUniqueCodeGuid = from.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexRefFolderCodeGuid = from.IndexRefFolderCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexRefTreeParentCodeGuid = from.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexNotUniqueCodeGuid = from.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ItemIconType = from.ItemIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.GroupIconType = from.GroupIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIsFolderGuid = from.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyRefSelfGuid = from.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyRefFolderGuid = from.PropertyRefFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.Folder = vSharpStudio.vm.ViewModels.CatalogFolder.Clone(vm, from.Folder, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.Clone(vm, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.Clone(vm, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.Clone(vm, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.Clone(vm, from.GroupReports, isDeep);
            vm.ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleCatalogAccessSettings.Add(RoleCatalogAccess.Clone((RoleCatalogAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Catalog to, ICatalog from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseTree = from.UseTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseSeparateTreeForFolders = from.UseSeparateTreeForFolders; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxTreeLevels = from.MaxTreeLevels; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.Update((CatalogCodePropertySettings)to.CodePropertySettings, from.CodePropertySettings, isDeep);
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxNameLength = from.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxDescriptionLength = from.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexUniqueCodeGuid = from.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexRefFolderCodeGuid = from.IndexRefFolderCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexRefTreeParentCodeGuid = from.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexNotUniqueCodeGuid = from.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ItemIconType = from.ItemIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.GroupIconType = from.GroupIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListWideGuid = from.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ViewListNarrowGuid = from.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyCodeGuid = from.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyNameGuid = from.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDescriptionGuid = from.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIsFolderGuid = from.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyRefSelfGuid = from.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyRefFolderGuid = from.PropertyRefFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.CatalogFolder.Update((CatalogFolder)to.Folder, from.Folder, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListProperties.Update((GroupListProperties)to.GroupProperties, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListDetails.Update((GroupListDetails)to.GroupDetails, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListForms.Update((GroupListForms)to.GroupForms, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListReports.Update((GroupListReports)to.GroupReports, from.GroupReports, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleCatalogAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleCatalogAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleCatalogAccess.Update((RoleCatalogAccess)t, (RoleCatalogAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleCatalogAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleCatalogAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleCatalogAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleCatalogAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleCatalogAccess.Update(p, (RoleCatalogAccess)tt, isDeep);
                        to.ListRoleCatalogAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Catalog Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Catalog.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Catalog from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Catalog.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_catalog' to 'Catalog'
        public static Catalog ConvertToVM(Proto.Config.proto_catalog m, Catalog vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortId = m.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseTree = m.UseTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseSeparateTreeForFolders = m.UseSeparateTreeForFolders; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxTreeLevels = m.MaxTreeLevels; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = (EnumUseType)m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.CodePropertySettings == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.CodePropertySettings = new CatalogCodePropertySettings(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.ConvertToVM(m.CodePropertySettings, (CatalogCodePropertySettings)vm.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.UseNameProperty = (EnumUseType)m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxNameLength = m.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = (EnumUseType)m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxDescriptionLength = m.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexUniqueCodeGuid = m.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexRefFolderCodeGuid = m.IndexRefFolderCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexRefTreeParentCodeGuid = m.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexNotUniqueCodeGuid = m.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ItemIconType = (EnumCatalogTreeIcon)m.ItemIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.GroupIconType = (EnumCatalogTreeIcon)m.GroupIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListWideGuid = m.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ViewListNarrowGuid = m.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIdGuid = m.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyCodeGuid = m.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyNameGuid = m.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDescriptionGuid = m.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIsFolderGuid = m.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyRefSelfGuid = m.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyRefFolderGuid = m.PropertyRefFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyVersionGuid = m.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.Folder == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.Folder = new CatalogFolder(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.CatalogFolder.ConvertToVM(m.Folder, (CatalogFolder)vm.Folder); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupProperties == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupProperties = new GroupListProperties(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToVM(m.GroupProperties, (GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupDetails == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupDetails = new GroupListDetails(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToVM(m.GroupDetails, (GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupForms = new GroupListForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListForms.ConvertToVM(m.GroupForms, (GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupReports == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupReports = new GroupListReports(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListReports.ConvertToVM(m.GroupReports, (GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListRoleCatalogAccessSettings = new ObservableCollectionWithActions<RoleCatalogAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleCatalogAccess.ConvertToVM(t, new RoleCatalogAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleCatalogAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Catalog' to 'proto_catalog'
        public static Proto.Config.proto_catalog ConvertToProto(Catalog vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_catalog m = new Proto.Config.proto_catalog(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortId = vm.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseTree = vm.UseTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseSeparateTreeForFolders = vm.UseSeparateTreeForFolders; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.MaxTreeLevels = vm.MaxTreeLevels; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.CodePropertySettings = vSharpStudio.vm.ViewModels.CatalogCodePropertySettings.ConvertToProto((CatalogCodePropertySettings)vm.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.UseNameProperty = (Proto.Config.proto_enum_use_type)vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxNameLength = vm.MaxNameLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDescriptionProperty = (Proto.Config.proto_enum_use_type)vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxDescriptionLength = vm.MaxDescriptionLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexUniqueCodeGuid = vm.IndexUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexRefFolderCodeGuid = vm.IndexRefFolderCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexRefTreeParentCodeGuid = vm.IndexRefTreeParentCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexNotUniqueCodeGuid = vm.IndexNotUniqueCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ItemIconType = (Proto.Config.proto_enum_catalog_tree_icon)vm.ItemIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.GroupIconType = (Proto.Config.proto_enum_catalog_tree_icon)vm.GroupIconType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.ViewListWideGuid = vm.ViewListWideGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ViewListNarrowGuid = vm.ViewListNarrowGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIdGuid = vm.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyCodeGuid = vm.PropertyCodeGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyNameGuid = vm.PropertyNameGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDescriptionGuid = vm.PropertyDescriptionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIsFolderGuid = vm.PropertyIsFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyRefSelfGuid = vm.PropertyRefSelfGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyRefFolderGuid = vm.PropertyRefFolderGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyVersionGuid = vm.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.Folder = vSharpStudio.vm.ViewModels.CatalogFolder.ConvertToProto((CatalogFolder)vm.Folder); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToProto((GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToProto((GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.ConvertToProto((GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.ConvertToProto((GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleCatalogAccessSettings.Add(RoleCatalogAccess.ConvertToProto((RoleCatalogAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.CodePropertySettings.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.Folder.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupProperties.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupDetails.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupReports.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRoleCatalogAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public int ShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortId; }
            set
            {
                if (this._ShortId != value)
                {
                    this.OnShortIdChanging(ref value);
                    this._ShortId = value;
                    this.OnShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _ShortId;
        partial void OnShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdChanged();
        
        [PropertyOrderAttribute(20)]
        [DisplayName("Use Tree")]
        [Description("Use tree catalog structure")]
        public bool UseTree // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseTree; }
            set
            {
                if (this._UseTree != value)
                {
                    this.OnUseTreeChanging(ref value);
                    this._UseTree = value;
                    this.OnUseTreeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseTree;
        partial void OnUseTreeChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseTreeChanged();
        
        [PropertyOrderAttribute(21)]
        [DisplayName("Separate Tree")]
        [Description("Separate tree object for folders")]
        public bool UseSeparateTreeForFolders // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseSeparateTreeForFolders; }
            set
            {
                if (this._UseSeparateTreeForFolders != value)
                {
                    this.OnUseSeparateTreeForFoldersChanging(ref value);
                    this._UseSeparateTreeForFolders = value;
                    this.OnUseSeparateTreeForFoldersChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseSeparateTreeForFolders;
        partial void OnUseSeparateTreeForFoldersChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseSeparateTreeForFoldersChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Max Tree Levels")]
        [Description("Maximum amount levels in catalog item groups. If zero, than unlimited")]
        public uint MaxTreeLevels // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxTreeLevels; }
            set
            {
                if (this._MaxTreeLevels != value)
                {
                    this.OnMaxTreeLevelsChanging(ref value);
                    this._MaxTreeLevels = value;
                    this.OnMaxTreeLevelsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxTreeLevels;
        partial void OnMaxTreeLevelsChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxTreeLevelsChanged();
        
        [PropertyOrderAttribute(25)]
        [DisplayName("Use Code")]
        [Description("Use Code property for catalog item")]
        public EnumUseType UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [PropertyOrderAttribute(26)]
        [DisplayName("Code")]
        [Description("Code property settings for catalog item")]
        [Editor(typeof(EditorPropertyGridDialog), typeof(EditorPropertyGridDialog))]
        public CatalogCodePropertySettings CodePropertySettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._CodePropertySettings; }
            set
            {
                if (this._CodePropertySettings != value)
                {
                    this.OnCodePropertySettingsChanging(ref value);
                    this._CodePropertySettings = value;
                    this.OnCodePropertySettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private CatalogCodePropertySettings _CodePropertySettings;
        ICatalogCodePropertySettings ICatalog.CodePropertySettings { get { return (this as Catalog).CodePropertySettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnCodePropertySettingsChanging(ref CatalogCodePropertySettings to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnCodePropertySettingsChanged();
        //ICatalogCodePropertySettings ICatalog.CodePropertySettings { get { return this._CodePropertySettings; } }
        
        [PropertyOrderAttribute(27)]
        [DisplayName("Use Name")]
        [Description("Use Name property for catalog item")]
        public EnumUseType UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [PropertyOrderAttribute(28)]
        [DisplayName("Name Length")]
        [Description("Maximum catalog item name length. If zero, than unlimited length")]
        public uint MaxNameLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxNameLength; }
            set
            {
                if (this._MaxNameLength != value)
                {
                    this.OnMaxNameLengthChanging(ref value);
                    this._MaxNameLength = value;
                    this.OnMaxNameLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxNameLength;
        partial void OnMaxNameLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxNameLengthChanged();
        
        [PropertyOrderAttribute(29)]
        [DisplayName("Use Description")]
        [Description("Use Description property for catalog item")]
        public EnumUseType UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [PropertyOrderAttribute(30)]
        [DisplayName("Desc Length")]
        [Description("Maximum catalog item description length. If zero, than unlimited length")]
        public uint MaxDescriptionLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxDescriptionLength; }
            set
            {
                if (this._MaxDescriptionLength != value)
                {
                    this.OnMaxDescriptionLengthChanging(ref value);
                    this._MaxDescriptionLength = value;
                    this.OnMaxDescriptionLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxDescriptionLength;
        partial void OnMaxDescriptionLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxDescriptionLengthChanged();
        
        [Browsable(false)]
        public string IndexUniqueCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexUniqueCodeGuid; }
            set
            {
                if (this._IndexUniqueCodeGuid != value)
                {
                    this.OnIndexUniqueCodeGuidChanging(ref value);
                    this._IndexUniqueCodeGuid = value;
                    this.OnIndexUniqueCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexUniqueCodeGuid = string.Empty;
        partial void OnIndexUniqueCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexUniqueCodeGuidChanged();
        
        [Browsable(false)]
        public string IndexRefFolderCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexRefFolderCodeGuid; }
            set
            {
                if (this._IndexRefFolderCodeGuid != value)
                {
                    this.OnIndexRefFolderCodeGuidChanging(ref value);
                    this._IndexRefFolderCodeGuid = value;
                    this.OnIndexRefFolderCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexRefFolderCodeGuid = string.Empty;
        partial void OnIndexRefFolderCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexRefFolderCodeGuidChanged();
        
        [Browsable(false)]
        public string IndexRefTreeParentCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexRefTreeParentCodeGuid; }
            set
            {
                if (this._IndexRefTreeParentCodeGuid != value)
                {
                    this.OnIndexRefTreeParentCodeGuidChanging(ref value);
                    this._IndexRefTreeParentCodeGuid = value;
                    this.OnIndexRefTreeParentCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexRefTreeParentCodeGuid = string.Empty;
        partial void OnIndexRefTreeParentCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexRefTreeParentCodeGuidChanged();
        
        [Browsable(false)]
        public string IndexNotUniqueCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexNotUniqueCodeGuid; }
            set
            {
                if (this._IndexNotUniqueCodeGuid != value)
                {
                    this.OnIndexNotUniqueCodeGuidChanging(ref value);
                    this._IndexNotUniqueCodeGuid = value;
                    this.OnIndexNotUniqueCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexNotUniqueCodeGuid = string.Empty;
        partial void OnIndexNotUniqueCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexNotUniqueCodeGuidChanged();
        
        [PropertyOrderAttribute(41)]
        [DisplayName("Item Icon")]
        [Description("Catalog item icon type")]
        public EnumCatalogTreeIcon ItemIconType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ItemIconType; }
            set
            {
                if (this._ItemIconType != value)
                {
                    this.OnItemIconTypeChanging(ref value);
                    this._ItemIconType = value;
                    this.OnItemIconTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogTreeIcon _ItemIconType;
        partial void OnItemIconTypeChanging(ref EnumCatalogTreeIcon to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnItemIconTypeChanged();
        
        [PropertyOrderAttribute(42)]
        [DisplayName("Group Icon")]
        [Description("Catalog group icon type")]
        public EnumCatalogTreeIcon GroupIconType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupIconType; }
            set
            {
                if (this._GroupIconType != value)
                {
                    this.OnGroupIconTypeChanging(ref value);
                    this._GroupIconType = value;
                    this.OnGroupIconTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCatalogTreeIcon _GroupIconType;
        partial void OnGroupIconTypeChanging(ref EnumCatalogTreeIcon to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupIconTypeChanged();
        
        [Browsable(false)]
        public string ViewListWideGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListWideGuid; }
            set
            {
                if (this._ViewListWideGuid != value)
                {
                    this.OnViewListWideGuidChanging(ref value);
                    this._ViewListWideGuid = value;
                    this.OnViewListWideGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListWideGuid = string.Empty;
        partial void OnViewListWideGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListWideGuidChanged();
        
        [Browsable(false)]
        public string ViewListNarrowGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ViewListNarrowGuid; }
            set
            {
                if (this._ViewListNarrowGuid != value)
                {
                    this.OnViewListNarrowGuidChanging(ref value);
                    this._ViewListNarrowGuid = value;
                    this.OnViewListNarrowGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ViewListNarrowGuid = string.Empty;
        partial void OnViewListNarrowGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnViewListNarrowGuidChanged();
        
        [Browsable(false)]
        public string PropertyIdGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIdGuid; }
            set
            {
                if (this._PropertyIdGuid != value)
                {
                    this.OnPropertyIdGuidChanging(ref value);
                    this._PropertyIdGuid = value;
                    this.OnPropertyIdGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIdGuid = string.Empty;
        partial void OnPropertyIdGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIdGuidChanged();
        
        [Browsable(false)]
        public string PropertyCodeGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyCodeGuid; }
            set
            {
                if (this._PropertyCodeGuid != value)
                {
                    this.OnPropertyCodeGuidChanging(ref value);
                    this._PropertyCodeGuid = value;
                    this.OnPropertyCodeGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyCodeGuid = string.Empty;
        partial void OnPropertyCodeGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyCodeGuidChanged();
        
        [Browsable(false)]
        public string PropertyNameGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyNameGuid; }
            set
            {
                if (this._PropertyNameGuid != value)
                {
                    this.OnPropertyNameGuidChanging(ref value);
                    this._PropertyNameGuid = value;
                    this.OnPropertyNameGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyNameGuid = string.Empty;
        partial void OnPropertyNameGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyNameGuidChanged();
        
        [Browsable(false)]
        public string PropertyDescriptionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDescriptionGuid; }
            set
            {
                if (this._PropertyDescriptionGuid != value)
                {
                    this.OnPropertyDescriptionGuidChanging(ref value);
                    this._PropertyDescriptionGuid = value;
                    this.OnPropertyDescriptionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDescriptionGuid = string.Empty;
        partial void OnPropertyDescriptionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDescriptionGuidChanged();
        
        [Browsable(false)]
        public string PropertyIsFolderGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIsFolderGuid; }
            set
            {
                if (this._PropertyIsFolderGuid != value)
                {
                    this.OnPropertyIsFolderGuidChanging(ref value);
                    this._PropertyIsFolderGuid = value;
                    this.OnPropertyIsFolderGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIsFolderGuid = string.Empty;
        partial void OnPropertyIsFolderGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIsFolderGuidChanged();
        
        [Browsable(false)]
        public string PropertyRefSelfGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyRefSelfGuid; }
            set
            {
                if (this._PropertyRefSelfGuid != value)
                {
                    this.OnPropertyRefSelfGuidChanging(ref value);
                    this._PropertyRefSelfGuid = value;
                    this.OnPropertyRefSelfGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyRefSelfGuid = string.Empty;
        partial void OnPropertyRefSelfGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyRefSelfGuidChanged();
        
        [Browsable(false)]
        public string PropertyRefFolderGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyRefFolderGuid; }
            set
            {
                if (this._PropertyRefFolderGuid != value)
                {
                    this.OnPropertyRefFolderGuidChanging(ref value);
                    this._PropertyRefFolderGuid = value;
                    this.OnPropertyRefFolderGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyRefFolderGuid = string.Empty;
        partial void OnPropertyRefFolderGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyRefFolderGuidChanged();
        
        [Browsable(false)]
        public string PropertyVersionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyVersionGuid; }
            set
            {
                if (this._PropertyVersionGuid != value)
                {
                    this.OnPropertyVersionGuidChanging(ref value);
                    this._PropertyVersionGuid = value;
                    this.OnPropertyVersionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyVersionGuid = string.Empty;
        partial void OnPropertyVersionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyVersionGuidChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public CatalogFolder Folder // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Folder; }
            set
            {
                if (this._Folder != value)
                {
                    this.OnFolderChanging(ref value);
                    this._Folder = value;
                    this.OnFolderChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private CatalogFolder _Folder;
        ICatalogFolder ICatalog.Folder { get { return (this as Catalog).Folder; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnFolderChanging(ref CatalogFolder to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnFolderChanged();
        //ICatalogFolder ICatalog.Folder { get { return this._Folder; } }
        
        [Browsable(false)]
        public GroupListProperties GroupProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupProperties; }
            set
            {
                if (this._GroupProperties != value)
                {
                    this.OnGroupPropertiesChanging(ref value);
                    this._GroupProperties = value;
                    this.OnGroupPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListProperties _GroupProperties;
        IGroupListProperties ICatalog.GroupProperties { get { return (this as Catalog).GroupProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupPropertiesChanging(ref GroupListProperties to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupPropertiesChanged();
        //IGroupListProperties ICatalog.GroupProperties { get { return this._GroupProperties; } }
        
        [Browsable(false)]
        public GroupListDetails GroupDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupDetails; }
            set
            {
                if (this._GroupDetails != value)
                {
                    this.OnGroupDetailsChanging(ref value);
                    this._GroupDetails = value;
                    this.OnGroupDetailsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListDetails _GroupDetails;
        IGroupListDetails ICatalog.GroupDetails { get { return (this as Catalog).GroupDetails; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupDetailsChanging(ref GroupListDetails to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupDetailsChanged();
        //IGroupListDetails ICatalog.GroupDetails { get { return this._GroupDetails; } }
        
        [Browsable(false)]
        public GroupListForms GroupForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupForms; }
            set
            {
                if (this._GroupForms != value)
                {
                    this.OnGroupFormsChanging(ref value);
                    this._GroupForms = value;
                    this.OnGroupFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListForms _GroupForms;
        IGroupListForms ICatalog.GroupForms { get { return (this as Catalog).GroupForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupFormsChanging(ref GroupListForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupFormsChanged();
        //IGroupListForms ICatalog.GroupForms { get { return this._GroupForms; } }
        
        [Browsable(false)]
        public GroupListReports GroupReports // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupReports; }
            set
            {
                if (this._GroupReports != value)
                {
                    this.OnGroupReportsChanging(ref value);
                    this._GroupReports = value;
                    this.OnGroupReportsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListReports _GroupReports;
        IGroupListReports ICatalog.GroupReports { get { return (this as Catalog).GroupReports; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupReportsChanging(ref GroupListReports to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupReportsChanged();
        //IGroupListReports ICatalog.GroupReports { get { return this._GroupReports; } }
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleCatalogAccess> ListRoleCatalogAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleCatalogAccessSettings; }
            set
            {
                if (this._ListRoleCatalogAccessSettings != value)
                {
                    this.OnListRoleCatalogAccessSettingsChanging(value);
                    _ListRoleCatalogAccessSettings = value;
                    this.OnListRoleCatalogAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleCatalogAccess> _ListRoleCatalogAccessSettings;
        IReadOnlyList<IRoleCatalogAccess> ICatalog.ListRoleCatalogAccessSettings { get { return (this as Catalog).ListRoleCatalogAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleCatalogAccessSettingsChanging(ObservableCollection<RoleCatalogAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleCatalogAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> ICatalog.ListNodeGeneratorsSettings { get { return (this as Catalog).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_catalog
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListCatalogsValidator : ValidatorBase<GroupListCatalogs, GroupListCatalogsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListCatalogs : ConfigObjectVmGenSettings<GroupListCatalogs, GroupListCatalogsValidator>, IComparable<GroupListCatalogs>, IConfigAcceptVisitor, IGroupListCatalogs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListCatalogs(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListCatalogsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListCatalogs = new ConfigNodesCollection<Catalog>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Catalog)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListCatalogs.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListCatalogs Clone(ITreeConfigNode? parent, IGroupListCatalogs from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListCatalogs vm = new GroupListCatalogs(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListCatalogs = new ConfigNodesCollection<Catalog>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListCatalogs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListCatalogs.Add(Catalog.Clone(vm, (Catalog)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseCodePropertyInSeparateTree = from.UseCodePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseNamePropertyInSeparateTree = from.UseNamePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDescriptionPropertyInSeparateTree = from.UseDescriptionPropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListCatalogs to, IGroupListCatalogs from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListCatalogs.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListCatalogs)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Catalog.Update((Catalog)t, (Catalog)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListCatalogs.Remove(t);
                }
                foreach (var tt in from.ListCatalogs)
                {
                    bool isfound = false;
                    foreach (var t in to.ListCatalogs.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Catalog(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Catalog.Update(p, (Catalog)tt, isDeep);
                        to.ListCatalogs.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodeProperty = from.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNameProperty = from.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionProperty = from.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseCodePropertyInSeparateTree = from.UseCodePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseNamePropertyInSeparateTree = from.UseNamePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDescriptionPropertyInSeparateTree = from.UseDescriptionPropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListCatalogs Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListCatalogs.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListCatalogs from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListCatalogs.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_catalogs' to 'GroupListCatalogs'
        public static GroupListCatalogs ConvertToVM(Proto.Config.proto_group_list_catalogs m, GroupListCatalogs vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrefixForDbTables = m.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortIdTypeForCacheKey = m.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListCatalogs = new ConfigNodesCollection<Catalog>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListCatalogs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Catalog.ConvertToVM(t, new Catalog(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListCatalogs.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodeProperty = (EnumUseType)m.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNameProperty = (EnumUseType)m.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionProperty = (EnumUseType)m.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseCodePropertyInSeparateTree = m.UseCodePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseNamePropertyInSeparateTree = m.UseNamePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDescriptionPropertyInSeparateTree = m.UseDescriptionPropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListCatalogs' to 'proto_group_list_catalogs'
        public static Proto.Config.proto_group_list_catalogs ConvertToProto(GroupListCatalogs vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_catalogs m = new Proto.Config.proto_group_list_catalogs(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PrefixForDbTables = vm.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortIdTypeForCacheKey = vm.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListCatalogs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListCatalogs.Add(Catalog.ConvertToProto((Catalog)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseNameProperty = (Proto.Config.proto_enum_use_type)vm.UseNameProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseDescriptionProperty = (Proto.Config.proto_enum_use_type)vm.UseDescriptionProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.UseCodePropertyInSeparateTree = vm.UseCodePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseNamePropertyInSeparateTree = vm.UseNamePropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDescriptionPropertyInSeparateTree = vm.UseDescriptionPropertyInSeparateTree; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListCatalogs)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(4)]
        [DisplayName("Db prefix")]
        [Description("Prefix for catalog db table names. Used if set to use in config model")]
        public string PrefixForDbTables // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrefixForDbTables; }
            set
            {
                if (this._PrefixForDbTables != value)
                {
                    this.OnPrefixForDbTablesChanging(ref value);
                    this._PrefixForDbTables = value;
                    this.OnPrefixForDbTablesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PrefixForDbTables = string.Empty;
        partial void OnPrefixForDbTablesChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixForDbTablesChanged();
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Short ID")]
        [Description("Short catalog type ID for cache key generator")]
        public string ShortIdTypeForCacheKey // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortIdTypeForCacheKey; }
            set
            {
                if (this._ShortIdTypeForCacheKey != value)
                {
                    this.OnShortIdTypeForCacheKeyChanging(ref value);
                    this._ShortIdTypeForCacheKey = value;
                    this.OnShortIdTypeForCacheKeyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ShortIdTypeForCacheKey = string.Empty;
        partial void OnShortIdTypeForCacheKeyChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdTypeForCacheKeyChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Catalog> ListCatalogs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListCatalogs; }
            set
            {
                if (this._ListCatalogs != value)
                {
                    this.OnListCatalogsChanging(value);
                    _ListCatalogs = value;
                    this.OnListCatalogsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Catalog> _ListCatalogs;
        IReadOnlyList<ICatalog> IGroupListCatalogs.ListCatalogs { get { return (this as GroupListCatalogs).ListCatalogs; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListCatalogsChanging(ObservableCollection<Catalog> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListCatalogsChanged();
        public Catalog this[int index] { get { return (Catalog)this.ListCatalogs[index]; } }
        ICatalog IGroupListCatalogs.this[int index] { get { return (Catalog)this.ListCatalogs[index]; } }
        public void Add(Catalog item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListCatalogs.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Catalog> items) 
        { 
            Debug.Assert(items != null);
            this.ListCatalogs.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListCatalogs.Count; }
        int IGroupListCatalogs.Count() { return this.Count(); }
        public void Remove(Catalog item) 
        {
            Debug.Assert(item != null);
            this.ListCatalogs.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Use Code")]
        [Description("Use Code property for catalog item by default")]
        public EnumUseType UseCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodeProperty; }
            set
            {
                if (this._UseCodeProperty != value)
                {
                    this.OnUseCodePropertyChanging(ref value);
                    this._UseCodeProperty = value;
                    this.OnUseCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseCodeProperty;
        partial void OnUseCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyChanged();
        
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Name")]
        [Description("Use Name property for catalog item by default")]
        public EnumUseType UseNameProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNameProperty; }
            set
            {
                if (this._UseNameProperty != value)
                {
                    this.OnUseNamePropertyChanging(ref value);
                    this._UseNameProperty = value;
                    this.OnUseNamePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseNameProperty;
        partial void OnUseNamePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyChanged();
        
        [PropertyOrderAttribute(26)]
        [DisplayName("Use Description")]
        [Description("Use Description property for catalog item by default")]
        public EnumUseType UseDescriptionProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionProperty; }
            set
            {
                if (this._UseDescriptionProperty != value)
                {
                    this.OnUseDescriptionPropertyChanging(ref value);
                    this._UseDescriptionProperty = value;
                    this.OnUseDescriptionPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDescriptionProperty;
        partial void OnUseDescriptionPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyChanged();
        
        [PropertyOrderAttribute(32)]
        [DisplayName("Tree Use Code")]
        [Description("Use Code property in separate tree for catalog folder by default")]
        public bool UseCodePropertyInSeparateTree // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseCodePropertyInSeparateTree; }
            set
            {
                if (this._UseCodePropertyInSeparateTree != value)
                {
                    this.OnUseCodePropertyInSeparateTreeChanging(ref value);
                    this._UseCodePropertyInSeparateTree = value;
                    this.OnUseCodePropertyInSeparateTreeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseCodePropertyInSeparateTree;
        partial void OnUseCodePropertyInSeparateTreeChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseCodePropertyInSeparateTreeChanged();
        
        [PropertyOrderAttribute(34)]
        [DisplayName("Tree Use Name")]
        [Description("Use Name property in separate tree for catalog item by default")]
        public bool UseNamePropertyInSeparateTree // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseNamePropertyInSeparateTree; }
            set
            {
                if (this._UseNamePropertyInSeparateTree != value)
                {
                    this.OnUseNamePropertyInSeparateTreeChanging(ref value);
                    this._UseNamePropertyInSeparateTree = value;
                    this.OnUseNamePropertyInSeparateTreeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseNamePropertyInSeparateTree;
        partial void OnUseNamePropertyInSeparateTreeChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseNamePropertyInSeparateTreeChanged();
        
        [PropertyOrderAttribute(36)]
        [DisplayName("Tree Use Description")]
        [Description("Use Description property in separate tree for catalog item by default")]
        public bool UseDescriptionPropertyInSeparateTree // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDescriptionPropertyInSeparateTree; }
            set
            {
                if (this._UseDescriptionPropertyInSeparateTree != value)
                {
                    this.OnUseDescriptionPropertyInSeparateTreeChanging(ref value);
                    this._UseDescriptionPropertyInSeparateTree = value;
                    this.OnUseDescriptionPropertyInSeparateTreeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _UseDescriptionPropertyInSeparateTree;
        partial void OnUseDescriptionPropertyInSeparateTreeChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDescriptionPropertyInSeparateTreeChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListCatalogs.ListNodeGeneratorsSettings { get { return (this as GroupListCatalogs).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupDocumentsValidator : ValidatorBase<GroupDocuments, GroupDocumentsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupDocuments : ConfigObjectVmGenSettings<GroupDocuments, GroupDocumentsValidator>, IComparable<GroupDocuments>, IConfigAcceptVisitor, IGroupDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupDocuments(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupDocumentsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupSharedProperties = new GroupListProperties(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupListDocuments = new GroupListDocuments(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupDocuments Clone(ITreeConfigNode? parent, IGroupDocuments from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupDocuments vm = new GroupDocuments(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupSharedProperties = vSharpStudio.vm.ViewModels.GroupListProperties.Clone(vm, from.GroupSharedProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupListDocuments = vSharpStudio.vm.ViewModels.GroupListDocuments.Clone(vm, from.GroupListDocuments, isDeep);
            vm.UseDocCodeProperty = from.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MondayBeforeFirstDocDate = from.MondayBeforeFirstDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupDocuments to, IGroupDocuments from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PrefixForDbTables = from.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListProperties.Update((GroupListProperties)to.GroupSharedProperties, from.GroupSharedProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListDocuments.Update((GroupListDocuments)to.GroupListDocuments, from.GroupListDocuments, isDeep);
            to.UseDocCodeProperty = from.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MondayBeforeFirstDocDate = from.MondayBeforeFirstDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupDocuments Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupDocuments.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupDocuments from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupDocuments.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_documents' to 'GroupDocuments'
        public static GroupDocuments ConvertToVM(Proto.Config.proto_group_documents m, GroupDocuments vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PrefixForDbTables = m.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupSharedProperties == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupSharedProperties = new GroupListProperties(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToVM(m.GroupSharedProperties, (GroupListProperties)vm.GroupSharedProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupListDocuments == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupListDocuments = new GroupListDocuments(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListDocuments.ConvertToVM(m.GroupListDocuments, (GroupListDocuments)vm.GroupListDocuments); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.UseDocCodeProperty = (EnumUseType)m.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MondayBeforeFirstDocDate = m.MondayBeforeFirstDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDocDateProperty = (EnumUseType)m.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupDocuments' to 'proto_group_documents'
        public static Proto.Config.proto_group_documents ConvertToProto(GroupDocuments vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_documents m = new Proto.Config.proto_group_documents(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PrefixForDbTables = vm.PrefixForDbTables; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupSharedProperties = vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToProto((GroupListProperties)vm.GroupSharedProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupListDocuments = vSharpStudio.vm.ViewModels.GroupListDocuments.ConvertToProto((GroupListDocuments)vm.GroupListDocuments); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.UseDocCodeProperty = (Proto.Config.proto_enum_use_type)vm.UseDocCodeProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MondayBeforeFirstDocDate = vm.MondayBeforeFirstDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDocDateProperty = (Proto.Config.proto_enum_use_type)vm.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupSharedProperties.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupListDocuments.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Db prefix")]
        [Description("Prefix for document db table names. Used if set to use in config model")]
        public string PrefixForDbTables // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PrefixForDbTables; }
            set
            {
                if (this._PrefixForDbTables != value)
                {
                    this.OnPrefixForDbTablesChanging(ref value);
                    this._PrefixForDbTables = value;
                    this.OnPrefixForDbTablesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PrefixForDbTables = string.Empty;
        partial void OnPrefixForDbTablesChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixForDbTablesChanged();
        
        [Browsable(false)]
        [Description("Properties for all documents")]
        public GroupListProperties GroupSharedProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupSharedProperties; }
            set
            {
                if (this._GroupSharedProperties != value)
                {
                    this.OnGroupSharedPropertiesChanging(ref value);
                    this._GroupSharedProperties = value;
                    this.OnGroupSharedPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListProperties _GroupSharedProperties;
        IGroupListProperties IGroupDocuments.GroupSharedProperties { get { return (this as GroupDocuments).GroupSharedProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupSharedPropertiesChanging(ref GroupListProperties to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupSharedPropertiesChanged();
        //IGroupListProperties IGroupDocuments.GroupSharedProperties { get { return this._GroupSharedProperties; } }
        
        [Browsable(false)]
        public GroupListDocuments GroupListDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupListDocuments; }
            set
            {
                if (this._GroupListDocuments != value)
                {
                    this.OnGroupListDocumentsChanging(ref value);
                    this._GroupListDocuments = value;
                    this.OnGroupListDocumentsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListDocuments _GroupListDocuments;
        IGroupListDocuments IGroupDocuments.GroupListDocuments { get { return (this as GroupDocuments).GroupListDocuments; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupListDocumentsChanging(ref GroupListDocuments to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupListDocumentsChanged();
        //IGroupListDocuments IGroupDocuments.GroupListDocuments { get { return this._GroupListDocuments; } }
        
        [Category("")]
        [PropertyOrderAttribute(22)]
        [DisplayName("Use Code")]
        [Description("Use Code property for document by default")]
        public EnumUseType UseDocCodeProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocCodeProperty; }
            set
            {
                if (this._UseDocCodeProperty != value)
                {
                    this.OnUseDocCodePropertyChanging(ref value);
                    this._UseDocCodeProperty = value;
                    this.OnUseDocCodePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDocCodeProperty;
        partial void OnUseDocCodePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocCodePropertyChanged();
        
        [Category("")]
        [PropertyOrderAttribute(23)]
        [DisplayName("Monday Date")]
        [Description("Initial date of Monday for calculation of relative current day, week, month, year. Can be used for DocNumber uniqueness restrictions ")]
        [ReadOnly(true)]
        public Google.Protobuf.WellKnownTypes.Timestamp MondayBeforeFirstDocDate // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MondayBeforeFirstDocDate; }
            set
            {
                if (this._MondayBeforeFirstDocDate != value)
                {
                    this.OnMondayBeforeFirstDocDateChanging(ref value);
                    this._MondayBeforeFirstDocDate = value;
                    this.OnMondayBeforeFirstDocDateChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private Google.Protobuf.WellKnownTypes.Timestamp _MondayBeforeFirstDocDate = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(DateTime.MinValue.AddDays(1).ToUniversalTime());
        partial void OnMondayBeforeFirstDocDateChanging(ref Google.Protobuf.WellKnownTypes.Timestamp to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMondayBeforeFirstDocDateChanged();
        //IGoogle.Protobuf.WellKnownTypes.Timestamp IGroupDocuments.MondayBeforeFirstDocDate { get { return this._MondayBeforeFirstDocDate; } }
        
        [Category("")]
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Date")]
        [Description("Use Date property for document by default")]
        public EnumUseType UseDocDateProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocDateProperty; }
            set
            {
                if (this._UseDocDateProperty != value)
                {
                    this.OnUseDocDatePropertyChanging(ref value);
                    this._UseDocDateProperty = value;
                    this.OnUseDocDatePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDocDateProperty;
        partial void OnUseDocDatePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocDatePropertyChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupDocuments.ListNodeGeneratorsSettings { get { return (this as GroupDocuments).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class DocumentNumberPropertySettingsValidator : ValidatorBase<DocumentNumberPropertySettings, DocumentNumberPropertySettingsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class DocumentNumberPropertySettings : BaseSettings<DocumentNumberPropertySettings, DocumentNumberPropertySettingsValidator>, IDocumentNumberPropertySettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public DocumentNumberPropertySettings(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, DocumentNumberPropertySettingsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static DocumentNumberPropertySettings Clone(ITreeConfigNode? parent, IDocumentNumberPropertySettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            DocumentNumberPropertySettings vm = new DocumentNumberPropertySettings(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SequenceGuid = from.SequenceGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ScopeOfUnique = from.ScopeOfUnique; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ScopePeriodStartMonth = from.ScopePeriodStartMonth; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ScopePeriodStartMonthDay = from.ScopePeriodStartMonthDay; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(DocumentNumberPropertySettings to, IDocumentNumberPropertySettings from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.SequenceType = from.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.MaxSequenceLength = from.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Prefix = from.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SequenceGuid = from.SequenceGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ScopeOfUnique = from.ScopeOfUnique; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ScopePeriodStartMonth = from.ScopePeriodStartMonth; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ScopePeriodStartMonthDay = from.ScopePeriodStartMonthDay; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override DocumentNumberPropertySettings Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return DocumentNumberPropertySettings.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(DocumentNumberPropertySettings from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            DocumentNumberPropertySettings.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_document_number_property_settings' to 'DocumentNumberPropertySettings'
        public static DocumentNumberPropertySettings ConvertToVM(Proto.Config.proto_document_number_property_settings m, DocumentNumberPropertySettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.SequenceType = (EnumCodeType)m.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.MaxSequenceLength = m.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Prefix = m.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SequenceGuid = m.SequenceGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ScopeOfUnique = (EnumDocNumberUniqueScope)m.ScopeOfUnique; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ScopePeriodStartMonth = (EnumMonths)m.ScopePeriodStartMonth; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ScopePeriodStartMonthDay = m.ScopePeriodStartMonthDay; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'DocumentNumberPropertySettings' to 'proto_document_number_property_settings'
        public static Proto.Config.proto_document_number_property_settings ConvertToProto(DocumentNumberPropertySettings vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_document_number_property_settings m = new Proto.Config.proto_document_number_property_settings(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.SequenceType = (Proto.Config.proto_enum_code_type)vm.SequenceType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.MaxSequenceLength = vm.MaxSequenceLength; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Prefix = vm.Prefix; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SequenceGuid = vm.SequenceGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ScopeOfUnique = (Proto.Config.proto_enum_doc_number_unique_scope)vm.ScopeOfUnique; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.ScopePeriodStartMonth = (Proto.Config.proto_enum_months)vm.ScopePeriodStartMonth; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.ScopePeriodStartMonthDay = vm.ScopePeriodStartMonthDay; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [PropertyOrderAttribute(1)]
        [DisplayName("Sequence type")]
        [Description("Sequence type general settings")]
        public EnumCodeType SequenceType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SequenceType; }
            set
            {
                if (this._SequenceType != value)
                {
                    this.OnSequenceTypeChanging(ref value);
                    this._SequenceType = value;
                    this.OnSequenceTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumCodeType _SequenceType;
        partial void OnSequenceTypeChanging(ref EnumCodeType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSequenceTypeChanged();
        
        [PropertyOrderAttribute(2)]
        [DisplayName("Max Sequence")]
        [Description("Maximum number of character places for generated sequence numbers. Valid sequence numbers from 1 to 999, where number '9' is limited by this parameter")]
        public uint MaxSequenceLength // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._MaxSequenceLength; }
            set
            {
                if (this._MaxSequenceLength != value)
                {
                    this.OnMaxSequenceLengthChanging(ref value);
                    this._MaxSequenceLength = value;
                    this.OnMaxSequenceLengthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _MaxSequenceLength;
        partial void OnMaxSequenceLengthChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnMaxSequenceLengthChanged();
        
        [PropertyOrderAttribute(3)]
        [DisplayName("Prefix")]
        [Description("Prefix for text code sequence")]
        public string Prefix // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Prefix; }
            set
            {
                if (this._Prefix != value)
                {
                    this.OnPrefixChanging(ref value);
                    this._Prefix = value;
                    this.OnPrefixChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Prefix = string.Empty;
        partial void OnPrefixChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPrefixChanged();
        
        [PropertyOrderAttribute(0)]
        [DisplayName("Shared Sequence")]
        [Description("Shared DocNumber Sequence for auto generation. Same sequence can be used for different documents")]
        [Editor(typeof(EditorCodeSequenceSelection), typeof(EditorCodeSequenceSelection))]
        public string SequenceGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SequenceGuid; }
            set
            {
                if (this._SequenceGuid != value)
                {
                    this.OnSequenceGuidChanging(ref value);
                    this._SequenceGuid = value;
                    this.OnSequenceGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _SequenceGuid = string.Empty;
        partial void OnSequenceGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSequenceGuidChanged();
        
        [PropertyOrderAttribute(7)]
        [DisplayName("Unique Scope")]
        [Description("Code has to be unique in selected scope")]
        public EnumDocNumberUniqueScope ScopeOfUnique // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ScopeOfUnique; }
            set
            {
                if (this._ScopeOfUnique != value)
                {
                    this.OnScopeOfUniqueChanging(ref value);
                    this._ScopeOfUnique = value;
                    this.OnScopeOfUniqueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumDocNumberUniqueScope _ScopeOfUnique;
        partial void OnScopeOfUniqueChanging(ref EnumDocNumberUniqueScope to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnScopeOfUniqueChanged();
        
        [PropertyOrderAttribute(9)]
        [DisplayName("Start Month")]
        [Description("Start month of scope period")]
        public EnumMonths ScopePeriodStartMonth // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ScopePeriodStartMonth; }
            set
            {
                if (this._ScopePeriodStartMonth != value)
                {
                    this.OnScopePeriodStartMonthChanging(ref value);
                    this._ScopePeriodStartMonth = value;
                    this.OnScopePeriodStartMonthChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumMonths _ScopePeriodStartMonth;
        partial void OnScopePeriodStartMonthChanging(ref EnumMonths to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnScopePeriodStartMonthChanged();
        
        [PropertyOrderAttribute(10)]
        [DisplayName("Start Day")]
        [Description("Start month day of scope period")]
        public uint ScopePeriodStartMonthDay // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ScopePeriodStartMonthDay; }
            set
            {
                if (this._ScopePeriodStartMonthDay != value)
                {
                    this.OnScopePeriodStartMonthDayChanging(ref value);
                    this._ScopePeriodStartMonthDay = value;
                    this.OnScopePeriodStartMonthDayChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint _ScopePeriodStartMonthDay;
        partial void OnScopePeriodStartMonthDayChanging(ref uint to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnScopePeriodStartMonthDayChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        //partial void OnIsChangedChanged(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:133
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class DocumentValidator : ValidatorBase<Document, DocumentValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Document : ConfigObjectVmGenSettings<Document, DocumentValidator>, IComparable<Document>, IConfigAcceptVisitor, IDocument // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Document(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, DocumentValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GroupProperties = new GroupListProperties(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupDetails = new GroupListDetails(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupForms = new GroupListForms(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GroupReports = new GroupListReports(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._DocNumberPropertySettings = new DocumentNumberPropertySettings(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Document Clone(ITreeConfigNode? parent, IDocument from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Document vm = new Document(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.Clone(vm, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.Clone(vm, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.Clone(vm, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.Clone(vm, from.GroupReports, isDeep);
            vm.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.UseDocNumberProperty = from.UseDocNumberProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=False
                vm.DocNumberPropertySettings = vSharpStudio.vm.ViewModels.DocumentNumberPropertySettings.Clone(vm, from.DocNumberPropertySettings, isDeep);
            vm.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexYearDocNumberGuid = from.IndexYearDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexQuaterDocNumberGuid = from.IndexQuaterDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexMonthDocNumberGuid = from.IndexMonthDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexWeekDocNumberGuid = from.IndexWeekDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexDayDocNumberGuid = from.IndexDayDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexUniqueDocNumberGuid = from.IndexUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IndexNotUniqueDocNumberGuid = from.IndexNotUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDocNumberGuid = from.PropertyDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyDocDateGuid = from.PropertyDocDateGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleDocumentAccessSettings.Add(RoleDocumentAccess.Clone((RoleDocumentAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Document to, IDocument from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListProperties.Update((GroupListProperties)to.GroupProperties, from.GroupProperties, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListDetails.Update((GroupListDetails)to.GroupDetails, from.GroupDetails, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListForms.Update((GroupListForms)to.GroupForms, from.GroupForms, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.GroupListReports.Update((GroupListReports)to.GroupReports, from.GroupReports, isDeep);
            to.ShortId = from.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.UseDocNumberProperty = from.UseDocNumberProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.DocumentNumberPropertySettings.Update((DocumentNumberPropertySettings)to.DocNumberPropertySettings, from.DocNumberPropertySettings, isDeep);
            to.UseDocDateProperty = from.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexYearDocNumberGuid = from.IndexYearDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexQuaterDocNumberGuid = from.IndexQuaterDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexMonthDocNumberGuid = from.IndexMonthDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexWeekDocNumberGuid = from.IndexWeekDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexDayDocNumberGuid = from.IndexDayDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexUniqueDocNumberGuid = from.IndexUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IndexNotUniqueDocNumberGuid = from.IndexNotUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyIdGuid = from.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDocNumberGuid = from.PropertyDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyDocDateGuid = from.PropertyDocDateGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.PropertyVersionGuid = from.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleDocumentAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleDocumentAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleDocumentAccess.Update((RoleDocumentAccess)t, (RoleDocumentAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleDocumentAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleDocumentAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleDocumentAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleDocumentAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleDocumentAccess.Update(p, (RoleDocumentAccess)tt, isDeep);
                        to.ListRoleDocumentAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Document Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Document.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Document from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Document.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_document' to 'Document'
        public static Document ConvertToVM(Proto.Config.proto_document m, Document vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GroupProperties == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupProperties = new GroupListProperties(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToVM(m.GroupProperties, (GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupDetails == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupDetails = new GroupListDetails(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToVM(m.GroupDetails, (GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupForms == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupForms = new GroupListForms(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListForms.ConvertToVM(m.GroupForms, (GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GroupReports == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GroupReports = new GroupListReports(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.GroupListReports.ConvertToVM(m.GroupReports, (GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ShortId = m.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.UseDocNumberProperty = (EnumUseType)m.UseDocNumberProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.DocNumberPropertySettings == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.DocNumberPropertySettings = new DocumentNumberPropertySettings(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.DocumentNumberPropertySettings.ConvertToVM(m.DocNumberPropertySettings, (DocumentNumberPropertySettings)vm.DocNumberPropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.UseDocDateProperty = (EnumUseType)m.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexYearDocNumberGuid = m.IndexYearDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexQuaterDocNumberGuid = m.IndexQuaterDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexMonthDocNumberGuid = m.IndexMonthDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexWeekDocNumberGuid = m.IndexWeekDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexDayDocNumberGuid = m.IndexDayDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexUniqueDocNumberGuid = m.IndexUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IndexNotUniqueDocNumberGuid = m.IndexNotUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyIdGuid = m.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDocNumberGuid = m.PropertyDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyDocDateGuid = m.PropertyDocDateGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.PropertyVersionGuid = m.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleDocumentAccess.ConvertToVM(t, new RoleDocumentAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleDocumentAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Document' to 'proto_document'
        public static Proto.Config.proto_document ConvertToProto(Document vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_document m = new Proto.Config.proto_document(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.GroupProperties = vSharpStudio.vm.ViewModels.GroupListProperties.ConvertToProto((GroupListProperties)vm.GroupProperties); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupDetails = vSharpStudio.vm.ViewModels.GroupListDetails.ConvertToProto((GroupListDetails)vm.GroupDetails); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupForms = vSharpStudio.vm.ViewModels.GroupListForms.ConvertToProto((GroupListForms)vm.GroupForms); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GroupReports = vSharpStudio.vm.ViewModels.GroupListReports.ConvertToProto((GroupListReports)vm.GroupReports); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.ShortId = vm.ShortId; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.UseDocNumberProperty = (Proto.Config.proto_enum_use_type)vm.UseDocNumberProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.DocNumberPropertySettings = vSharpStudio.vm.ViewModels.DocumentNumberPropertySettings.ConvertToProto((DocumentNumberPropertySettings)vm.DocNumberPropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.UseDocDateProperty = (Proto.Config.proto_enum_use_type)vm.UseDocDateProperty; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IndexYearDocNumberGuid = vm.IndexYearDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexQuaterDocNumberGuid = vm.IndexQuaterDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexMonthDocNumberGuid = vm.IndexMonthDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexWeekDocNumberGuid = vm.IndexWeekDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexDayDocNumberGuid = vm.IndexDayDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexUniqueDocNumberGuid = vm.IndexUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IndexNotUniqueDocNumberGuid = vm.IndexNotUniqueDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyIdGuid = vm.PropertyIdGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDocNumberGuid = vm.PropertyDocNumberGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyDocDateGuid = vm.PropertyDocDateGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.PropertyVersionGuid = vm.PropertyVersionGuid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleDocumentAccessSettings.Add(RoleDocumentAccess.ConvertToProto((RoleDocumentAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GroupProperties.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupDetails.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupForms.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GroupReports.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.DocNumberPropertySettings.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListRoleDocumentAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public GroupListProperties GroupProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupProperties; }
            set
            {
                if (this._GroupProperties != value)
                {
                    this.OnGroupPropertiesChanging(ref value);
                    this._GroupProperties = value;
                    this.OnGroupPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListProperties _GroupProperties;
        IGroupListProperties IDocument.GroupProperties { get { return (this as Document).GroupProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupPropertiesChanging(ref GroupListProperties to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupPropertiesChanged();
        //IGroupListProperties IDocument.GroupProperties { get { return this._GroupProperties; } }
        
        [Browsable(false)]
        public GroupListDetails GroupDetails // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupDetails; }
            set
            {
                if (this._GroupDetails != value)
                {
                    this.OnGroupDetailsChanging(ref value);
                    this._GroupDetails = value;
                    this.OnGroupDetailsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListDetails _GroupDetails;
        IGroupListDetails IDocument.GroupDetails { get { return (this as Document).GroupDetails; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupDetailsChanging(ref GroupListDetails to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupDetailsChanged();
        //IGroupListDetails IDocument.GroupDetails { get { return this._GroupDetails; } }
        
        [Browsable(false)]
        public GroupListForms GroupForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupForms; }
            set
            {
                if (this._GroupForms != value)
                {
                    this.OnGroupFormsChanging(ref value);
                    this._GroupForms = value;
                    this.OnGroupFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListForms _GroupForms;
        IGroupListForms IDocument.GroupForms { get { return (this as Document).GroupForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupFormsChanging(ref GroupListForms to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupFormsChanged();
        //IGroupListForms IDocument.GroupForms { get { return this._GroupForms; } }
        
        [Browsable(false)]
        public GroupListReports GroupReports // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupReports; }
            set
            {
                if (this._GroupReports != value)
                {
                    this.OnGroupReportsChanging(ref value);
                    this._GroupReports = value;
                    this.OnGroupReportsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private GroupListReports _GroupReports;
        IGroupListReports IDocument.GroupReports { get { return (this as Document).GroupReports; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGroupReportsChanging(ref GroupListReports to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupReportsChanged();
        //IGroupListReports IDocument.GroupReports { get { return this._GroupReports; } }
        
        [Browsable(false)]
        public int ShortId // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortId; }
            set
            {
                if (this._ShortId != value)
                {
                    this.OnShortIdChanging(ref value);
                    this._ShortId = value;
                    this.OnShortIdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private int _ShortId;
        partial void OnShortIdChanging(ref int to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdChanged();
        
        [PropertyOrderAttribute(21)]
        [DisplayName("Use Number")]
        [Description("Use DocNumber property for document")]
        public EnumUseType UseDocNumberProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocNumberProperty; }
            set
            {
                if (this._UseDocNumberProperty != value)
                {
                    this.OnUseDocNumberPropertyChanging(ref value);
                    this._UseDocNumberProperty = value;
                    this.OnUseDocNumberPropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDocNumberProperty;
        partial void OnUseDocNumberPropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocNumberPropertyChanged();
        
        [PropertyOrderAttribute(22)]
        [DisplayName("Code")]
        [Description("Code property settings for Document")]
        [Editor(typeof(EditorPropertyGridDialog), typeof(EditorPropertyGridDialog))]
        public DocumentNumberPropertySettings DocNumberPropertySettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DocNumberPropertySettings; }
            set
            {
                if (this._DocNumberPropertySettings != value)
                {
                    this.OnDocNumberPropertySettingsChanging(ref value);
                    this._DocNumberPropertySettings = value;
                    this.OnDocNumberPropertySettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private DocumentNumberPropertySettings _DocNumberPropertySettings;
        IDocumentNumberPropertySettings IDocument.DocNumberPropertySettings { get { return (this as Document).DocNumberPropertySettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnDocNumberPropertySettingsChanging(ref DocumentNumberPropertySettings to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDocNumberPropertySettingsChanged();
        //IDocumentNumberPropertySettings IDocument.DocNumberPropertySettings { get { return this._DocNumberPropertySettings; } }
        
        [PropertyOrderAttribute(24)]
        [DisplayName("Use Date")]
        [Description("Use Date property for document")]
        public EnumUseType UseDocDateProperty // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._UseDocDateProperty; }
            set
            {
                if (this._UseDocDateProperty != value)
                {
                    this.OnUseDocDatePropertyChanging(ref value);
                    this._UseDocDateProperty = value;
                    this.OnUseDocDatePropertyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _UseDocDateProperty;
        partial void OnUseDocDatePropertyChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnUseDocDatePropertyChanged();
        
        // unique index of special field YEAR and DocNumber
        // YEAR = DocDate.Year
        [Browsable(false)]
        public string IndexYearDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexYearDocNumberGuid; }
            set
            {
                if (this._IndexYearDocNumberGuid != value)
                {
                    this.OnIndexYearDocNumberGuidChanging(ref value);
                    this._IndexYearDocNumberGuid = value;
                    this.OnIndexYearDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexYearDocNumberGuid = string.Empty;
        partial void OnIndexYearDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexYearDocNumberGuidChanged();
        
        // unique index of special field QUATER and DocNumber
        // QUATER = DocDate.Year * 4 + DocDate.Month / 3
        [Browsable(false)]
        public string IndexQuaterDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexQuaterDocNumberGuid; }
            set
            {
                if (this._IndexQuaterDocNumberGuid != value)
                {
                    this.OnIndexQuaterDocNumberGuidChanging(ref value);
                    this._IndexQuaterDocNumberGuid = value;
                    this.OnIndexQuaterDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexQuaterDocNumberGuid = string.Empty;
        partial void OnIndexQuaterDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexQuaterDocNumberGuidChanged();
        
        // unique index of special field MONTH and DocNumber
        // MONTH = DocDate.Year * 12 + DocDate.Month
        [Browsable(false)]
        public string IndexMonthDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexMonthDocNumberGuid; }
            set
            {
                if (this._IndexMonthDocNumberGuid != value)
                {
                    this.OnIndexMonthDocNumberGuidChanging(ref value);
                    this._IndexMonthDocNumberGuid = value;
                    this.OnIndexMonthDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexMonthDocNumberGuid = string.Empty;
        partial void OnIndexMonthDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexMonthDocNumberGuidChanged();
        
        // unique index of special field WEEK and DocNumber
        // WEEK = DocDate.Year * (365???) + DocDate.Month / 3
        [Browsable(false)]
        public string IndexWeekDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexWeekDocNumberGuid; }
            set
            {
                if (this._IndexWeekDocNumberGuid != value)
                {
                    this.OnIndexWeekDocNumberGuidChanging(ref value);
                    this._IndexWeekDocNumberGuid = value;
                    this.OnIndexWeekDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexWeekDocNumberGuid = string.Empty;
        partial void OnIndexWeekDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexWeekDocNumberGuidChanged();
        
        // unique index of special field Day and DocNumber
        // DAY = DocDate.Year * 365?? + DocDate.Day
        [Browsable(false)]
        public string IndexDayDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexDayDocNumberGuid; }
            set
            {
                if (this._IndexDayDocNumberGuid != value)
                {
                    this.OnIndexDayDocNumberGuidChanging(ref value);
                    this._IndexDayDocNumberGuid = value;
                    this.OnIndexDayDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexDayDocNumberGuid = string.Empty;
        partial void OnIndexDayDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexDayDocNumberGuidChanged();
        
        [Browsable(false)]
        public string IndexUniqueDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexUniqueDocNumberGuid; }
            set
            {
                if (this._IndexUniqueDocNumberGuid != value)
                {
                    this.OnIndexUniqueDocNumberGuidChanging(ref value);
                    this._IndexUniqueDocNumberGuid = value;
                    this.OnIndexUniqueDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexUniqueDocNumberGuid = string.Empty;
        partial void OnIndexUniqueDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexUniqueDocNumberGuidChanged();
        
        [Browsable(false)]
        public string IndexNotUniqueDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IndexNotUniqueDocNumberGuid; }
            set
            {
                if (this._IndexNotUniqueDocNumberGuid != value)
                {
                    this.OnIndexNotUniqueDocNumberGuidChanging(ref value);
                    this._IndexNotUniqueDocNumberGuid = value;
                    this.OnIndexNotUniqueDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _IndexNotUniqueDocNumberGuid = string.Empty;
        partial void OnIndexNotUniqueDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIndexNotUniqueDocNumberGuidChanged();
        
        [Browsable(false)]
        public string PropertyIdGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyIdGuid; }
            set
            {
                if (this._PropertyIdGuid != value)
                {
                    this.OnPropertyIdGuidChanging(ref value);
                    this._PropertyIdGuid = value;
                    this.OnPropertyIdGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyIdGuid = string.Empty;
        partial void OnPropertyIdGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyIdGuidChanged();
        
        [Browsable(false)]
        public string PropertyDocNumberGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDocNumberGuid; }
            set
            {
                if (this._PropertyDocNumberGuid != value)
                {
                    this.OnPropertyDocNumberGuidChanging(ref value);
                    this._PropertyDocNumberGuid = value;
                    this.OnPropertyDocNumberGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDocNumberGuid = string.Empty;
        partial void OnPropertyDocNumberGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDocNumberGuidChanged();
        
        [Browsable(false)]
        public string PropertyDocDateGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyDocDateGuid; }
            set
            {
                if (this._PropertyDocDateGuid != value)
                {
                    this.OnPropertyDocDateGuidChanging(ref value);
                    this._PropertyDocDateGuid = value;
                    this.OnPropertyDocDateGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyDocDateGuid = string.Empty;
        partial void OnPropertyDocDateGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyDocDateGuidChanged();
        
        [Browsable(false)]
        public string PropertyVersionGuid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._PropertyVersionGuid; }
            set
            {
                if (this._PropertyVersionGuid != value)
                {
                    this.OnPropertyVersionGuidChanging(ref value);
                    this._PropertyVersionGuid = value;
                    this.OnPropertyVersionGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _PropertyVersionGuid = string.Empty;
        partial void OnPropertyVersionGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnPropertyVersionGuidChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleDocumentAccess> ListRoleDocumentAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleDocumentAccessSettings; }
            set
            {
                if (this._ListRoleDocumentAccessSettings != value)
                {
                    this.OnListRoleDocumentAccessSettingsChanging(value);
                    _ListRoleDocumentAccessSettings = value;
                    this.OnListRoleDocumentAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleDocumentAccess> _ListRoleDocumentAccessSettings;
        IReadOnlyList<IRoleDocumentAccess> IDocument.ListRoleDocumentAccessSettings { get { return (this as Document).ListRoleDocumentAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleDocumentAccessSettingsChanging(ObservableCollection<RoleDocumentAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleDocumentAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IDocument.ListNodeGeneratorsSettings { get { return (this as Document).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_document
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListDocumentsValidator : ValidatorBase<GroupListDocuments, GroupListDocumentsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class GroupListDocuments : ConfigObjectVmGenSettings<GroupListDocuments, GroupListDocumentsValidator>, IComparable<GroupListDocuments>, IConfigAcceptVisitor, IGroupListDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListDocuments(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListDocumentsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListDocuments = new ConfigNodesCollection<Document>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Document)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListDocuments.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListDocuments Clone(ITreeConfigNode? parent, IGroupListDocuments from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListDocuments vm = new GroupListDocuments(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListDocuments = new ConfigNodesCollection<Document>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListDocuments.Add(Document.Clone(vm, (Document)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListRoleDocumentAccessSettings.Add(RoleDocumentAccess.Clone((RoleDocumentAccess)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListDocuments to, IGroupListDocuments from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.ShortIdTypeForCacheKey = from.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListDocuments.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListDocuments)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Document.Update((Document)t, (Document)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListDocuments.Remove(t);
                }
                foreach (var tt in from.ListDocuments)
                {
                    bool isfound = false;
                    foreach (var t in to.ListDocuments.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Document(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Document.Update(p, (Document)tt, isDeep);
                        to.ListDocuments.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRoleDocumentAccessSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRoleDocumentAccessSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            RoleDocumentAccess.Update((RoleDocumentAccess)t, (RoleDocumentAccess)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRoleDocumentAccessSettings.Remove(t);
                }
                foreach (var tt in from.ListRoleDocumentAccessSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRoleDocumentAccessSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new RoleDocumentAccess(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        RoleDocumentAccess.Update(p, (RoleDocumentAccess)tt, isDeep);
                        to.ListRoleDocumentAccessSettings.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListDocuments Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListDocuments.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListDocuments from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListDocuments.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_documents' to 'GroupListDocuments'
        public static GroupListDocuments ConvertToVM(Proto.Config.proto_group_list_documents m, GroupListDocuments vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ShortIdTypeForCacheKey = m.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListDocuments = new ConfigNodesCollection<Document>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Document.ConvertToVM(t, new Document(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListDocuments.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRoleDocumentAccessSettings = new ObservableCollectionWithActions<RoleDocumentAccess>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = RoleDocumentAccess.ConvertToVM(t, new RoleDocumentAccess()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListRoleDocumentAccessSettings.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListDocuments' to 'proto_group_list_documents'
        public static Proto.Config.proto_group_list_documents ConvertToProto(GroupListDocuments vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_documents m = new Proto.Config.proto_group_list_documents(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.ShortIdTypeForCacheKey = vm.ShortIdTypeForCacheKey; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListDocuments.Add(Document.ConvertToProto((Document)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRoleDocumentAccessSettings.Add(RoleDocumentAccess.ConvertToProto((RoleDocumentAccess)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListDocuments)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListRoleDocumentAccessSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [PropertyOrderAttribute(6)]
        [DisplayName("Short ID")]
        [Description("Short document type ID for cache key generator")]
        public string ShortIdTypeForCacheKey // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._ShortIdTypeForCacheKey; }
            set
            {
                if (this._ShortIdTypeForCacheKey != value)
                {
                    this.OnShortIdTypeForCacheKeyChanging(ref value);
                    this._ShortIdTypeForCacheKey = value;
                    this.OnShortIdTypeForCacheKeyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _ShortIdTypeForCacheKey = string.Empty;
        partial void OnShortIdTypeForCacheKeyChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnShortIdTypeForCacheKeyChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<Document> ListDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListDocuments; }
            set
            {
                if (this._ListDocuments != value)
                {
                    this.OnListDocumentsChanging(value);
                    _ListDocuments = value;
                    this.OnListDocumentsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Document> _ListDocuments;
        IReadOnlyList<IDocument> IGroupListDocuments.ListDocuments { get { return (this as GroupListDocuments).ListDocuments; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListDocumentsChanging(ObservableCollection<Document> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListDocumentsChanged();
        public Document this[int index] { get { return (Document)this.ListDocuments[index]; } }
        IDocument IGroupListDocuments.this[int index] { get { return (Document)this.ListDocuments[index]; } }
        public void Add(Document item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListDocuments.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Document> items) 
        { 
            Debug.Assert(items != null);
            this.ListDocuments.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListDocuments.Count; }
        int IGroupListDocuments.Count() { return this.Count(); }
        public void Remove(Document item) 
        {
            Debug.Assert(item != null);
            this.ListDocuments.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<RoleDocumentAccess> ListRoleDocumentAccessSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRoleDocumentAccessSettings; }
            set
            {
                if (this._ListRoleDocumentAccessSettings != value)
                {
                    this.OnListRoleDocumentAccessSettingsChanging(value);
                    _ListRoleDocumentAccessSettings = value;
                    this.OnListRoleDocumentAccessSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<RoleDocumentAccess> _ListRoleDocumentAccessSettings;
        IReadOnlyList<IRoleDocumentAccess> IGroupListDocuments.ListRoleDocumentAccessSettings { get { return (this as GroupListDocuments).ListRoleDocumentAccessSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRoleDocumentAccessSettingsChanging(ObservableCollection<RoleDocumentAccess> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRoleDocumentAccessSettingsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListDocuments.ListNodeGeneratorsSettings { get { return (this as GroupListDocuments).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListJournalsValidator : ValidatorBase<GroupListJournals, GroupListJournalsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // J O U R N A L
    // @exclude
    // ####################################### J O U R N A L ##########################################
    public partial class GroupListJournals : ConfigObjectVmGenSettings<GroupListJournals, GroupListJournalsValidator>, IComparable<GroupListJournals>, IConfigAcceptVisitor, IGroupListJournals // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListJournals(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListJournalsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListJournals = new ConfigNodesCollection<Journal>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Journal)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListJournals.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListJournals Clone(ITreeConfigNode? parent, IGroupListJournals from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListJournals vm = new GroupListJournals(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListJournals = new ConfigNodesCollection<Journal>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListJournals) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListJournals.Add(Journal.Clone(vm, (Journal)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListJournals to, IGroupListJournals from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListJournals.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListJournals)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Journal.Update((Journal)t, (Journal)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListJournals.Remove(t);
                }
                foreach (var tt in from.ListJournals)
                {
                    bool isfound = false;
                    foreach (var t in to.ListJournals.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Journal(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Journal.Update(p, (Journal)tt, isDeep);
                        to.ListJournals.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListJournals Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListJournals.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListJournals from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListJournals.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_journals' to 'GroupListJournals'
        public static GroupListJournals ConvertToVM(Proto.Config.proto_group_list_journals m, GroupListJournals vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListJournals = new ConfigNodesCollection<Journal>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListJournals) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Journal.ConvertToVM(t, new Journal(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListJournals.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListJournals' to 'proto_group_list_journals'
        public static Proto.Config.proto_group_list_journals ConvertToProto(GroupListJournals vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_journals m = new Proto.Config.proto_group_list_journals(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListJournals) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListJournals.Add(Journal.ConvertToProto((Journal)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListJournals)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // repeated proto_property list_shared_properties = 6;
        [Browsable(false)]
        public ConfigNodesCollection<Journal> ListJournals // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListJournals; }
            set
            {
                if (this._ListJournals != value)
                {
                    this.OnListJournalsChanging(value);
                    _ListJournals = value;
                    this.OnListJournalsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Journal> _ListJournals;
        IReadOnlyList<IJournal> IGroupListJournals.ListJournals { get { return (this as GroupListJournals).ListJournals; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListJournalsChanging(ObservableCollection<Journal> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListJournalsChanged();
        public Journal this[int index] { get { return (Journal)this.ListJournals[index]; } }
        IJournal IGroupListJournals.this[int index] { get { return (Journal)this.ListJournals[index]; } }
        public void Add(Journal item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListJournals.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Journal> items) 
        { 
            Debug.Assert(items != null);
            this.ListJournals.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListJournals.Count; }
        int IGroupListJournals.Count() { return this.Count(); }
        public void Remove(Journal item) 
        {
            Debug.Assert(item != null);
            this.ListJournals.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListJournals.ListNodeGeneratorsSettings { get { return (this as GroupListJournals).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class JournalValidator : ValidatorBase<Journal, JournalValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Journal : ConfigObjectVmGenSettings<Journal, JournalValidator>, IComparable<Journal>, IConfigAcceptVisitor, IJournal // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Journal(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, JournalValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListDocuments = new ConfigNodesCollection<Document>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListSelectedDocsWithProperties = new ObservableCollectionWithActions<DocInJournal>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Document)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListDocuments.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Journal Clone(ITreeConfigNode? parent, IJournal from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Journal vm = new Journal(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListDocuments = new ConfigNodesCollection<Document>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListDocuments.Add(Document.Clone(vm, (Document)t, isDeep));
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListSelectedDocsWithProperties = new ObservableCollectionWithActions<DocInJournal>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:52
            foreach (var t in from.ListSelectedDocsWithProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:53
                vm.ListSelectedDocsWithProperties.Add(DocInJournal.Clone((DocInJournal)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Journal to, IJournal from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListDocuments.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListDocuments)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Document.Update((Document)t, (Document)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListDocuments.Remove(t);
                }
                foreach (var tt in from.ListDocuments)
                {
                    bool isfound = false;
                    foreach (var t in to.ListDocuments.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Document(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Document.Update(p, (Document)tt, isDeep);
                        to.ListDocuments.Add(p);
                    }
                }
            }
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortable = from.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridSortableCustom = from.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsGridFilterable = from.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListSelectedDocsWithProperties.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListSelectedDocsWithProperties)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            DocInJournal.Update((DocInJournal)t, (DocInJournal)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListSelectedDocsWithProperties.Remove(t);
                }
                foreach (var tt in from.ListSelectedDocsWithProperties)
                {
                    bool isfound = false;
                    foreach (var t in to.ListSelectedDocsWithProperties.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new DocInJournal(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:122
                        DocInJournal.Update(p, (DocInJournal)tt, isDeep);
                        to.ListSelectedDocsWithProperties.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Journal Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Journal.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Journal from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Journal.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_journal' to 'Journal'
        public static Journal ConvertToVM(Proto.Config.proto_journal m, Journal vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListDocuments = new ConfigNodesCollection<Document>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Document.ConvertToVM(t, new Document(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListDocuments.Add(tvm);
            }
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortable = (EnumUseType)m.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridSortableCustom = (EnumUseType)m.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsGridFilterable = (EnumUseType)m.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListSelectedDocsWithProperties = new ObservableCollectionWithActions<DocInJournal>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:205
            foreach (var t in m.ListSelectedDocsWithProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:206
            {
                var tvm = DocInJournal.ConvertToVM(t, new DocInJournal()); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:208
                vm.ListSelectedDocsWithProperties.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Journal' to 'proto_journal'
        public static Proto.Config.proto_journal ConvertToProto(Journal vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_journal m = new Proto.Config.proto_journal(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListDocuments) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListDocuments.Add(Document.ConvertToProto((Document)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsGridSortable = (Proto.Config.proto_enum_use_type)vm.IsGridSortable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridSortableCustom = (Proto.Config.proto_enum_use_type)vm.IsGridSortableCustom; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsGridFilterable = (Proto.Config.proto_enum_use_type)vm.IsGridFilterable; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            foreach (var t in vm.ListSelectedDocsWithProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListSelectedDocsWithProperties.Add(DocInJournal.ConvertToProto((DocInJournal)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListDocuments)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListSelectedDocsWithProperties)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // repeated proto_group_properties list_properties = 6;
        [Browsable(false)]
        public ConfigNodesCollection<Document> ListDocuments // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListDocuments; }
            set
            {
                if (this._ListDocuments != value)
                {
                    this.OnListDocumentsChanging(value);
                    _ListDocuments = value;
                    this.OnListDocumentsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Document> _ListDocuments;
        IReadOnlyList<IDocument> IJournal.ListDocuments { get { return (this as Journal).ListDocuments; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListDocumentsChanging(ObservableCollection<Document> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListDocumentsChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Sortable")]
        [Description("Sortable in data grid")]
        public EnumUseType IsGridSortable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortable; }
            set
            {
                if (this._IsGridSortable != value)
                {
                    this.OnIsGridSortableChanging(ref value);
                    this._IsGridSortable = value;
                    this.OnIsGridSortableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortable;
        partial void OnIsGridSortableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Custom Sortable")]
        [Description("Custom sortable in data grid by using custom function")]
        public EnumUseType IsGridSortableCustom // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridSortableCustom; }
            set
            {
                if (this._IsGridSortableCustom != value)
                {
                    this.OnIsGridSortableCustomChanging(ref value);
                    this._IsGridSortableCustom = value;
                    this.OnIsGridSortableCustomChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridSortableCustom;
        partial void OnIsGridSortableCustomChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridSortableCustomChanged();
        
        [Category("Auto Layout")]
        [DisplayName("Filterable")]
        [Description("Filterable in data grid")]
        public EnumUseType IsGridFilterable // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsGridFilterable; }
            set
            {
                if (this._IsGridFilterable != value)
                {
                    this.OnIsGridFilterableChanging(ref value);
                    this._IsGridFilterable = value;
                    this.OnIsGridFilterableChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsGridFilterable;
        partial void OnIsGridFilterableChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsGridFilterableChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<DocInJournal> ListSelectedDocsWithProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListSelectedDocsWithProperties; }
            set
            {
                if (this._ListSelectedDocsWithProperties != value)
                {
                    this.OnListSelectedDocsWithPropertiesChanging(value);
                    _ListSelectedDocsWithProperties = value;
                    this.OnListSelectedDocsWithPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<DocInJournal> _ListSelectedDocsWithProperties;
        IReadOnlyList<IDocInJournal> IJournal.ListSelectedDocsWithProperties { get { return (this as Journal).ListSelectedDocsWithProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListSelectedDocsWithPropertiesChanging(ObservableCollection<DocInJournal> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListSelectedDocsWithPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IJournal.ListNodeGeneratorsSettings { get { return (this as Journal).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_journal
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class DocInJournalValidator : ValidatorBase<DocInJournal, DocInJournalValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class DocInJournal : VmValidatableWithSeverity<DocInJournal, DocInJournalValidator>, IDocInJournal // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public DocInJournal() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public DocInJournal() 
            : base(DocInJournalValidator.Validator) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this._ListPropertyGuids = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:61
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static DocInJournal Clone(IDocInJournal from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            DocInJournal vm = new DocInJournal(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            foreach (var t in from.ListPropertyGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListPropertyGuids.Add(t);
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(DocInJournal to, IDocInJournal from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
                to.ListPropertyGuids.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListPropertyGuids)
                {
                    to.ListPropertyGuids.Add(tt);
                }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override DocInJournal Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            return DocInJournal.Clone(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:160
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(DocInJournal from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            DocInJournal.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_doc_in_journal' to 'DocInJournal'
        public static DocInJournal ConvertToVM(Proto.Config.proto_doc_in_journal m, DocInJournal vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListPropertyGuids = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListPropertyGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListPropertyGuids.Add(t);
            }
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'DocInJournal' to 'proto_doc_in_journal'
        public static Proto.Config.proto_doc_in_journal ConvertToProto(DocInJournal vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_doc_in_journal m = new Proto.Config.proto_doc_in_journal(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListPropertyGuids) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListPropertyGuids.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public ObservableCollectionWithActions<string> ListPropertyGuids // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListPropertyGuids; }
            set
            {
                if (this._ListPropertyGuids != value)
                {
                    this.OnListPropertyGuidsChanging(value);
                    _ListPropertyGuids = value;
                    this.OnListPropertyGuidsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListPropertyGuids;
        IReadOnlyList<string> IDocInJournal.ListPropertyGuids { get { return (this as DocInJournal).ListPropertyGuids; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListPropertyGuidsChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListPropertyGuidsChanged();
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListFormsValidator : ValidatorBase<GroupListForms, GroupListFormsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // F O R M S
    // @exclude
    // ####################################### F O R M S ##########################################
    public partial class GroupListForms : ConfigObjectVmGenSettings<GroupListForms, GroupListFormsValidator>, IComparable<GroupListForms>, IConfigAcceptVisitor, IGroupListForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListForms(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListFormsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListForms = new ConfigNodesCollection<Form>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Form)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListForms.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListForms Clone(ITreeConfigNode? parent, IGroupListForms from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListForms vm = new GroupListForms(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListForms = new ConfigNodesCollection<Form>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListForms.Add(Form.Clone(vm, (Form)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListForms to, IGroupListForms from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListForms.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListForms)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Form.Update((Form)t, (Form)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListForms.Remove(t);
                }
                foreach (var tt in from.ListForms)
                {
                    bool isfound = false;
                    foreach (var t in to.ListForms.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Form(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Form.Update(p, (Form)tt, isDeep);
                        to.ListForms.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListForms Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListForms.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListForms from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListForms.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_forms' to 'GroupListForms'
        public static GroupListForms ConvertToVM(Proto.Config.proto_group_list_forms m, GroupListForms vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListForms = new ConfigNodesCollection<Form>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Form.ConvertToVM(t, new Form(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListForms.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListForms' to 'proto_group_list_forms'
        public static Proto.Config.proto_group_list_forms ConvertToProto(GroupListForms vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_forms m = new Proto.Config.proto_group_list_forms(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListForms) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListForms.Add(Form.ConvertToProto((Form)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListForms)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // repeated proto_property list_shared_properties = 6;
        [Browsable(false)]
        public ConfigNodesCollection<Form> ListForms // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListForms; }
            set
            {
                if (this._ListForms != value)
                {
                    this.OnListFormsChanging(value);
                    _ListForms = value;
                    this.OnListFormsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Form> _ListForms;
        IReadOnlyList<IForm> IGroupListForms.ListForms { get { return (this as GroupListForms).ListForms; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListFormsChanging(ObservableCollection<Form> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListFormsChanged();
        public Form this[int index] { get { return (Form)this.ListForms[index]; } }
        IForm IGroupListForms.this[int index] { get { return (Form)this.ListForms[index]; } }
        public void Add(Form item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListForms.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Form> items) 
        { 
            Debug.Assert(items != null);
            this.ListForms.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListForms.Count; }
        int IGroupListForms.Count() { return this.Count(); }
        public void Remove(Form item) 
        {
            Debug.Assert(item != null);
            this.ListForms.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListForms.ListNodeGeneratorsSettings { get { return (this as GroupListForms).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormValidator : ValidatorBase<Form, FormValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children collection can contain:
    //   - Children of Grid System
    public partial class Form : ConfigObjectVmGenSettings<Form, FormValidator>, IComparable<Form>, IConfigAcceptVisitor, IForm // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Form(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._GridSystem = new FormGridSystem(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListGuidViewProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListGuidViewFolderProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Form Clone(ITreeConfigNode? parent, IForm from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Form vm = new Form(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseCode = from.IsUseCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseName = from.IsUseName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseDesc = from.IsUseDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseFolderCode = from.IsUseFolderCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseFolderName = from.IsUseFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseFolderDesc = from.IsUseFolderDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsUseDocDate = from.IsUseDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsDummy = from.IsDummy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.EnumFormType = from.EnumFormType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GridSystem = vSharpStudio.vm.ViewModels.FormGridSystem.Clone(vm, from.GridSystem, isDeep);
            foreach (var t in from.ListGuidViewProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidViewProperties.Add(t);
            foreach (var t in from.ListGuidViewFolderProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidViewFolderProperties.Add(t);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Form to, IForm from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseCode = from.IsUseCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseName = from.IsUseName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseDesc = from.IsUseDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseFolderCode = from.IsUseFolderCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseFolderName = from.IsUseFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseFolderDesc = from.IsUseFolderDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsUseDocDate = from.IsUseDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsDummy = from.IsDummy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.EnumFormType = from.EnumFormType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormGridSystem.Update((FormGridSystem)to.GridSystem, from.GridSystem, isDeep);
                to.ListGuidViewProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidViewProperties)
                {
                    to.ListGuidViewProperties.Add(tt);
                }
                to.ListGuidViewFolderProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidViewFolderProperties)
                {
                    to.ListGuidViewFolderProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Form Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Form.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Form from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Form.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form' to 'Form'
        public static Form ConvertToVM(Proto.Config.proto_form m, Form vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseCode = (EnumUseType)m.IsUseCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseName = (EnumUseType)m.IsUseName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseDesc = (EnumUseType)m.IsUseDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseFolderCode = (EnumUseType)m.IsUseFolderCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseFolderName = (EnumUseType)m.IsUseFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseFolderDesc = (EnumUseType)m.IsUseFolderDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsUseDocDate = (EnumUseType)m.IsUseDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsDummy = m.IsDummy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.EnumFormType = (FormType)m.EnumFormType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.GridSystem == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GridSystem = new FormGridSystem(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormGridSystem.ConvertToVM(m.GridSystem, (FormGridSystem)vm.GridSystem); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListGuidViewProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidViewProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidViewProperties.Add(t);
            }
            vm.ListGuidViewFolderProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidViewFolderProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidViewFolderProperties.Add(t);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Form' to 'proto_form'
        public static Proto.Config.proto_form ConvertToProto(Form vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form m = new Proto.Config.proto_form(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsUseCode = (Proto.Config.proto_enum_use_type)vm.IsUseCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseName = (Proto.Config.proto_enum_use_type)vm.IsUseName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseDesc = (Proto.Config.proto_enum_use_type)vm.IsUseDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseFolderCode = (Proto.Config.proto_enum_use_type)vm.IsUseFolderCode; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseFolderName = (Proto.Config.proto_enum_use_type)vm.IsUseFolderName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseFolderDesc = (Proto.Config.proto_enum_use_type)vm.IsUseFolderDesc; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsUseDocDate = (Proto.Config.proto_enum_use_type)vm.IsUseDocDate; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.IsDummy = vm.IsDummy; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.EnumFormType = (Proto.Config.proto_form_type)vm.EnumFormType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.GridSystem = vSharpStudio.vm.ViewModels.FormGridSystem.ConvertToProto((FormGridSystem)vm.GridSystem); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListGuidViewProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidViewProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListGuidViewFolderProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidViewFolderProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.GridSystem.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(1)]
        [DisplayName("Code")]
        [Description("Use catalog item code for list view")]
        public EnumUseType IsUseCode // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseCode; }
            set
            {
                if (this._IsUseCode != value)
                {
                    this.OnIsUseCodeChanging(ref value);
                    this._IsUseCode = value;
                    this.OnIsUseCodeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseCode;
        partial void OnIsUseCodeChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseCodeChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(2)]
        [DisplayName("Name")]
        [Description("Use catalog item name for list view")]
        public EnumUseType IsUseName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseName; }
            set
            {
                if (this._IsUseName != value)
                {
                    this.OnIsUseNameChanging(ref value);
                    this._IsUseName = value;
                    this.OnIsUseNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseName;
        partial void OnIsUseNameChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseNameChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(3)]
        [DisplayName("Description")]
        [Description("Use catalog item description for list view")]
        public EnumUseType IsUseDesc // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseDesc; }
            set
            {
                if (this._IsUseDesc != value)
                {
                    this.OnIsUseDescChanging(ref value);
                    this._IsUseDesc = value;
                    this.OnIsUseDescChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseDesc;
        partial void OnIsUseDescChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseDescChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(11)]
        [DisplayName("Folder Code")]
        [Description("Use catalog folder code for list view")]
        public EnumUseType IsUseFolderCode // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseFolderCode; }
            set
            {
                if (this._IsUseFolderCode != value)
                {
                    this.OnIsUseFolderCodeChanging(ref value);
                    this._IsUseFolderCode = value;
                    this.OnIsUseFolderCodeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseFolderCode;
        partial void OnIsUseFolderCodeChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseFolderCodeChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(12)]
        [DisplayName("Folder Name")]
        [Description("Use catalog folder name for list view")]
        public EnumUseType IsUseFolderName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseFolderName; }
            set
            {
                if (this._IsUseFolderName != value)
                {
                    this.OnIsUseFolderNameChanging(ref value);
                    this._IsUseFolderName = value;
                    this.OnIsUseFolderNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseFolderName;
        partial void OnIsUseFolderNameChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseFolderNameChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(13)]
        [DisplayName("Folder Desc")]
        [Description("Use catalog folder description for list view")]
        public EnumUseType IsUseFolderDesc // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseFolderDesc; }
            set
            {
                if (this._IsUseFolderDesc != value)
                {
                    this.OnIsUseFolderDescChanging(ref value);
                    this._IsUseFolderDesc = value;
                    this.OnIsUseFolderDescChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseFolderDesc;
        partial void OnIsUseFolderDescChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseFolderDescChanged();
        
        [Category("List form")]
        [PropertyOrderAttribute(15)]
        [DisplayName("Doc Date")]
        [Description("Use document date for list view")]
        public EnumUseType IsUseDocDate // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsUseDocDate; }
            set
            {
                if (this._IsUseDocDate != value)
                {
                    this.OnIsUseDocDateChanging(ref value);
                    this._IsUseDocDate = value;
                    this.OnIsUseDocDateChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumUseType _IsUseDocDate;
        partial void OnIsUseDocDateChanging(ref EnumUseType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsUseDocDateChanged();
        
        [Category("Edit form")]
        [PropertyOrderAttribute(15)]
        [DisplayName("???")]
        [Description("Not implemented")]
        public bool IsDummy // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsDummy; }
            set
            {
                if (this._IsDummy != value)
                {
                    this.OnIsDummyChanging(ref value);
                    this._IsDummy = value;
                    this.OnIsDummyChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsDummy;
        partial void OnIsDummyChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsDummyChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Form type")]
        [Description("Form type")]
        public FormType EnumFormType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._EnumFormType; }
            set
            {
                if (this._EnumFormType != value)
                {
                    this.OnEnumFormTypeChanging(ref value);
                    this._EnumFormType = value;
                    this.OnEnumFormTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormType _EnumFormType;
        partial void OnEnumFormTypeChanging(ref FormType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnEnumFormTypeChanged();
        
        [Browsable(false)]
        public FormGridSystem GridSystem // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GridSystem; }
            set
            {
                if (this._GridSystem != value)
                {
                    this.OnGridSystemChanging(ref value);
                    this._GridSystem = value;
                    this.OnGridSystemChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormGridSystem _GridSystem;
        IFormGridSystem IForm.GridSystem { get { return (this as Form).GridSystem; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGridSystemChanging(ref FormGridSystem to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGridSystemChanged();
        //IFormGridSystem IForm.GridSystem { get { return this._GridSystem; } }
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidViewProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidViewProperties; }
            set
            {
                if (this._ListGuidViewProperties != value)
                {
                    this.OnListGuidViewPropertiesChanging(value);
                    _ListGuidViewProperties = value;
                    this.OnListGuidViewPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidViewProperties;
        IReadOnlyList<string> IForm.ListGuidViewProperties { get { return (this as Form).ListGuidViewProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidViewPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidViewPropertiesChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidViewFolderProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidViewFolderProperties; }
            set
            {
                if (this._ListGuidViewFolderProperties != value)
                {
                    this.OnListGuidViewFolderPropertiesChanging(value);
                    _ListGuidViewFolderProperties = value;
                    this.OnListGuidViewFolderPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidViewFolderProperties;
        IReadOnlyList<string> IForm.ListGuidViewFolderProperties { get { return (this as Form).ListGuidViewFolderProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidViewFolderPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidViewFolderPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IForm.ListNodeGeneratorsSettings { get { return (this as Form).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormGridSystemValidator : ValidatorBase<FormGridSystem, FormGridSystemValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children are collection of Grid System Rows 
    public partial class FormGridSystem : ConfigObjectVmGenSettings<FormGridSystem, FormGridSystemValidator>, IComparable<FormGridSystem>, IConfigAcceptVisitor, IFormGridSystem // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormGridSystem(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormGridSystemValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListRows = new ConfigNodesCollection<FormGridSystemRow>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(FormGridSystemRow)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListRows.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormGridSystem Clone(ITreeConfigNode? parent, IFormGridSystem from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormGridSystem vm = new FormGridSystem(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListRows = new ConfigNodesCollection<FormGridSystemRow>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListRows) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListRows.Add(FormGridSystemRow.Clone(vm, (FormGridSystemRow)t, isDeep));
            foreach (var t in from.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidProperties.Add(t);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormGridSystem to, IFormGridSystem from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListRows.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListRows)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            FormGridSystemRow.Update((FormGridSystemRow)t, (FormGridSystemRow)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListRows.Remove(t);
                }
                foreach (var tt in from.ListRows)
                {
                    bool isfound = false;
                    foreach (var t in to.ListRows.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new FormGridSystemRow(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        FormGridSystemRow.Update(p, (FormGridSystemRow)tt, isDeep);
                        to.ListRows.Add(p);
                    }
                }
            }
                to.ListGuidProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidProperties)
                {
                    to.ListGuidProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormGridSystem Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormGridSystem.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormGridSystem from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormGridSystem.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_grid_system' to 'FormGridSystem'
        public static FormGridSystem ConvertToVM(Proto.Config.proto_form_grid_system m, FormGridSystem vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListRows = new ConfigNodesCollection<FormGridSystemRow>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListRows) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = FormGridSystemRow.ConvertToVM(t, new FormGridSystemRow(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListRows.Add(tvm);
            }
            vm.ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidProperties.Add(t);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormGridSystem' to 'proto_form_grid_system'
        public static Proto.Config.proto_form_grid_system ConvertToProto(FormGridSystem vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_grid_system m = new Proto.Config.proto_form_grid_system(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListRows) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListRows.Add(FormGridSystemRow.ConvertToProto((FormGridSystemRow)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListRows)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<FormGridSystemRow> ListRows // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListRows; }
            set
            {
                if (this._ListRows != value)
                {
                    this.OnListRowsChanging(value);
                    _ListRows = value;
                    this.OnListRowsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<FormGridSystemRow> _ListRows;
        IReadOnlyList<IFormGridSystemRow> IFormGridSystem.ListRows { get { return (this as FormGridSystem).ListRows; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListRowsChanging(ObservableCollection<FormGridSystemRow> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListRowsChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidProperties; }
            set
            {
                if (this._ListGuidProperties != value)
                {
                    this.OnListGuidPropertiesChanging(value);
                    _ListGuidProperties = value;
                    this.OnListGuidPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidProperties;
        IReadOnlyList<string> IFormGridSystem.ListGuidProperties { get { return (this as FormGridSystem).ListGuidProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormGridSystem.ListNodeGeneratorsSettings { get { return (this as FormGridSystem).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_grid_system
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormGridSystemRowValidator : ValidatorBase<FormGridSystemRow, FormGridSystemRowValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children are collection of Grid System Columns 
    public partial class FormGridSystemRow : ConfigObjectVmGenSettings<FormGridSystemRow, FormGridSystemRowValidator>, IComparable<FormGridSystemRow>, IConfigAcceptVisitor, IFormGridSystemRow // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormGridSystemRow(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormGridSystemRowValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListColumns = new ConfigNodesCollection<FormGridSystemColumn>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(FormGridSystemColumn)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListColumns.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormGridSystemRow Clone(ITreeConfigNode? parent, IFormGridSystemRow from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormGridSystemRow vm = new FormGridSystemRow(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListColumns = new ConfigNodesCollection<FormGridSystemColumn>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListColumns) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListColumns.Add(FormGridSystemColumn.Clone(vm, (FormGridSystemColumn)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormGridSystemRow to, IFormGridSystemRow from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListColumns.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListColumns)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            FormGridSystemColumn.Update((FormGridSystemColumn)t, (FormGridSystemColumn)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListColumns.Remove(t);
                }
                foreach (var tt in from.ListColumns)
                {
                    bool isfound = false;
                    foreach (var t in to.ListColumns.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new FormGridSystemColumn(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        FormGridSystemColumn.Update(p, (FormGridSystemColumn)tt, isDeep);
                        to.ListColumns.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormGridSystemRow Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormGridSystemRow.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormGridSystemRow from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormGridSystemRow.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_grid_system_row' to 'FormGridSystemRow'
        public static FormGridSystemRow ConvertToVM(Proto.Config.proto_form_grid_system_row m, FormGridSystemRow vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListColumns = new ConfigNodesCollection<FormGridSystemColumn>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListColumns) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = FormGridSystemColumn.ConvertToVM(t, new FormGridSystemColumn(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListColumns.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormGridSystemRow' to 'proto_form_grid_system_row'
        public static Proto.Config.proto_form_grid_system_row ConvertToProto(FormGridSystemRow vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_grid_system_row m = new Proto.Config.proto_form_grid_system_row(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListColumns) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListColumns.Add(FormGridSystemColumn.ConvertToProto((FormGridSystemColumn)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListColumns)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<FormGridSystemColumn> ListColumns // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListColumns; }
            set
            {
                if (this._ListColumns != value)
                {
                    this.OnListColumnsChanging(value);
                    _ListColumns = value;
                    this.OnListColumnsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<FormGridSystemColumn> _ListColumns;
        IReadOnlyList<IFormGridSystemColumn> IFormGridSystemRow.ListColumns { get { return (this as FormGridSystemRow).ListColumns; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListColumnsChanging(ObservableCollection<FormGridSystemColumn> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListColumnsChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormGridSystemRow.ListNodeGeneratorsSettings { get { return (this as FormGridSystemRow).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_grid_system_row
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormGridSystemColumnValidator : ValidatorBase<FormGridSystemColumn, FormGridSystemColumnValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children are collection of Auto Layout Block children
    public partial class FormGridSystemColumn : ConfigObjectVmGenSettings<FormGridSystemColumn, FormGridSystemColumnValidator>, IComparable<FormGridSystemColumn>, IConfigAcceptVisitor, IFormGridSystemColumn // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormGridSystemColumn(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormGridSystemColumnValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._FormBlock = new FormAutoLayoutBlock(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormGridSystemColumn Clone(ITreeConfigNode? parent, IFormGridSystemColumn from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormGridSystemColumn vm = new FormGridSystemColumn(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.HideType = from.HideType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthXs = from.WidthXs; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthSm = from.WidthSm; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthMd = from.WidthMd; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthLg = from.WidthLg; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthXl = from.WidthXl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.WidthXx = from.WidthXx; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.FormBlock = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Clone(vm, from.FormBlock, isDeep);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormGridSystemColumn to, IFormGridSystemColumn from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.HideType = from.HideType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthXs = from.WidthXs; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthSm = from.WidthSm; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthMd = from.WidthMd; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthLg = from.WidthLg; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthXl = from.WidthXl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.WidthXx = from.WidthXx; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Update((FormAutoLayoutBlock)to.FormBlock, from.FormBlock, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormGridSystemColumn Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormGridSystemColumn.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormGridSystemColumn from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormGridSystemColumn.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_grid_system_column' to 'FormGridSystemColumn'
        public static FormGridSystemColumn ConvertToVM(Proto.Config.proto_form_grid_system_column m, FormGridSystemColumn vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.HideType = (EnumHiddenType)m.HideType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthXs = m.WidthXs; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthSm = m.WidthSm; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthMd = m.WidthMd; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthLg = m.WidthLg; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthXl = m.WidthXl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.WidthXx = m.WidthXx; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.FormBlock == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.FormBlock = new FormAutoLayoutBlock(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToVM(m.FormBlock, (FormAutoLayoutBlock)vm.FormBlock); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormGridSystemColumn' to 'proto_form_grid_system_column'
        public static Proto.Config.proto_form_grid_system_column ConvertToProto(FormGridSystemColumn vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_grid_system_column m = new Proto.Config.proto_form_grid_system_column(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.HideType = (Proto.Config.proto_enum_hidden_type)vm.HideType; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:275
            m.WidthXs = vm.WidthXs; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.WidthSm = vm.WidthSm; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.WidthMd = vm.WidthMd; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.WidthLg = vm.WidthLg; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.WidthXl = vm.WidthXl; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.WidthXx = vm.WidthXx; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.FormBlock = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToProto((FormAutoLayoutBlock)vm.FormBlock); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.FormBlock.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [DisplayName("When Hide")]
        [Description("Condition of hiding base on screen size")]
        public EnumHiddenType HideType // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._HideType; }
            set
            {
                if (this._HideType != value)
                {
                    this.OnHideTypeChanging(ref value);
                    this._HideType = value;
                    this.OnHideTypeChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private EnumHiddenType _HideType;
        partial void OnHideTypeChanging(ref EnumHiddenType to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnHideTypeChanged();
        
        [DisplayName("XS")]
        [Description("Extra small. Small to large phone. Range: < 600px")]
        public uint? WidthXs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthXs; }
            set
            {
                if (this._WidthXs != value)
                {
                    this.OnWidthXsChanging(ref value);
                    this._WidthXs = value;
                    this.OnWidthXsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthXs;
        partial void OnWidthXsChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthXsChanged();
        
        [DisplayName("SM")]
        [Description("Small. Small to medium tablet. Range: 600px > < 960px")]
        public uint? WidthSm // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthSm; }
            set
            {
                if (this._WidthSm != value)
                {
                    this.OnWidthSmChanging(ref value);
                    this._WidthSm = value;
                    this.OnWidthSmChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthSm;
        partial void OnWidthSmChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthSmChanged();
        
        [DisplayName("MD")]
        [Description("Medium. Large tablet to laptop. Range: 960px > < 1280px")]
        public uint? WidthMd // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthMd; }
            set
            {
                if (this._WidthMd != value)
                {
                    this.OnWidthMdChanging(ref value);
                    this._WidthMd = value;
                    this.OnWidthMdChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthMd;
        partial void OnWidthMdChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthMdChanged();
        
        [DisplayName("LG")]
        [Description("Large. Desktop. Range: 1280px > < 1920px")]
        public uint? WidthLg // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthLg; }
            set
            {
                if (this._WidthLg != value)
                {
                    this.OnWidthLgChanging(ref value);
                    this._WidthLg = value;
                    this.OnWidthLgChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthLg;
        partial void OnWidthLgChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthLgChanged();
        
        [DisplayName("XL")]
        [Description("Extra Large. HD and 4k. Range: 1920px > < 2560px")]
        public uint? WidthXl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthXl; }
            set
            {
                if (this._WidthXl != value)
                {
                    this.OnWidthXlChanging(ref value);
                    this._WidthXl = value;
                    this.OnWidthXlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthXl;
        partial void OnWidthXlChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthXlChanged();
        
        [DisplayName("XX")]
        [Description("Extra Extra Large. 4k+ and ultra-wide. Range: >= 2560px")]
        public uint? WidthXx // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._WidthXx; }
            set
            {
                if (this._WidthXx != value)
                {
                    this.OnWidthXxChanging(ref value);
                    this._WidthXx = value;
                    this.OnWidthXxChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private uint? _WidthXx;
        partial void OnWidthXxChanging(ref uint? to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnWidthXxChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public FormAutoLayoutBlock FormBlock // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._FormBlock; }
            set
            {
                if (this._FormBlock != value)
                {
                    this.OnFormBlockChanging(ref value);
                    this._FormBlock = value;
                    this.OnFormBlockChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormAutoLayoutBlock _FormBlock;
        IFormAutoLayoutBlock IFormGridSystemColumn.FormBlock { get { return (this as FormGridSystemColumn).FormBlock; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnFormBlockChanging(ref FormAutoLayoutBlock to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnFormBlockChanged();
        //IFormAutoLayoutBlock IFormGridSystemColumn.FormBlock { get { return this._FormBlock; } }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormGridSystemColumn.ListNodeGeneratorsSettings { get { return (this as FormGridSystemColumn).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_grid_system_column
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormAutoLayoutBlockValidator : ValidatorBase<FormAutoLayoutBlock, FormAutoLayoutBlockValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children collection can contain:
    //   - Fields
    //   - Data grids
    //   - Grid Systems
    //   - Tab Controls
    //   - Auto Layout Blocks
    public partial class FormAutoLayoutBlock : ConfigObjectVmGenSettings<FormAutoLayoutBlock, FormAutoLayoutBlockValidator>, IComparable<FormAutoLayoutBlock>, IConfigAcceptVisitor, IFormAutoLayoutBlock // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormAutoLayoutBlock(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormAutoLayoutBlockValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListFormAutoLayoutSubBlock = new ConfigNodesCollection<FormAutoLayoutSubBlock>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(FormAutoLayoutSubBlock)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListFormAutoLayoutSubBlock.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormAutoLayoutBlock Clone(ITreeConfigNode? parent, IFormAutoLayoutBlock from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormAutoLayoutBlock vm = new FormAutoLayoutBlock(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListFormAutoLayoutSubBlock = new ConfigNodesCollection<FormAutoLayoutSubBlock>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListFormAutoLayoutSubBlock) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListFormAutoLayoutSubBlock.Add(FormAutoLayoutSubBlock.Clone(vm, (FormAutoLayoutSubBlock)t, isDeep));
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormAutoLayoutBlock to, IFormAutoLayoutBlock from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListFormAutoLayoutSubBlock.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListFormAutoLayoutSubBlock)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            FormAutoLayoutSubBlock.Update((FormAutoLayoutSubBlock)t, (FormAutoLayoutSubBlock)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListFormAutoLayoutSubBlock.Remove(t);
                }
                foreach (var tt in from.ListFormAutoLayoutSubBlock)
                {
                    bool isfound = false;
                    foreach (var t in to.ListFormAutoLayoutSubBlock.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new FormAutoLayoutSubBlock(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        FormAutoLayoutSubBlock.Update(p, (FormAutoLayoutSubBlock)tt, isDeep);
                        to.ListFormAutoLayoutSubBlock.Add(p);
                    }
                }
            }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormAutoLayoutBlock Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormAutoLayoutBlock.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormAutoLayoutBlock from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormAutoLayoutBlock.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_auto_layout_block' to 'FormAutoLayoutBlock'
        public static FormAutoLayoutBlock ConvertToVM(Proto.Config.proto_form_auto_layout_block m, FormAutoLayoutBlock vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListFormAutoLayoutSubBlock = new ConfigNodesCollection<FormAutoLayoutSubBlock>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListFormAutoLayoutSubBlock) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = FormAutoLayoutSubBlock.ConvertToVM(t, new FormAutoLayoutSubBlock(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListFormAutoLayoutSubBlock.Add(tvm);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormAutoLayoutBlock' to 'proto_form_auto_layout_block'
        public static Proto.Config.proto_form_auto_layout_block ConvertToProto(FormAutoLayoutBlock vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_auto_layout_block m = new Proto.Config.proto_form_auto_layout_block(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListFormAutoLayoutSubBlock) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListFormAutoLayoutSubBlock.Add(FormAutoLayoutSubBlock.ConvertToProto((FormAutoLayoutSubBlock)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListFormAutoLayoutSubBlock)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<FormAutoLayoutSubBlock> ListFormAutoLayoutSubBlock // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListFormAutoLayoutSubBlock; }
            set
            {
                if (this._ListFormAutoLayoutSubBlock != value)
                {
                    this.OnListFormAutoLayoutSubBlockChanging(value);
                    _ListFormAutoLayoutSubBlock = value;
                    this.OnListFormAutoLayoutSubBlockChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<FormAutoLayoutSubBlock> _ListFormAutoLayoutSubBlock;
        IReadOnlyList<IFormAutoLayoutSubBlock> IFormAutoLayoutBlock.ListFormAutoLayoutSubBlock { get { return (this as FormAutoLayoutBlock).ListFormAutoLayoutSubBlock; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListFormAutoLayoutSubBlockChanging(ObservableCollection<FormAutoLayoutSubBlock> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListFormAutoLayoutSubBlockChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormAutoLayoutBlock.ListNodeGeneratorsSettings { get { return (this as FormAutoLayoutBlock).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_auto_layout_block
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormAutoLayoutSubBlockValidator : ValidatorBase<FormAutoLayoutSubBlock, FormAutoLayoutSubBlockValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // https://learn.microsoft.com/en-us/aspnet/core/grpc/protobuf?view=aspnetcore-6.0
    public partial class FormAutoLayoutSubBlock : ConfigObjectVmGenSettings<FormAutoLayoutSubBlock, FormAutoLayoutSubBlockValidator>, IComparable<FormAutoLayoutSubBlock>, IConfigAcceptVisitor, IFormAutoLayoutSubBlock // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormAutoLayoutSubBlock(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormAutoLayoutSubBlockValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._TabControl = new FormTabControl(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._DataGridControl = new FormDataGrid(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._AutoLayoutBlockControl = new FormAutoLayoutBlock(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._FieldControl = new FormField(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._GridSystemControl = new FormGridSystem(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._TreeControl = new FormTree(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormAutoLayoutSubBlock Clone(ITreeConfigNode? parent, IFormAutoLayoutSubBlock from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormAutoLayoutSubBlock vm = new FormAutoLayoutSubBlock(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.TabControl = vSharpStudio.vm.ViewModels.FormTabControl.Clone(vm, from.TabControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.DataGridControl = vSharpStudio.vm.ViewModels.FormDataGrid.Clone(vm, from.DataGridControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.AutoLayoutBlockControl = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Clone(vm, from.AutoLayoutBlockControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.FieldControl = vSharpStudio.vm.ViewModels.FormField.Clone(vm, from.FieldControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.GridSystemControl = vSharpStudio.vm.ViewModels.FormGridSystem.Clone(vm, from.GridSystemControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.TreeControl = vSharpStudio.vm.ViewModels.FormTree.Clone(vm, from.TreeControl, isDeep);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormAutoLayoutSubBlock to, IFormAutoLayoutSubBlock from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormTabControl.Update((FormTabControl)to.TabControl, from.TabControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormDataGrid.Update((FormDataGrid)to.DataGridControl, from.DataGridControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Update((FormAutoLayoutBlock)to.AutoLayoutBlockControl, from.AutoLayoutBlockControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormField.Update((FormField)to.FieldControl, from.FieldControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormGridSystem.Update((FormGridSystem)to.GridSystemControl, from.GridSystemControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormTree.Update((FormTree)to.TreeControl, from.TreeControl, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormAutoLayoutSubBlock Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormAutoLayoutSubBlock.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormAutoLayoutSubBlock from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormAutoLayoutSubBlock.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_auto_layout_sub_block' to 'FormAutoLayoutSubBlock'
        public static FormAutoLayoutSubBlock ConvertToVM(Proto.Config.proto_form_auto_layout_sub_block m, FormAutoLayoutSubBlock vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            if (vm.TabControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.TabControl = new FormTabControl(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormTabControl.ConvertToVM(m.TabControl, (FormTabControl)vm.TabControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.DataGridControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.DataGridControl = new FormDataGrid(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormDataGrid.ConvertToVM(m.DataGridControl, (FormDataGrid)vm.DataGridControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.AutoLayoutBlockControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.AutoLayoutBlockControl = new FormAutoLayoutBlock(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToVM(m.AutoLayoutBlockControl, (FormAutoLayoutBlock)vm.AutoLayoutBlockControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.FieldControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.FieldControl = new FormField(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormField.ConvertToVM(m.FieldControl, (FormField)vm.FieldControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.GridSystemControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.GridSystemControl = new FormGridSystem(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormGridSystem.ConvertToVM(m.GridSystemControl, (FormGridSystem)vm.GridSystemControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            if (vm.TreeControl == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.TreeControl = new FormTree(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormTree.ConvertToVM(m.TreeControl, (FormTree)vm.TreeControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormAutoLayoutSubBlock' to 'proto_form_auto_layout_sub_block'
        public static Proto.Config.proto_form_auto_layout_sub_block ConvertToProto(FormAutoLayoutSubBlock vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_auto_layout_sub_block m = new Proto.Config.proto_form_auto_layout_sub_block(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.TabControl = vSharpStudio.vm.ViewModels.FormTabControl.ConvertToProto((FormTabControl)vm.TabControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.DataGridControl = vSharpStudio.vm.ViewModels.FormDataGrid.ConvertToProto((FormDataGrid)vm.DataGridControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.AutoLayoutBlockControl = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToProto((FormAutoLayoutBlock)vm.AutoLayoutBlockControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.FieldControl = vSharpStudio.vm.ViewModels.FormField.ConvertToProto((FormField)vm.FieldControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.GridSystemControl = vSharpStudio.vm.ViewModels.FormGridSystem.ConvertToProto((FormGridSystem)vm.GridSystemControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            m.TreeControl = vSharpStudio.vm.ViewModels.FormTree.ConvertToProto((FormTree)vm.TreeControl); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.TabControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.DataGridControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.AutoLayoutBlockControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.FieldControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.GridSystemControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            this.TreeControl.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        public FormTabControl TabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._TabControl; }
            set
            {
                if (this._TabControl != value)
                {
                    this.OnTabControlChanging(ref value);
                    this._TabControl = value;
                    this.OnTabControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormTabControl _TabControl;
        IFormTabControl IFormAutoLayoutSubBlock.TabControl { get { return (this as FormAutoLayoutSubBlock).TabControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnTabControlChanging(ref FormTabControl to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnTabControlChanged();
        //IFormTabControl IFormAutoLayoutSubBlock.TabControl { get { return this._TabControl; } }
        
        public FormDataGrid DataGridControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._DataGridControl; }
            set
            {
                if (this._DataGridControl != value)
                {
                    this.OnDataGridControlChanging(ref value);
                    this._DataGridControl = value;
                    this.OnDataGridControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormDataGrid _DataGridControl;
        IFormDataGrid IFormAutoLayoutSubBlock.DataGridControl { get { return (this as FormAutoLayoutSubBlock).DataGridControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnDataGridControlChanging(ref FormDataGrid to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDataGridControlChanged();
        //IFormDataGrid IFormAutoLayoutSubBlock.DataGridControl { get { return this._DataGridControl; } }
        
        public FormAutoLayoutBlock AutoLayoutBlockControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._AutoLayoutBlockControl; }
            set
            {
                if (this._AutoLayoutBlockControl != value)
                {
                    this.OnAutoLayoutBlockControlChanging(ref value);
                    this._AutoLayoutBlockControl = value;
                    this.OnAutoLayoutBlockControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormAutoLayoutBlock _AutoLayoutBlockControl;
        IFormAutoLayoutBlock IFormAutoLayoutSubBlock.AutoLayoutBlockControl { get { return (this as FormAutoLayoutSubBlock).AutoLayoutBlockControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnAutoLayoutBlockControlChanging(ref FormAutoLayoutBlock to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnAutoLayoutBlockControlChanged();
        //IFormAutoLayoutBlock IFormAutoLayoutSubBlock.AutoLayoutBlockControl { get { return this._AutoLayoutBlockControl; } }
        
        public FormField FieldControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._FieldControl; }
            set
            {
                if (this._FieldControl != value)
                {
                    this.OnFieldControlChanging(ref value);
                    this._FieldControl = value;
                    this.OnFieldControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormField _FieldControl;
        IFormField IFormAutoLayoutSubBlock.FieldControl { get { return (this as FormAutoLayoutSubBlock).FieldControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnFieldControlChanging(ref FormField to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnFieldControlChanged();
        //IFormField IFormAutoLayoutSubBlock.FieldControl { get { return this._FieldControl; } }
        
        public FormGridSystem GridSystemControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GridSystemControl; }
            set
            {
                if (this._GridSystemControl != value)
                {
                    this.OnGridSystemControlChanging(ref value);
                    this._GridSystemControl = value;
                    this.OnGridSystemControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormGridSystem _GridSystemControl;
        IFormGridSystem IFormAutoLayoutSubBlock.GridSystemControl { get { return (this as FormAutoLayoutSubBlock).GridSystemControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnGridSystemControlChanging(ref FormGridSystem to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGridSystemControlChanged();
        //IFormGridSystem IFormAutoLayoutSubBlock.GridSystemControl { get { return this._GridSystemControl; } }
        
        public FormTree TreeControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._TreeControl; }
            set
            {
                if (this._TreeControl != value)
                {
                    this.OnTreeControlChanging(ref value);
                    this._TreeControl = value;
                    this.OnTreeControlChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormTree _TreeControl;
        IFormTree IFormAutoLayoutSubBlock.TreeControl { get { return (this as FormAutoLayoutSubBlock).TreeControl; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnTreeControlChanging(ref FormTree to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnTreeControlChanged();
        //IFormTree IFormAutoLayoutSubBlock.TreeControl { get { return this._TreeControl; } }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormAutoLayoutSubBlock.ListNodeGeneratorsSettings { get { return (this as FormAutoLayoutSubBlock).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_auto_layout_sub_block
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormFieldValidator : ValidatorBase<FormField, FormFieldValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class FormField : ConfigObjectVmGenSettings<FormField, FormFieldValidator>, IComparable<FormField>, IConfigAcceptVisitor, IFormField // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormField(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormFieldValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormField Clone(ITreeConfigNode? parent, IFormField from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormField vm = new FormField(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormField to, IFormField from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormField Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormField.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormField from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormField.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_field' to 'FormField'
        public static FormField ConvertToVM(Proto.Config.proto_form_field m, FormField vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormField' to 'proto_form_field'
        public static Proto.Config.proto_form_field ConvertToProto(FormField vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_field m = new Proto.Config.proto_form_field(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormField.ListNodeGeneratorsSettings { get { return (this as FormField).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_field
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormTabControlTabValidator : ValidatorBase<FormTabControlTab, FormTabControlTabValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children are collection of Auto Layout Block children
    public partial class FormTabControlTab : ConfigObjectVmGenSettings<FormTabControlTab, FormTabControlTabValidator>, IComparable<FormTabControlTab>, IConfigAcceptVisitor, IFormTabControlTab // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormTabControlTab(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormTabControlTabValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._FormBlock = new FormAutoLayoutBlock(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:41
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormTabControlTab Clone(ITreeConfigNode? parent, IFormTabControlTab from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormTabControlTab vm = new FormTabControlTab(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            foreach (var t in from.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidProperties.Add(t);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:65 IsDefaultBase=True
                vm.FormBlock = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Clone(vm, from.FormBlock, isDeep);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormTabControlTab to, IFormTabControlTab from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
                to.ListGuidProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidProperties)
                {
                    to.ListGuidProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:141
                vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.Update((FormAutoLayoutBlock)to.FormBlock, from.FormBlock, isDeep);
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormTabControlTab Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormTabControlTab.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormTabControlTab from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormTabControlTab.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_tab_control_tab' to 'FormTabControlTab'
        public static FormTabControlTab ConvertToVM(Proto.Config.proto_form_tab_control_tab m, FormTabControlTab vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidProperties.Add(t);
            }
            if (vm.FormBlock == null) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:214
                vm.FormBlock = new FormAutoLayoutBlock(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:216
            vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToVM(m.FormBlock, (FormAutoLayoutBlock)vm.FormBlock); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:220
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormTabControlTab' to 'proto_form_tab_control_tab'
        public static Proto.Config.proto_form_tab_control_tab ConvertToProto(FormTabControlTab vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_tab_control_tab m = new Proto.Config.proto_form_tab_control_tab(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            m.FormBlock = vSharpStudio.vm.ViewModels.FormAutoLayoutBlock.ConvertToProto((FormAutoLayoutBlock)vm.FormBlock); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:271
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            this.FormBlock.AcceptConfigNodeVisitor(visitor); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:31
        
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidProperties; }
            set
            {
                if (this._ListGuidProperties != value)
                {
                    this.OnListGuidPropertiesChanging(value);
                    _ListGuidProperties = value;
                    this.OnListGuidPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidProperties;
        IReadOnlyList<string> IFormTabControlTab.ListGuidProperties { get { return (this as FormTabControlTab).ListGuidProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidPropertiesChanged();
        
        [Browsable(false)]
        public FormAutoLayoutBlock FormBlock // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._FormBlock; }
            set
            {
                if (this._FormBlock != value)
                {
                    this.OnFormBlockChanging(ref value);
                    this._FormBlock = value;
                    this.OnFormBlockChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private FormAutoLayoutBlock _FormBlock;
        IFormAutoLayoutBlock IFormTabControlTab.FormBlock { get { return (this as FormTabControlTab).FormBlock; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:78
        partial void OnFormBlockChanging(ref FormAutoLayoutBlock to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnFormBlockChanged();
        //IFormAutoLayoutBlock IFormTabControlTab.FormBlock { get { return this._FormBlock; } }
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormTabControlTab.ListNodeGeneratorsSettings { get { return (this as FormTabControlTab).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_tab_control_tab
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormTabControlValidator : ValidatorBase<FormTabControl, FormTabControlValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // Children are collection of Tab Control Tabs
    public partial class FormTabControl : ConfigObjectVmGenSettings<FormTabControl, FormTabControlValidator>, IComparable<FormTabControl>, IConfigAcceptVisitor, IFormTabControl // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormTabControl(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormTabControlValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListTabs = new ConfigNodesCollection<FormTabControlTab>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(FormTabControlTab)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListTabs.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormTabControl Clone(ITreeConfigNode? parent, IFormTabControl from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormTabControl vm = new FormTabControl(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListTabs = new ConfigNodesCollection<FormTabControlTab>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListTabs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListTabs.Add(FormTabControlTab.Clone(vm, (FormTabControlTab)t, isDeep));
            foreach (var t in from.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidProperties.Add(t);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormTabControl to, IFormTabControl from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListTabs.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListTabs)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            FormTabControlTab.Update((FormTabControlTab)t, (FormTabControlTab)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListTabs.Remove(t);
                }
                foreach (var tt in from.ListTabs)
                {
                    bool isfound = false;
                    foreach (var t in to.ListTabs.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new FormTabControlTab(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        FormTabControlTab.Update(p, (FormTabControlTab)tt, isDeep);
                        to.ListTabs.Add(p);
                    }
                }
            }
                to.ListGuidProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidProperties)
                {
                    to.ListGuidProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormTabControl Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormTabControl.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormTabControl from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormTabControl.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_tab_control' to 'FormTabControl'
        public static FormTabControl ConvertToVM(Proto.Config.proto_form_tab_control m, FormTabControl vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListTabs = new ConfigNodesCollection<FormTabControlTab>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListTabs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = FormTabControlTab.ConvertToVM(t, new FormTabControlTab(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListTabs.Add(tvm);
            }
            vm.ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidProperties.Add(t);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormTabControl' to 'proto_form_tab_control'
        public static Proto.Config.proto_form_tab_control ConvertToProto(FormTabControl vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_tab_control m = new Proto.Config.proto_form_tab_control(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListTabs) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListTabs.Add(FormTabControlTab.ConvertToProto((FormTabControlTab)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            foreach (var t in vm.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListTabs)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<FormTabControlTab> ListTabs // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListTabs; }
            set
            {
                if (this._ListTabs != value)
                {
                    this.OnListTabsChanging(value);
                    _ListTabs = value;
                    this.OnListTabsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<FormTabControlTab> _ListTabs;
        IReadOnlyList<IFormTabControlTab> IFormTabControl.ListTabs { get { return (this as FormTabControl).ListTabs; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListTabsChanging(ObservableCollection<FormTabControlTab> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListTabsChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidProperties; }
            set
            {
                if (this._ListGuidProperties != value)
                {
                    this.OnListGuidPropertiesChanging(value);
                    _ListGuidProperties = value;
                    this.OnListGuidPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidProperties;
        IReadOnlyList<string> IFormTabControl.ListGuidProperties { get { return (this as FormTabControl).ListGuidProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormTabControl.ListNodeGeneratorsSettings { get { return (this as FormTabControl).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_tab_control
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormDataGridValidator : ValidatorBase<FormDataGrid, FormDataGridValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // No Children
    public partial class FormDataGrid : ConfigObjectVmGenSettings<FormDataGrid, FormDataGridValidator>, IComparable<FormDataGrid>, IConfigAcceptVisitor, IFormDataGrid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormDataGrid(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormDataGridValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormDataGrid Clone(ITreeConfigNode? parent, IFormDataGrid from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormDataGrid vm = new FormDataGrid(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            foreach (var t in from.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidProperties.Add(t);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormDataGrid to, IFormDataGrid from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
                to.ListGuidProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidProperties)
                {
                    to.ListGuidProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormDataGrid Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormDataGrid.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormDataGrid from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormDataGrid.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_data_grid' to 'FormDataGrid'
        public static FormDataGrid ConvertToVM(Proto.Config.proto_form_data_grid m, FormDataGrid vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidProperties.Add(t);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormDataGrid' to 'proto_form_data_grid'
        public static Proto.Config.proto_form_data_grid ConvertToProto(FormDataGrid vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_data_grid m = new Proto.Config.proto_form_data_grid(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidProperties; }
            set
            {
                if (this._ListGuidProperties != value)
                {
                    this.OnListGuidPropertiesChanging(value);
                    _ListGuidProperties = value;
                    this.OnListGuidPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidProperties;
        IReadOnlyList<string> IFormDataGrid.ListGuidProperties { get { return (this as FormDataGrid).ListGuidProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormDataGrid.ListNodeGeneratorsSettings { get { return (this as FormDataGrid).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_data_grid
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class FormTreeValidator : ValidatorBase<FormTree, FormTreeValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // No Children
    public partial class FormTree : ConfigObjectVmGenSettings<FormTree, FormTreeValidator>, IComparable<FormTree>, IConfigAcceptVisitor, IFormTree // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public FormTree(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, FormTreeValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:36
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static FormTree Clone(ITreeConfigNode? parent, IFormTree from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            FormTree vm = new FormTree(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            foreach (var t in from.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:49
                vm.ListGuidProperties.Add(t);
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(FormTree to, IFormTree from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
                to.ListGuidProperties.Clear(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:130
                foreach (var tt in from.ListGuidProperties)
                {
                    to.ListGuidProperties.Add(tt);
                }
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override FormTree Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return FormTree.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(FormTree from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            FormTree.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_form_tree' to 'FormTree'
        public static FormTree ConvertToVM(Proto.Config.proto_form_tree m, FormTree vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListGuidProperties = new ObservableCollectionWithActions<string>(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:188
            foreach (var t in m.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:189
            {
                vm.ListGuidProperties.Add(t);
            }
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'FormTree' to 'proto_form_tree'
        public static Proto.Config.proto_form_tree ConvertToProto(FormTree vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_form_tree m = new Proto.Config.proto_form_tree(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListGuidProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListGuidProperties.Add(t); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:245
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [Description("Tab control name")]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(4)]
        [DisplayName("Desc")]
        [Description("Tab control description")]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        [Browsable(false)]
        public ObservableCollectionWithActions<string> ListGuidProperties // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListGuidProperties; }
            set
            {
                if (this._ListGuidProperties != value)
                {
                    this.OnListGuidPropertiesChanging(value);
                    _ListGuidProperties = value;
                    this.OnListGuidPropertiesChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ObservableCollectionWithActions<string> _ListGuidProperties;
        IReadOnlyList<string> IFormTree.ListGuidProperties { get { return (this as FormTree).ListGuidProperties; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListGuidPropertiesChanging(ObservableCollection<string> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListGuidPropertiesChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IFormTree.ListNodeGeneratorsSettings { get { return (this as FormTree).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_form_tree
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: False 
    public partial class GroupListReportsValidator : ValidatorBase<GroupListReports, GroupListReportsValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    // R E P O R T S
    // @exclude
    // ####################################### R E P O R T S ##########################################
    public partial class GroupListReports : ConfigObjectVmGenSettings<GroupListReports, GroupListReportsValidator>, IComparable<GroupListReports>, IConfigAcceptVisitor, IGroupListReports // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public GroupListReports(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, GroupListReportsValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListReports = new ConfigNodesCollection<Report>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(Report)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListReports.Sort();
            }
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static GroupListReports Clone(ITreeConfigNode? parent, IGroupListReports from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            GroupListReports vm = new GroupListReports(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListReports = new ConfigNodesCollection<Report>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListReports) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListReports.Add(Report.Clone(vm, (Report)t, isDeep));
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(GroupListReports to, IGroupListReports from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListReports.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListReports)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            Report.Update((Report)t, (Report)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListReports.Remove(t);
                }
                foreach (var tt in from.ListReports)
                {
                    bool isfound = false;
                    foreach (var t in to.ListReports.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new Report(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        Report.Update(p, (Report)tt, isDeep);
                        to.ListReports.Add(p);
                    }
                }
            }
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override GroupListReports Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return GroupListReports.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(GroupListReports from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            GroupListReports.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_group_list_reports' to 'GroupListReports'
        public static GroupListReports ConvertToVM(Proto.Config.proto_group_list_reports m, GroupListReports vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListReports = new ConfigNodesCollection<Report>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListReports) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = Report.ConvertToVM(t, new Report(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListReports.Add(tvm);
            }
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'GroupListReports' to 'proto_group_list_reports'
        public static Proto.Config.proto_group_list_reports ConvertToProto(GroupListReports vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_group_list_reports m = new Proto.Config.proto_group_list_reports(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListReports) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListReports.Add(Report.ConvertToProto((Report)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListReports)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        // repeated proto_property list_shared_properties = 6;
        [Browsable(false)]
        public ConfigNodesCollection<Report> ListReports // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListReports; }
            set
            {
                if (this._ListReports != value)
                {
                    this.OnListReportsChanging(value);
                    _ListReports = value;
                    this.OnListReportsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<Report> _ListReports;
        IReadOnlyList<IReport> IGroupListReports.ListReports { get { return (this as GroupListReports).ListReports; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListReportsChanging(ObservableCollection<Report> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListReportsChanged();
        public Report this[int index] { get { return (Report)this.ListReports[index]; } }
        IReport IGroupListReports.this[int index] { get { return (Report)this.ListReports[index]; } }
        public void Add(Report item) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:33
        { 
            Debug.Assert(item != null);
            this.ListReports.Add(item); 
            item.Parent = this;
        }
        public void AddRange(IEnumerable<Report> items) 
        { 
            Debug.Assert(items != null);
            this.ListReports.AddRange(items); 
            foreach (var t in items)
                t.Parent = this;
        }
        public int Count() { return this.ListReports.Count; }
        int IGroupListReports.Count() { return this.Count(); }
        public void Remove(Report item) 
        {
            Debug.Assert(item != null);
            this.ListReports.Remove(item); 
            item.Parent = null;
        }
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IGroupListReports.ListNodeGeneratorsSettings { get { return (this as GroupListReports).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: True 
    //      IsDefaultBase: True 
    // IsConfigObjectBase: True 
    //      IsGenSettings: True 
    //     IsBindableBase: True 
    //     IsEditableBase: True 
    //  IsValidatableBase: True 
    //    IsISortingValue: True 
    public partial class ReportValidator : ValidatorBase<Report, ReportValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class Report : ConfigObjectVmGenSettings<Report, ReportValidator>, IComparable<Report>, IConfigAcceptVisitor, IReport // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        public Report(ITreeConfigNode? parent) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:27
            : base(parent, ReportValidator.Validator)
        {
            this.IsNotifying = false;
            this.IsValidate = false;
            this.OnCreating();
            this._ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:38
            this.OnCreated();
            this.IsValidate = true;
            this.IsNotifying = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        
        public override void Sort(Type type) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:9
        {
            if (type == typeof(PluginGeneratorNodeSettings)) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:16
            {
                this.ListNodeGeneratorsSettings.Sort();
            }
        }
        public static Report Clone(ITreeConfigNode? parent, IReport from, bool isDeep = true, bool isNewGuid = false) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:29
        {
            Debug.Assert(from != null);
            Report vm = new Report(parent); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:36
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:56
            foreach (var t in from.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:57
                vm.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.Clone(vm, (PluginGeneratorNodeSettings)t, isDeep));
            if (isNewGuid) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:73
                vm.SetNewGuid();
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(Report to, IReport from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.SortingValue = from.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.NameUi = from.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Description = from.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsNew = from.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsMarkedForDeletion = from.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            if (isDeep) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:89
            {
                foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                {
                    bool isfound = false;
                    foreach (var tt in from.ListNodeGeneratorsSettings)
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            PluginGeneratorNodeSettings.Update((PluginGeneratorNodeSettings)t, (PluginGeneratorNodeSettings)tt, isDeep);
                            break;
                        }
                    }
                    if (!isfound)
                        to.ListNodeGeneratorsSettings.Remove(t);
                }
                foreach (var tt in from.ListNodeGeneratorsSettings)
                {
                    bool isfound = false;
                    foreach (var t in to.ListNodeGeneratorsSettings.ToList())
                    {
                        if (t.Guid == tt.Guid)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (!isfound)
                    {
                        var p = new PluginGeneratorNodeSettings(to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:120
                        PluginGeneratorNodeSettings.Update(p, (PluginGeneratorNodeSettings)tt, isDeep);
                        to.ListNodeGeneratorsSettings.Add(p);
                    }
                }
            }
        }
        // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:150
        #region IEditable
        public override Report Backup()
        {
            bool isDeep = true;
            this.OnBackupObjectStarting(ref isDeep);
            Debug.Assert(this is IConfig || this.Parent != null);
            return Report.Clone(this.Parent, this); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:158
        }
        partial void OnBackupObjectStarting(ref bool isDeep);
        public override void Restore(Report from)
        {
            bool isDeep = true;
            this.OnRestoreObjectStarting(ref isDeep);
            Report.Update(this, from, isDeep);
        }
        partial void OnRestoreObjectStarting(ref bool isDeep);
        #endregion IEditable
        // Conversion from 'proto_report' to 'Report'
        public static Report ConvertToVM(Proto.Config.proto_report m, Report vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.SortingValue = m.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.NameUi = m.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Description = m.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNew = m.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsMarkedForDeletion = m.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.ListNodeGeneratorsSettings = new ConfigNodesCollection<PluginGeneratorNodeSettings>(vm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:195
            foreach (var t in m.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:199
            {
                var tvm = PluginGeneratorNodeSettings.ConvertToVM(t, new PluginGeneratorNodeSettings(vm)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:201
                vm.ListNodeGeneratorsSettings.Add(tvm);
            }
            vm.OnInitFromDto(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:228
            vm.IsChanged = false;
            vm.IsHasChanged = false;
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'Report' to 'proto_report'
        public static Proto.Config.proto_report ConvertToProto(Report vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_report m = new Proto.Config.proto_report(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.SortingValue = vm.SortingValue; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.NameUi = vm.NameUi; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Description = vm.Description; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsNew = vm.IsNew; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsMarkedForDeletion = vm.IsMarkedForDeletion; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            foreach (var t in vm.ListNodeGeneratorsSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:243
                m.ListNodeGeneratorsSettings.Add(PluginGeneratorNodeSettings.ConvertToProto((PluginGeneratorNodeSettings)t)); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:247
            return m;
        }
        
        public void AcceptConfigNodeVisitor(ConfigVisitor visitor) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\AcceptNodeVisitor.tt Line:9
        {
            Debug.Assert(visitor != null);
            if (visitor.Token.IsCancellationRequested)
            {
                return;
            }
            visitor.Visit(this);
            foreach (var t in this.ListNodeGeneratorsSettings)
            {
                t.AcceptConfigNodeVisitor(visitor);
            }
            visitor.VisitEnd(this);
        }
        #endregion Procedures
        #region Properties
        
        [Category("")]
        [PropertyOrderAttribute(-2)]
        [ReadOnly(true)]
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        [Category("")]
        [PropertyOrderAttribute(1)]
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        [Browsable(false)]
        public ulong SortingValue // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._SortingValue; }
            set
            {
                if (this._SortingValue != value)
                {
                    this.OnSortingValueChanging(ref value);
                    this._SortingValue = value;
                    this.OnSortingValueChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnSortingValueChanging(ref ulong to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnSortingValueChanged();
        
        [Category("")]
        [PropertyOrderAttribute(2)]
        [DisplayName("UI name")]
        [Description("Used as label/name for UI")]
        public string NameUi // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._NameUi; }
            set
            {
                if (this._NameUi != value)
                {
                    this.OnNameUiChanging(ref value);
                    this._NameUi = value;
                    this.OnNameUiChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        partial void OnNameUiChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameUiChanged();
        
        [Category("")]
        [PropertyOrderAttribute(3)]
        public string Description // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(ref value);
                    this._Description = value;
                    this.OnDescriptionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private string _Description = string.Empty;
        partial void OnDescriptionChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnDescriptionChanged();
        
        [Browsable(false)]
        public bool IsNew // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsNew; }
            set
            {
                if (this._IsNew != value)
                {
                    this.OnIsNewChanging(ref value);
                    this._IsNew = value;
                    this.OnIsNewChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsNew;
        partial void OnIsNewChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsNewChanged();
        
        [DisplayName("For deletion")]
        [Description("Mark for deletion. Will be deleted during update if object is new, or will be trated as deprecated if exists in previous version")]
        public bool IsMarkedForDeletion // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsMarkedForDeletion; }
            set
            {
                if (this._IsMarkedForDeletion != value)
                {
                    this.OnIsMarkedForDeletionChanging(ref value);
                    this._IsMarkedForDeletion = value;
                    this.OnIsMarkedForDeletionChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                    this.IsChanged = true;
                }
            }
        }
        private bool _IsMarkedForDeletion;
        partial void OnIsMarkedForDeletionChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsMarkedForDeletionChanged();
        
        // repeated proto_group_properties list_properties = 6;
        // repeated proto_document list_documents = 7;
        [Browsable(false)]
        public ConfigNodesCollection<PluginGeneratorNodeSettings> ListNodeGeneratorsSettings // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:9
        { 
            get { return this._ListNodeGeneratorsSettings; }
            set
            {
                if (this._ListNodeGeneratorsSettings != value)
                {
                    this.OnListNodeGeneratorsSettingsChanging(value);
                    _ListNodeGeneratorsSettings = value;
                    this.OnListNodeGeneratorsSettingsChanged();
                    this.NotifyPropertyChanged();
                    this.ValidateProperty();
                }
            }
        }
        private ConfigNodesCollection<PluginGeneratorNodeSettings> _ListNodeGeneratorsSettings;
        IReadOnlyList<IPluginGeneratorNodeSettings> IReport.ListNodeGeneratorsSettings { get { return (this as Report).ListNodeGeneratorsSettings; } } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:27
        partial void OnListNodeGeneratorsSettingsChanging(ObservableCollection<PluginGeneratorNodeSettings> to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:28
        partial void OnListNodeGeneratorsSettingsChanged();
    /*
        [Browsable(false)]
        public override bool IsChanged // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:111
        { 
            get { return this._IsChanged; }
            set
            {
                if (VmBindable.IsNotifyingStatic && this.IsNotifying)
                {
                    if (this._IsChanged != value)
                    {
                        this.OnIsChangedChanging(ref value);
                        this._IsChanged = value;
                        this.OnIsChangedChanged();
                        this.NotifyPropertyChanged();
                    }
                }
            }
        }
        partial void OnIsChangedChanging(ref bool v); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:128
        */
        protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:131
        partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:136 proto_report
        partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
        #endregion Properties
    }
    // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:7
    //       IsWithParent: False 
    //      IsDefaultBase: False 
    // IsConfigObjectBase: False 
    //      IsGenSettings: False 
    //     IsBindableBase: True 
    //     IsEditableBase: False 
    //  IsValidatableBase: False 
    //    IsISortingValue: False 
    public partial class ModelRowValidator : ValidatorBase<ModelRow, ModelRowValidator> { } // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:16
    public partial class ModelRow : VmBindable, IModelRow // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:17
    {
        #region CTOR
        /*public ModelRow() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:21
        {
            this.OnCreating();
        }*/
        public ModelRow() // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Class.tt Line:52
        {
            this.IsValidate = false;
            this.OnCreating();
            this.OnCreated();
            this.IsValidate = true;
        }
        partial void OnCreating();
        partial void OnCreated();
        #endregion CTOR
        #region Procedures
        public static ModelRow Clone(IModelRow from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:31
        {
            Debug.Assert(from != null);
            ModelRow vm = new ModelRow(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:38
            vm.IsNotifying = false; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:40
            vm.IsValidate = false;
            vm.GroupName = from.GroupName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsIncluded = from.IsIncluded; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:68
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        public static void Update(ModelRow to, IModelRow from, bool isDeep = true) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:80
        {
            Debug.Assert(to != null);
            Debug.Assert(from != null);
            to.GroupName = from.GroupName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Name = from.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.Guid = from.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
            to.IsIncluded = from.IsIncluded; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:144
        }
        // Conversion from 'proto_model_row' to 'ModelRow'
        public static ModelRow ConvertToVM(Proto.Config.proto_model_row m, ModelRow vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:174
        {
            Debug.Assert(vm != null);
            if (m == null)
            {
                return vm;
            }
            vm.IsNotifying = false;
            vm.IsValidate = false;
            vm.GroupName = m.GroupName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Name = m.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.Guid = m.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsIncluded = m.IsIncluded; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:222
            vm.IsNotifying = true;
            vm.IsValidate = true;
            return vm;
        }
        // Conversion from 'ModelRow' to 'proto_model_row'
        public static Proto.Config.proto_model_row ConvertToProto(ModelRow vm) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:237
        {
            Debug.Assert(vm != null);
            Proto.Config.proto_model_row m = new Proto.Config.proto_model_row(); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:240
            m.GroupName = vm.GroupName; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Name = vm.Name; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.Guid = vm.Guid; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            m.IsIncluded = vm.IsIncluded; // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Clone.tt Line:277
            return m;
        }
        #endregion Procedures
        #region Properties
        
        public string GroupName // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._GroupName; }
            set
            {
                if (this._GroupName != value)
                {
                    this.OnGroupNameChanging(ref value);
                    this._GroupName = value;
                    this.OnGroupNameChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _GroupName = string.Empty;
        partial void OnGroupNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGroupNameChanged();
        
        public string Name // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(ref value);
                    this._Name = value;
                    this.OnNameChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Name = string.Empty;
        partial void OnNameChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnNameChanged();
        
        public string Guid // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._Guid; }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(ref value);
                    this._Guid = value;
                    this.OnGuidChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private string _Guid = string.Empty;
        partial void OnGuidChanging(ref string to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnGuidChanged();
        
        public bool IsIncluded // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:56
        { 
            get { return this._IsIncluded; }
            set
            {
                if (this._IsIncluded != value)
                {
                    this.OnIsIncludedChanging(ref value);
                    this._IsIncluded = value;
                    this.OnIsIncludedChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
        private bool _IsIncluded;
        partial void OnIsIncludedChanging(ref bool to); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\Property.tt Line:80
        partial void OnIsIncludedChanged();
        #endregion Properties
    }
    
    public interface IVisitorProto // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\IVisitorProto.tt Line:8
    {
        void Visit(Proto.Config.proto_user_settings p);
        void Visit(Proto.Config.proto_user_settings_opened_config p);
        void Visit(Proto.Config.proto_group_list_plugins p);
        void Visit(Proto.Config.proto_plugin p);
        void Visit(Proto.Config.proto_plugin_generator p);
        void Visit(Proto.Config.proto_settings_config p);
        void Visit(Proto.Config.proto_config_short_history p);
        void Visit(Proto.Config.proto_group_list_base_config_links p);
        void Visit(Proto.Config.proto_base_config_link p);
        void Visit(Proto.Config.proto_config p);
        void Visit(Proto.Config.proto_app_db_settings p);
        void Visit(Proto.Config.proto_plugin_generator_solution_settings p);
        void Visit(Proto.Config.proto_plugin_generator_project_settings p);
        void Visit(Proto.Config.proto_group_list_app_solutions p);
        void Visit(Proto.Config.proto_app_solution p);
        void Visit(Proto.Config.proto_app_project p);
        void Visit(Proto.Config.proto_plugin_generator_node_settings p);
        void Visit(Proto.Config.proto_plugin_generator_settings p);
        void Visit(Proto.Config.proto_app_project_generator p);
        void Visit(Proto.Config.proto_plugin_generator_node_default_settings p);
        void Visit(Proto.Config.proto_model p);
        void Visit(Proto.Config.proto_data_type p);
        void Visit(Proto.Config.proto_group_list_common p);
        void Visit(Proto.Config.proto_enumerator_sequence p);
        void Visit(Proto.Config.proto_group_list_enumerator_sequences p);
        void Visit(Proto.Config.proto_role p);
        void Visit(Proto.Config.proto_role_constant_access p);
        void Visit(Proto.Config.proto_role_property_access p);
        void Visit(Proto.Config.proto_role_catalog_access p);
        void Visit(Proto.Config.proto_role_detail_access p);
        void Visit(Proto.Config.proto_role_document_access p);
        void Visit(Proto.Config.proto_group_list_roles p);
        void Visit(Proto.Config.proto_main_view_form p);
        void Visit(Proto.Config.proto_group_list_main_view_forms p);
        void Visit(Proto.Config.proto_group_list_properties p);
        void Visit(Proto.Config.proto_property p);
        void Visit(Proto.Config.proto_group_list_details p);
        void Visit(Proto.Config.proto_detail p);
        void Visit(Proto.Config.proto_property_data_generator p);
        void Visit(Proto.Config.proto_group_constant_groups p);
        void Visit(Proto.Config.proto_group_list_constants p);
        void Visit(Proto.Config.proto_constant p);
        void Visit(Proto.Config.proto_group_list_enumerations p);
        void Visit(Proto.Config.proto_enumeration p);
        void Visit(Proto.Config.proto_enumeration_pair p);
        void Visit(Proto.Config.proto_catalog_folder p);
        void Visit(Proto.Config.proto_catalog_code_property_settings p);
        void Visit(Proto.Config.proto_catalog p);
        void Visit(Proto.Config.proto_group_list_catalogs p);
        void Visit(Proto.Config.proto_group_documents p);
        void Visit(Proto.Config.proto_document_number_property_settings p);
        void Visit(Proto.Config.proto_document p);
        void Visit(Proto.Config.proto_group_list_documents p);
        void Visit(Proto.Config.proto_group_list_journals p);
        void Visit(Proto.Config.proto_journal p);
        void Visit(Proto.Config.proto_doc_in_journal p);
        void Visit(Proto.Config.proto_group_list_forms p);
        void Visit(Proto.Config.proto_form p);
        void Visit(Proto.Config.proto_form_grid_system p);
        void Visit(Proto.Config.proto_form_grid_system_row p);
        void Visit(Proto.Config.proto_form_grid_system_column p);
        void Visit(Proto.Config.proto_form_auto_layout_block p);
        void Visit(Proto.Config.proto_form_auto_layout_sub_block p);
        void Visit(Proto.Config.proto_form_field p);
        void Visit(Proto.Config.proto_form_tab_control_tab p);
        void Visit(Proto.Config.proto_form_tab_control p);
        void Visit(Proto.Config.proto_form_data_grid p);
        void Visit(Proto.Config.proto_form_tree p);
        void Visit(Proto.Config.proto_group_list_reports p);
        void Visit(Proto.Config.proto_report p);
        void Visit(Proto.Config.proto_model_row p);
    }
    
    public partial class ValidationConfigVisitor : ConfigVisitor // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:8
    {
        partial void OnVisit(IValidatableWithSeverity p);
        partial void OnVisitEnd(IValidatableWithSeverity p);
        protected override void OnVisit(UserSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListOpenConfigHistory) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:38
                p.ValidateSubAndCollectErrors(t);
        }
        protected override void OnVisitEnd(UserSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(UserSettingsOpenedConfig p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(UserSettingsOpenedConfig p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListPlugins p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListPlugins p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Plugin p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Plugin p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(SettingsConfig p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(SettingsConfig p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(ConfigShortHistory p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(ConfigShortHistory p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListBaseConfigLinks p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListBaseConfigLinks p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(BaseConfigLink p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(BaseConfigLink p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Config p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Config p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(AppDbSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(AppDbSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGeneratorSolutionSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGeneratorSolutionSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGeneratorProjectSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGeneratorProjectSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListAppSolutions p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListAppSolutions p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(AppSolution p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListGeneratorsSolutionSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(AppSolution p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(AppProject p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListGeneratorsProjectSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(AppProject p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGeneratorNodeSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGeneratorNodeSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGeneratorSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGeneratorSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(AppProjectGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.GeneratorSettingsVm); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
        }
        protected override void OnVisitEnd(AppProjectGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PluginGeneratorNodeDefaultSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PluginGeneratorNodeDefaultSettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Model p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Model p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(DataType p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(DataType p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListCommon p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListCommon p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(EnumeratorSequence p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(EnumeratorSequence p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListEnumeratorSequences p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListEnumeratorSequences p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Role p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Role p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(RoleConstantAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(RoleConstantAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(RolePropertyAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(RolePropertyAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(RoleCatalogAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(RoleCatalogAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(RoleDetailAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(RoleDetailAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(RoleDocumentAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(RoleDocumentAccess p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListRoles p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListRoles p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(MainViewForm p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(MainViewForm p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListMainViewForms p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListMainViewForms p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListProperties p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(GroupListProperties p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Property p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            ValidateSubAndCollectErrors(p, p.DataGenerator); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            foreach (var t in p.ListRolePropertyAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Property p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListDetails p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(GroupListDetails p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Detail p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListRoleDetailAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Detail p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(PropertyDataGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(PropertyDataGenerator p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupConstantGroups p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupConstantGroups p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListConstants p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(GroupListConstants p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Constant p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.DataType); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            foreach (var t in p.ListRoleConstantAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Constant p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListEnumerations p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListEnumerations p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Enumeration p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Enumeration p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(EnumerationPair p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(EnumerationPair p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(CatalogFolder p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            foreach (var t in p.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(CatalogFolder p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(CatalogCodePropertySettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(CatalogCodePropertySettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Catalog p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.CodePropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            foreach (var t in p.ListRoleCatalogAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Catalog p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListCatalogs p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListCatalogs p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupDocuments p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupDocuments p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(DocumentNumberPropertySettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(DocumentNumberPropertySettings p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Document p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            ValidateSubAndCollectErrors(p, p.DocNumberPropertySettings); // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:31
            foreach (var t in p.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Document p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListDocuments p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListRoleDocumentAccessSettings) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(GroupListDocuments p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListJournals p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListJournals p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Journal p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
            foreach (var t in p.ListSelectedDocsWithProperties) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:28
                ValidateSubAndCollectErrors(p, t);
        }
        protected override void OnVisitEnd(Journal p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(DocInJournal p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(DocInJournal p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListForms p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListForms p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Form p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Form p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormGridSystem p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormGridSystem p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormGridSystemRow p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormGridSystemRow p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormGridSystemColumn p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormGridSystemColumn p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormAutoLayoutBlock p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormAutoLayoutBlock p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormAutoLayoutSubBlock p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormAutoLayoutSubBlock p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormField p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormField p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormTabControlTab p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormTabControlTab p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormTabControl p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormTabControl p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormDataGrid p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormDataGrid p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(FormTree p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(FormTree p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(GroupListReports p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(GroupListReports p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(Report p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(Report p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
        protected override void OnVisit(ModelRow p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:16
        {
            this.OnVisit((IValidatableWithSeverity)p);
        }
        protected override void OnVisitEnd(ModelRow p) // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\ValidationVisitor.tt Line:48
        {
            this.OnVisitEnd((IValidatableWithSeverity)p);
        }
    }
    
    public partial class ConfigVisitor : IVisitorConfigNode // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\NodeVisitor.tt Line:8
    {
        public CancellationToken Token { get { return _cancellationToken; } }
        protected CancellationToken _cancellationToken;
    
        public void Visit(UserSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(UserSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(UserSettings p) { }
        protected virtual void OnVisitEnd(UserSettings p) { }
        public void Visit(UserSettingsOpenedConfig p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(UserSettingsOpenedConfig p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(UserSettingsOpenedConfig p) { }
        protected virtual void OnVisitEnd(UserSettingsOpenedConfig p) { }
        public void Visit(GroupListPlugins p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListPlugins p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListPlugins p) { }
        protected virtual void OnVisitEnd(GroupListPlugins p) { }
        public void Visit(Plugin p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Plugin p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Plugin p) { }
        protected virtual void OnVisitEnd(Plugin p) { }
        public void Visit(PluginGenerator p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGenerator p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGenerator p) { }
        protected virtual void OnVisitEnd(PluginGenerator p) { }
        public void Visit(SettingsConfig p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(SettingsConfig p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(SettingsConfig p) { }
        protected virtual void OnVisitEnd(SettingsConfig p) { }
        public void Visit(ConfigShortHistory p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(ConfigShortHistory p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(ConfigShortHistory p) { }
        protected virtual void OnVisitEnd(ConfigShortHistory p) { }
        public void Visit(GroupListBaseConfigLinks p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListBaseConfigLinks p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListBaseConfigLinks p) { }
        protected virtual void OnVisitEnd(GroupListBaseConfigLinks p) { }
        public void Visit(BaseConfigLink p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(BaseConfigLink p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(BaseConfigLink p) { }
        protected virtual void OnVisitEnd(BaseConfigLink p) { }
        public void Visit(Config p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Config p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Config p) { }
        protected virtual void OnVisitEnd(Config p) { }
        public void Visit(AppDbSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(AppDbSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(AppDbSettings p) { }
        protected virtual void OnVisitEnd(AppDbSettings p) { }
        public void Visit(PluginGeneratorSolutionSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGeneratorSolutionSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGeneratorSolutionSettings p) { }
        protected virtual void OnVisitEnd(PluginGeneratorSolutionSettings p) { }
        public void Visit(PluginGeneratorProjectSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGeneratorProjectSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGeneratorProjectSettings p) { }
        protected virtual void OnVisitEnd(PluginGeneratorProjectSettings p) { }
        public void Visit(GroupListAppSolutions p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListAppSolutions p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListAppSolutions p) { }
        protected virtual void OnVisitEnd(GroupListAppSolutions p) { }
        public void Visit(AppSolution p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(AppSolution p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(AppSolution p) { }
        protected virtual void OnVisitEnd(AppSolution p) { }
        public void Visit(AppProject p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(AppProject p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(AppProject p) { }
        protected virtual void OnVisitEnd(AppProject p) { }
        public void Visit(PluginGeneratorNodeSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGeneratorNodeSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGeneratorNodeSettings p) { }
        protected virtual void OnVisitEnd(PluginGeneratorNodeSettings p) { }
        public void Visit(PluginGeneratorSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGeneratorSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGeneratorSettings p) { }
        protected virtual void OnVisitEnd(PluginGeneratorSettings p) { }
        public void Visit(AppProjectGenerator p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(AppProjectGenerator p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(AppProjectGenerator p) { }
        protected virtual void OnVisitEnd(AppProjectGenerator p) { }
        public void Visit(PluginGeneratorNodeDefaultSettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PluginGeneratorNodeDefaultSettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PluginGeneratorNodeDefaultSettings p) { }
        protected virtual void OnVisitEnd(PluginGeneratorNodeDefaultSettings p) { }
        public void Visit(Model p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Model p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Model p) { }
        protected virtual void OnVisitEnd(Model p) { }
        public void Visit(DataType p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(DataType p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(DataType p) { }
        protected virtual void OnVisitEnd(DataType p) { }
        public void Visit(GroupListCommon p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListCommon p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListCommon p) { }
        protected virtual void OnVisitEnd(GroupListCommon p) { }
        public void Visit(EnumeratorSequence p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(EnumeratorSequence p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(EnumeratorSequence p) { }
        protected virtual void OnVisitEnd(EnumeratorSequence p) { }
        public void Visit(GroupListEnumeratorSequences p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListEnumeratorSequences p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListEnumeratorSequences p) { }
        protected virtual void OnVisitEnd(GroupListEnumeratorSequences p) { }
        public void Visit(Role p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Role p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Role p) { }
        protected virtual void OnVisitEnd(Role p) { }
        public void Visit(RoleConstantAccess p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(RoleConstantAccess p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(RoleConstantAccess p) { }
        protected virtual void OnVisitEnd(RoleConstantAccess p) { }
        public void Visit(RolePropertyAccess p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(RolePropertyAccess p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(RolePropertyAccess p) { }
        protected virtual void OnVisitEnd(RolePropertyAccess p) { }
        public void Visit(RoleCatalogAccess p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(RoleCatalogAccess p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(RoleCatalogAccess p) { }
        protected virtual void OnVisitEnd(RoleCatalogAccess p) { }
        public void Visit(RoleDetailAccess p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(RoleDetailAccess p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(RoleDetailAccess p) { }
        protected virtual void OnVisitEnd(RoleDetailAccess p) { }
        public void Visit(RoleDocumentAccess p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(RoleDocumentAccess p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(RoleDocumentAccess p) { }
        protected virtual void OnVisitEnd(RoleDocumentAccess p) { }
        public void Visit(GroupListRoles p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListRoles p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListRoles p) { }
        protected virtual void OnVisitEnd(GroupListRoles p) { }
        public void Visit(MainViewForm p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(MainViewForm p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(MainViewForm p) { }
        protected virtual void OnVisitEnd(MainViewForm p) { }
        public void Visit(GroupListMainViewForms p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListMainViewForms p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListMainViewForms p) { }
        protected virtual void OnVisitEnd(GroupListMainViewForms p) { }
        public void Visit(GroupListProperties p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListProperties p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListProperties p) { }
        protected virtual void OnVisitEnd(GroupListProperties p) { }
        public void Visit(Property p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Property p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Property p) { }
        protected virtual void OnVisitEnd(Property p) { }
        public void Visit(GroupListDetails p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListDetails p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListDetails p) { }
        protected virtual void OnVisitEnd(GroupListDetails p) { }
        public void Visit(Detail p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Detail p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Detail p) { }
        protected virtual void OnVisitEnd(Detail p) { }
        public void Visit(PropertyDataGenerator p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(PropertyDataGenerator p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(PropertyDataGenerator p) { }
        protected virtual void OnVisitEnd(PropertyDataGenerator p) { }
        public void Visit(GroupConstantGroups p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupConstantGroups p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupConstantGroups p) { }
        protected virtual void OnVisitEnd(GroupConstantGroups p) { }
        public void Visit(GroupListConstants p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListConstants p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListConstants p) { }
        protected virtual void OnVisitEnd(GroupListConstants p) { }
        public void Visit(Constant p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Constant p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Constant p) { }
        protected virtual void OnVisitEnd(Constant p) { }
        public void Visit(GroupListEnumerations p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListEnumerations p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListEnumerations p) { }
        protected virtual void OnVisitEnd(GroupListEnumerations p) { }
        public void Visit(Enumeration p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Enumeration p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Enumeration p) { }
        protected virtual void OnVisitEnd(Enumeration p) { }
        public void Visit(EnumerationPair p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(EnumerationPair p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(EnumerationPair p) { }
        protected virtual void OnVisitEnd(EnumerationPair p) { }
        public void Visit(CatalogFolder p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(CatalogFolder p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(CatalogFolder p) { }
        protected virtual void OnVisitEnd(CatalogFolder p) { }
        public void Visit(CatalogCodePropertySettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(CatalogCodePropertySettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(CatalogCodePropertySettings p) { }
        protected virtual void OnVisitEnd(CatalogCodePropertySettings p) { }
        public void Visit(Catalog p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Catalog p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Catalog p) { }
        protected virtual void OnVisitEnd(Catalog p) { }
        public void Visit(GroupListCatalogs p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListCatalogs p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListCatalogs p) { }
        protected virtual void OnVisitEnd(GroupListCatalogs p) { }
        public void Visit(GroupDocuments p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupDocuments p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupDocuments p) { }
        protected virtual void OnVisitEnd(GroupDocuments p) { }
        public void Visit(DocumentNumberPropertySettings p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(DocumentNumberPropertySettings p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(DocumentNumberPropertySettings p) { }
        protected virtual void OnVisitEnd(DocumentNumberPropertySettings p) { }
        public void Visit(Document p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Document p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Document p) { }
        protected virtual void OnVisitEnd(Document p) { }
        public void Visit(GroupListDocuments p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListDocuments p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListDocuments p) { }
        protected virtual void OnVisitEnd(GroupListDocuments p) { }
        public void Visit(GroupListJournals p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListJournals p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListJournals p) { }
        protected virtual void OnVisitEnd(GroupListJournals p) { }
        public void Visit(Journal p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Journal p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Journal p) { }
        protected virtual void OnVisitEnd(Journal p) { }
        public void Visit(DocInJournal p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(DocInJournal p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(DocInJournal p) { }
        protected virtual void OnVisitEnd(DocInJournal p) { }
        public void Visit(GroupListForms p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListForms p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListForms p) { }
        protected virtual void OnVisitEnd(GroupListForms p) { }
        public void Visit(Form p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Form p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Form p) { }
        protected virtual void OnVisitEnd(Form p) { }
        public void Visit(FormGridSystem p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormGridSystem p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormGridSystem p) { }
        protected virtual void OnVisitEnd(FormGridSystem p) { }
        public void Visit(FormGridSystemRow p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormGridSystemRow p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormGridSystemRow p) { }
        protected virtual void OnVisitEnd(FormGridSystemRow p) { }
        public void Visit(FormGridSystemColumn p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormGridSystemColumn p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormGridSystemColumn p) { }
        protected virtual void OnVisitEnd(FormGridSystemColumn p) { }
        public void Visit(FormAutoLayoutBlock p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormAutoLayoutBlock p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormAutoLayoutBlock p) { }
        protected virtual void OnVisitEnd(FormAutoLayoutBlock p) { }
        public void Visit(FormAutoLayoutSubBlock p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormAutoLayoutSubBlock p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormAutoLayoutSubBlock p) { }
        protected virtual void OnVisitEnd(FormAutoLayoutSubBlock p) { }
        public void Visit(FormField p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormField p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormField p) { }
        protected virtual void OnVisitEnd(FormField p) { }
        public void Visit(FormTabControlTab p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormTabControlTab p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormTabControlTab p) { }
        protected virtual void OnVisitEnd(FormTabControlTab p) { }
        public void Visit(FormTabControl p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormTabControl p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormTabControl p) { }
        protected virtual void OnVisitEnd(FormTabControl p) { }
        public void Visit(FormDataGrid p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormDataGrid p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormDataGrid p) { }
        protected virtual void OnVisitEnd(FormDataGrid p) { }
        public void Visit(FormTree p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(FormTree p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(FormTree p) { }
        protected virtual void OnVisitEnd(FormTree p) { }
        public void Visit(GroupListReports p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(GroupListReports p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(GroupListReports p) { }
        protected virtual void OnVisitEnd(GroupListReports p) { }
        public void Visit(Report p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(Report p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(Report p) { }
        protected virtual void OnVisitEnd(Report p) { }
        public void Visit(ModelRow p)
        {
            this.OnVisit(p);
        }
        public void VisitEnd(ModelRow p)
        {
            this.OnVisitEnd(p);
        }
        protected virtual void OnVisit(ModelRow p) { }
        protected virtual void OnVisitEnd(ModelRow p) { }
    }
    
    public interface IVisitorConfigNode // D:\dev\vSharpStudio.pro\submodules\vSharpStudio\generators\GenFromProto\IVisitorConfigNode.tt Line:8
    {
        System.Threading.CancellationToken Token { get; }
        void Visit(Config p);
        void VisitEnd(Config p);
        void Visit(Model p);
        void VisitEnd(Model p);
        void Visit(GroupListCommon p);
        void VisitEnd(GroupListCommon p);
        void Visit(EnumeratorSequence p);
        void VisitEnd(EnumeratorSequence p);
        void Visit(GroupListEnumeratorSequences p);
        void VisitEnd(GroupListEnumeratorSequences p);
        void Visit(Role p);
        void VisitEnd(Role p);
        void Visit(GroupListRoles p);
        void VisitEnd(GroupListRoles p);
        void Visit(MainViewForm p);
        void VisitEnd(MainViewForm p);
        void Visit(GroupListMainViewForms p);
        void VisitEnd(GroupListMainViewForms p);
        void Visit(GroupListProperties p);
        void VisitEnd(GroupListProperties p);
        void Visit(Property p);
        void VisitEnd(Property p);
        void Visit(GroupListDetails p);
        void VisitEnd(GroupListDetails p);
        void Visit(Detail p);
        void VisitEnd(Detail p);
        void Visit(GroupConstantGroups p);
        void VisitEnd(GroupConstantGroups p);
        void Visit(GroupListConstants p);
        void VisitEnd(GroupListConstants p);
        void Visit(Constant p);
        void VisitEnd(Constant p);
        void Visit(GroupListEnumerations p);
        void VisitEnd(GroupListEnumerations p);
        void Visit(Enumeration p);
        void VisitEnd(Enumeration p);
        void Visit(EnumerationPair p);
        void VisitEnd(EnumerationPair p);
        void Visit(CatalogFolder p);
        void VisitEnd(CatalogFolder p);
        void Visit(Catalog p);
        void VisitEnd(Catalog p);
        void Visit(GroupListCatalogs p);
        void VisitEnd(GroupListCatalogs p);
        void Visit(GroupDocuments p);
        void VisitEnd(GroupDocuments p);
        void Visit(Document p);
        void VisitEnd(Document p);
        void Visit(GroupListDocuments p);
        void VisitEnd(GroupListDocuments p);
        void Visit(GroupListJournals p);
        void VisitEnd(GroupListJournals p);
        void Visit(Journal p);
        void VisitEnd(Journal p);
        void Visit(GroupListForms p);
        void VisitEnd(GroupListForms p);
        void Visit(Form p);
        void VisitEnd(Form p);
        void Visit(FormGridSystem p);
        void VisitEnd(FormGridSystem p);
        void Visit(FormGridSystemRow p);
        void VisitEnd(FormGridSystemRow p);
        void Visit(FormGridSystemColumn p);
        void VisitEnd(FormGridSystemColumn p);
        void Visit(FormAutoLayoutBlock p);
        void VisitEnd(FormAutoLayoutBlock p);
        void Visit(FormAutoLayoutSubBlock p);
        void VisitEnd(FormAutoLayoutSubBlock p);
        void Visit(FormField p);
        void VisitEnd(FormField p);
        void Visit(FormTabControlTab p);
        void VisitEnd(FormTabControlTab p);
        void Visit(FormTabControl p);
        void VisitEnd(FormTabControl p);
        void Visit(FormDataGrid p);
        void VisitEnd(FormDataGrid p);
        void Visit(FormTree p);
        void VisitEnd(FormTree p);
        void Visit(GroupListReports p);
        void VisitEnd(GroupListReports p);
        void Visit(Report p);
        void VisitEnd(Report p);
    }
}
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Windows.Forms" #>
<#
	if (FileManager != null)
	{
		FileManager.StartNewFile(FilePrefix+"ViewModelRepository.cs");
  	}
#>
// <#=FilePos() #>
#if !SERVER
namespace <#=Namespace #>.DAL
{
	using Service;
	using System.Collections.Generic;
<#
foreach(Table tbl in tables.Where(t=> !t.Ignore)){
		if(IsExcluded(tbl.Schema, tbl.Name, ExcludeTablePrefixes)) continue;
		if(IgnoreTablesByDefault && !tbl.Include) continue;

#>

	#region <#=tbl.ClassName #> ViewModel Repository	
	public partial class <#=tbl.ClassName #>Repository
	{
		public List<<#=tbl.ClassName #>ViewModel> GetVMs(string where, ServiceSqlParameter[] param = null, string[] sort = null, int page = 0, int pagesize = 0)
		{
			IEnumerable<<#=tbl.ClassName #>> lst = Get(where, param, sort, page, pagesize);
			List<<#=tbl.ClassName #>ViewModel> res = new List<<#=tbl.ClassName #>ViewModel>();
			foreach(var t in lst)
			{
				res.Add(new <#=tbl.ClassName #>ViewModel(t)); //, <#=tbl.ClassName #>Validator.Instance); 
			}
			return res;
		}
		public static List<<#=tbl.ClassName #>ViewModel> GetVMs(string connectionString, string where, ServiceSqlParameter[] param = null, string[] sort = null, int page = 0, int pagesize = 0)
		{
			IEnumerable<<#=tbl.ClassName #>> lst = DAL.<#=tbl.ClassName #>Repository.Get(connectionString, where, param, sort, page, pagesize);
			List<<#=tbl.ClassName #>ViewModel> res = new List<<#=tbl.ClassName #>ViewModel>();
			foreach(var t in lst)
			{
				res.Add(new <#=tbl.ClassName #>ViewModel(t)); //, <#=tbl.ClassName #>Validator.Instance); 
			}
			return res;
		}
		public <#=tbl.ClassName #>ViewModel GetVM(string where, ServiceSqlParameter[] param = null)
		{
			IEnumerable<<#=tbl.ClassName #>> lst = Get(where, param, null, 0, 0);
			<#=tbl.ClassName #>ViewModel res = null;
			var en = lst.GetEnumerator();
			if (!en.MoveNext())
				throw new System.Exception("Empty result. Expected one record");
			res = new <#=tbl.ClassName #>ViewModel(en.Current);
			if (en.MoveNext())
				throw new System.Exception("Expected only one record");
			return res;
		}
		public static <#=tbl.ClassName #>ViewModel GetVM(string connectionString, string where, ServiceSqlParameter[] param = null)
		{
			IEnumerable<<#=tbl.ClassName #>> lst = DAL.<#=tbl.ClassName #>Repository.Get(connectionString, where, param, null, 0, 0);
			<#=tbl.ClassName #>ViewModel res = null;
			var en = lst.GetEnumerator();
			if (!en.MoveNext())
				throw new System.Exception("Empty result. Expected one record");
			res = new <#=tbl.ClassName #>ViewModel(en.Current);
			if (en.MoveNext())
				throw new System.Exception("Expected only one record");
			return res;
		}
<#if (!tbl.IsView) {#>
		public <#=tbl.ClassName #>ViewModel GetVMById(int id)
		{
			return new <#=tbl.ClassName #>ViewModel(GetById(id));
		}
		public static <#=tbl.ClassName #>ViewModel GetVMById(string connectionString, int id)
		{
			return new <#=tbl.ClassName #>ViewModel(DAL.<#=tbl.ClassName #>Repository.GetById(connectionString, id));
		}
		public int Add(<#=tbl.ClassName #>ViewModel entity)
		{
			int id = Add(entity.GetDTO());
			entity.Id = id;
			return id;
		}
		public static int Add(string connectionString, <#=tbl.ClassName #>ViewModel entity)
		{
			int id = DAL.<#=tbl.ClassName #>Repository.Add(connectionString, entity.GetDTO());
			entity.Id = id;
			return id;
		}
		public void Delete(<#=tbl.ClassName #>ViewModel entity)
		{
			Delete(entity.Id);
		}
		public static void Delete(string connectionString, <#=tbl.ClassName #>ViewModel entity)
		{
			DAL.<#=tbl.ClassName #>Repository.Delete(connectionString, entity.Id);
		}
		public void Update(<#=tbl.ClassName #>ViewModel entity)
		{
			Update(entity.GetDTO());
		}
		public static void Update(string connectionString, <#=tbl.ClassName #>ViewModel entity)
		{
			DAL.<#=tbl.ClassName #>Repository.Update(connectionString, entity.GetDTO());
		}
<#}#>
	}
	#endregion <#=tbl.ClassName #> Repository	
<#}#>
}
#endif
<#
	if (FileManager != null)
	{
		FileManager.StartNewFile(FilePrefix+"ClientViewModels.cs");
  	}
#>
// <#=FilePos() #>
#if !SERVER
namespace <#=Namespace #>.Service
{
	using System;
	using System.ComponentModel;
	//using System.ComponentModel.DataAnnotations;
	//using System.ComponentModel.DataAnnotations.Schema;
	using System.Collections.Generic;
	using System.Runtime.CompilerServices;
	using System.Collections;
	using FluentValidation;
	using FluentValidation.Results;
	using System.Linq;
	using System.Windows;
	using System.Windows.Threading;
	using System.Windows.Input;
	using WindowsDispatcher = System.Windows.Threading.Dispatcher;
	using System.Windows.Interactivity;
	using System.Collections.Specialized;
	using System.Collections.ObjectModel;
	using Telerik.Windows.Data;
	using Telerik.Windows.Controls;
	using ServiceClientBase;

	// https://www.infoq.com/articles/WCF-Code-Sharing

	#region ViewModels
<#
foreach(Table tbl in tables.Where(t=> !t.Ignore)){
		if(IsExcluded(tbl.Schema, tbl.Name, ExcludeTablePrefixes)) continue;
		if(IgnoreTablesByDefault && !tbl.Include) continue;
	string vm="ViewModel";
//if (tbl.IsView) {
#>
	
	#region <#=tbl.ClassName#>
	public partial class <#=tbl.ClassName#>Validator : AbstractValidator<<#=tbl.ClassName#>>
	{
		private static <#=tbl.ClassName#>Validator _instance = null;
		public static <#=tbl.ClassName#>Validator Instance
		{
			get 
			{ 
				if (_instance == null) 
					_instance = new <#=tbl.ClassName#>Validator(); 
				return _instance; 
			}
		}
	}

	/// <summary>
	/// A view model class which represents the <#=tbl.Name#> <#=(tbl.IsView)?"view":"table"#>.
	/// </summary>
	public partial class <#=tbl.ClassName#>ViewModel : ViewModelBaseEditable<<#=tbl.ClassName#>ViewModel, <#=tbl.ClassName#>, <#=tbl.ClassName#>Validator><#=(tbl.IsView)?"":", IViewModel"#>
	{
		//public <#=tbl.ClassName#>ViewModel() {}
		public <#=tbl.ClassName#>ViewModel(<#=tbl.ClassName#> dto) : this(dto, <#=tbl.ClassName#>Validator.Instance) {}
		public <#=tbl.ClassName#>ViewModel(<#=tbl.ClassName#> dto, <#=tbl.ClassName#>Validator validator) : base(dto, validator) 
		{ 
			this.OnCreate(); 
		}
		partial void OnCreate(); 

		public <#=tbl.ClassName#>ViewModel VM { get { return this; }}

<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{#>
		public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> 
		{ 
			get { return _dto.<#=col.PropertyName #>; }
			set	
			{ 
				if (_dto.<#=col.PropertyName #> == value) return; 
				_dto.<#=col.PropertyName #> = value; 
				this.On<#=col.PropertyName #>Changed();
				this.NotifyPropertyChangedWithIsChanged();
				this.ValidatePropertyAsync();
			}
		}
		partial void On<#=col.PropertyName #>Changed(); 

<#}#>
		public override <#=tbl.ClassName#> Clone(<#=tbl.ClassName#> from)
		{
			<#=tbl.ClassName#> to = new <#=tbl.ClassName#>();
<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{#>
			to.<#=col.PropertyName #> = from.<#=col.PropertyName #>;
<#}#>
			return to;
		}
		protected override void SetProperties(<#=tbl.ClassName#> from)
		{
<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{#>
			<#=col.PropertyName #> = from.<#=col.PropertyName #>;
<#}#>
		}
	}

	/// <summary>
	/// A bind-able view model class which represents the <#=tbl.Name#> <#=(tbl.IsView)?"view":"table"#>.
	/// </summary>
	public partial class <#=tbl.ClassName#>StringPropertiesViewModel : <#=tbl.ClassName#>ViewModel
	{
		//protected <#=tbl.ClassName#>StringPropertiesViewModel() {}
		public <#=tbl.ClassName#>StringPropertiesViewModel(<#=tbl.ClassName#> dto) : base(dto, (<#=tbl.ClassName#>Validator)InstanceCache.GetSingleton.GetOrCreateInstance(typeof(<#=tbl.ClassName#>Validator))) { }
		public <#=tbl.ClassName#>StringPropertiesViewModel(<#=tbl.ClassName#> dto, <#=tbl.ClassName#>Validator validator) : base(dto, validator) { }

<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{List<string> lsttypes = new List<string> { "int", "float", "double" }; if (!lsttypes.Contains(col.PropertyType)) continue;#>
		public string <#=col.PropertyName #>Str 
		{ 
			get { return _dto.<#=col.PropertyName #>.ToString(); }
			set	
			{
				if (_dto.<#=col.PropertyName #>.ToString() == value)
					return;
				this.ClearErrorMessages();
				<#=col.PropertyType #> res;
<# if (CheckNullable(col)=="?") {#>		        
				if (string.IsNullOrEmpty(value))
				{
					_dto.<#=col.PropertyName #> = null;
					return;
				}
<#}#>
				if (!<#=col.PropertyType #>.TryParse(value, out res))
				{
					this.SetErrorMessage("Can't cast entered string to '<#=col.PropertyType #>' type");
				}
				else
				{
					_dto.<#=col.PropertyName #> = res; 
				}
			}
		}
		partial void On<#=col.PropertyName #>Changed(); 

<#}#>
	}
	#endregion <#=tbl.ClassName#>
<#}#>
	#endregion ViewModels

<#if (IsGenerateCommonCode) {#>	
	// http://www.telerik.com/blogs/how-to-synchronize-your-ui-selected-items-with-your-data-context-using-mvvm-and-blend-behaviors-for-silverlight-and-wpf
	public class RadGridViewMultiSelectBehavior : Behavior<RadGridView>
	{
		private RadGridView Grid
		{
			get
			{
				return AssociatedObject as RadGridView;
			}
		}

		public INotifyCollectionChanged SelectedItems
		{
			get { return (INotifyCollectionChanged)GetValue(SelectedItemsProperty); }
			set { SetValue(SelectedItemsProperty, value); }
		}

		// Using a DependencyProperty as the backing store for SelectedItemsProperty.  This enables animation, styling, binding, etc...
		public static readonly DependencyProperty SelectedItemsProperty =
				DependencyProperty.Register("SelectedItems", typeof(INotifyCollectionChanged), typeof(RadGridViewMultiSelectBehavior), new PropertyMetadata(OnSelectedItemsPropertyChanged));


		private static void OnSelectedItemsPropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs args)
		{
			var collection = args.NewValue as INotifyCollectionChanged;
			if (collection != null)
			{
				collection.CollectionChanged += ((RadGridViewMultiSelectBehavior)target).ContextSelectedItems_CollectionChanged;
			}
		}

		protected override void OnAttached()
		{
			base.OnAttached();

			Grid.SelectedItems.CollectionChanged += GridSelectedItems_CollectionChanged;
		}

		void ContextSelectedItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
		{
			UnsubscribeFromEvents();

			Transfer(SelectedItems as IList, Grid.SelectedItems);

			SubscribeToEvents();
		}

		void GridSelectedItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
		{
			UnsubscribeFromEvents();

			Transfer(Grid.SelectedItems, SelectedItems as IList);

			SubscribeToEvents();
		}

		private void SubscribeToEvents()
		{
			Grid.SelectedItems.CollectionChanged += GridSelectedItems_CollectionChanged;

			if (SelectedItems != null)
			{
				SelectedItems.CollectionChanged += ContextSelectedItems_CollectionChanged;
			}
		}

		private void UnsubscribeFromEvents()
		{
			Grid.SelectedItems.CollectionChanged -= GridSelectedItems_CollectionChanged;

			if (SelectedItems != null)
			{
				SelectedItems.CollectionChanged -= ContextSelectedItems_CollectionChanged;
			}
		}

		public static void Transfer(IList source, IList target)
		{
			if (source == null || target == null)
				return;

			target.Clear();

			foreach (var o in source)
			{
				target.Add(o);
			}
		}
	}
<#}#>	
}
#endif
<#+

//UseService=true;

#>

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
// Auto generated on UTC <#= DateTime.Now.ToUniversalTime() #>
using System;
using System.Linq;
using ViewModelBase;
using FluentValidation;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Threading;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using vSharpStudio.common;
using Google.Protobuf;

namespace vSharpStudio.vm.ViewModels
{
    // TODO investigate  https://docs.microsoft.com/en-us/visualstudio/debugger/using-debuggertypeproxy-attribute?view=vs-2017
    // TODO create debugger display for Property, ... https://docs.microsoft.com/en-us/visualstudio/debugger/using-the-debuggerdisplay-attribute?view=vs-2017
    // TODO create visualizers for Property, Catalog, Document, Constants https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-visualizers-of-data?view=vs-2017
<#
	this.PushIndent("\t");
	foreach (var t in root.MessageTypes)
	{
        if (t.Name.EndsWith("_nullable"))
           continue;
		var cl = new Class(root, t, dicParents, nameSpace);
		this.Write(cl.TransformText());
	}

	var v = new IVisitorConfigNode(root);
	this.Write(v.TransformText());

	var vp = new IVisitorProto(root, nameSpace);
	this.Write(vp.TransformText());

	var vv = new ValidationVisitor(root);
	this.Write(vv.TransformText());

	var cv = new ConfigVisitor(root);
	this.Write(cv.TransformText());

	this.PopIndent();
#>
}
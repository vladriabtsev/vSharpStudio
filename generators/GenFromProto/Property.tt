<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#= this.Doc.Comments #><#= this.Doc.Attributes #><# if (field.IsRepeated) { #>
<#   if (field.IsCsSimple() || field.IsAny() || (field.IsMessage() && !field.IsDefaultBase())) { #>
public ObservableCollection<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{ 
    get 
    { 
        return this._<#= field.Name.ToNameCs() #>; 
    }
    set
    {
        if (this._<#= field.Name.ToNameCs() #> != value)
        {
            this.On<#= field.Name.ToNameCs() #>Changing(value);
            _<#= field.Name.ToNameCs() #> = value;
            this.On<#= field.Name.ToNameCs() #>Changed();
            this.NotifyPropertyChanged();
<#     if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
<#     } #>
        }
    }
}
private ObservableCollection<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
partial void On<#= field.Name.ToNameCs() #>Changing(ObservableCollection<<#= field.ToTypeCs() #>> to); // <#=Helper.FilePos() #>
partial void On<#= field.Name.ToNameCs() #>Changed();
IEnumerable<<# if (field.IsMessage()) { #>I<# } #><#= field.ToTypeCs() #>> I<#= message.Name.ToNameCs() #>.<#= field.Name.ToNameCs() #> { get { return this._<#= field.Name.ToNameCs() #>; } }
<#   } else if (field.IsMap) { #>
public Dictionary<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{ 
    get 
    { 
        return this._<#= field.Name.ToNameCs() #>; 
    }
    set
    {
        if (this._<#= field.Name.ToNameCs() #> != value)
        {
            this.On<#= field.Name.ToNameCs() #>Changing(ref value);
            this._<#= field.Name.ToNameCs() #> = value;
            this.On<#= field.Name.ToNameCs() #>Changed();
            this.NotifyPropertyChanged();
<#     if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
<#     } #>
        }
    }
}
private Dictionary<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
partial void On<#= field.Name.ToNameCs() #>Changing(ref <#= field.ToTypeCs() #> to); // <#=Helper.FilePos() #>
partial void On<#= field.Name.ToNameCs() #>Changed();
<#   } else { #>
public ConfigNodesCollection<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{ 
    get 
    { 
        return this._<#= field.Name.ToNameCs() #>; 
    }
    private set
    {
        if (this._<#= field.Name.ToNameCs() #> != value)
        {
            this.On<#= field.Name.ToNameCs() #>Changing(value);
            this._<#= field.Name.ToNameCs() #> = value;
            this.On<#= field.Name.ToNameCs() #>Changed();
            this.NotifyPropertyChanged();
<#     if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
<#     } #>
        }
    }
}
private ConfigNodesCollection<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
partial void On<#= field.Name.ToNameCs() #>Changing(SortedObservableCollection<<#= field.ToTypeCs() #>> to); // <#=Helper.FilePos() #>
partial void On<#= field.Name.ToNameCs() #>Changed();
IEnumerable<I<#= field.ToTypeCs() #>> I<#= message.Name.ToNameCs() #>.<#= field.Name.ToNameCs() #> { get { return this._<#= field.Name.ToNameCs() #>; } }
<#   } #>
<#   if (message.Name.EndsWith(field.Name)) { #>
public <#= field.MessageType.Name.ToNameCs() #> this[int index] { get { return (<#= field.MessageType.Name.ToNameCs() #>)this.<#= field.Name.ToNameCs() #>[index]; } }
public void Add(<#= field.MessageType.Name.ToNameCs() #> item) // <#=Helper.FilePos() #>
{ 
    Contract.Requires(item != null);
    this.<#= field.Name.ToNameCs() #>.Add(item); 
    item.Parent = this;
    this.IsChanged = true;
}
public void AddRange(IEnumerable<<#= field.MessageType.Name.ToNameCs() #>> items) 
{ 
    Contract.Requires(items != null);
    this.<#= field.Name.ToNameCs() #>.AddRange(items); 
    foreach (var t in items)
        t.Parent = this;
    this.IsChanged = true;
}
public int Count() 
{ 
    return this.<#= field.Name.ToNameCs() #>.Count; 
}
public void Remove(<#= field.MessageType.Name.ToNameCs() #> item) 
{
    Contract.Requires(item != null);
    this.<#= field.Name.ToNameCs() #>.Remove(item); 
    item.Parent = null;
    this.IsChanged = true;
}
<#   } #>
<# } else if (field.IsMessage() && !field.IsCsSimple() && !field.IsAny()) {#>
public <#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{ 
    get 
    { 
        return this._<#= field.Name.ToNameCs() #>; 
    }
    set
    {
        if (this._<#= field.Name.ToNameCs() #> != value)
        {
            this.On<#= field.Name.ToNameCs() #>Changing(ref value);
            this._<#= field.Name.ToNameCs() #> = value;
            this.On<#= field.Name.ToNameCs() #>Changed();
            this.NotifyPropertyChanged();
<#   if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
<#   } #>
        }
    }
}
private <#= field.ToTypeCs() #> _<#= field.Name.ToNameCs() #>;
partial void On<#= field.Name.ToNameCs() #>Changing(ref <#= field.ToTypeCs() #> to); // <#=Helper.FilePos() #>
partial void On<#= field.Name.ToNameCs() #>Changed();
<# if (!field.IsNullable()) { #>I<# } #><#= field.ToTypeCs() #> I<#= message.Name.ToNameCs() #>.<#= field.Name.ToNameCs() #> { get { return this._<#= field.Name.ToNameCs() #>; } }
<# } else { #>
public <#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{ 
    get 
    { 
        return this._<#= field.Name.ToNameCs() #>; 
    }
    set
    {
        if (this._<#= field.Name.ToNameCs() #> != value)
        {
            this.On<#= field.Name.ToNameCs() #>Changing(ref value);
            this._<#= field.Name.ToNameCs() #> = value;
            this.On<#= field.Name.ToNameCs() #>Changed();
            this.NotifyPropertyChanged();
<#   if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
            this.IsChanged = true;
<#   } #>
        }
    }
}
private <#= field.ToTypeCs() #> _<#= field.Name.ToNameCs() #><# if (field.ToTypeCs() == "string") { #> = string.Empty<# } #>;
partial void On<#= field.Name.ToNameCs() #>Changing(ref <#= field.ToTypeCs() #> to); // <#=Helper.FilePos() #>
partial void On<#= field.Name.ToNameCs() #>Changed();
<#= field.ToTypeCs() #> I<#= message.Name.ToNameCs() #>.<#= field.Name.ToNameCs() #> { get { return this._<#= field.Name.ToNameCs() #>; } }
<# } #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#= this.Doc.Comments #><#= this.Doc.Attributes #><# if (field.IsRepeated) { #>
<# if (field.Name == "children") { #>
public SortedObservableCollection<ITreeConfigNode> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private SortedObservableCollection<ITreeConfigNode> _<#= field.Name.ToNameCs() #>;
public <#= field.MessageType.Name.ToNameCs() #> this[int index] { get { return (<#= field.MessageType.Name.ToNameCs() #>)this.Children[index]; } }
public void Add(<#= field.MessageType.Name.ToNameCs() #> item) 
{ 
    this.Children.Add(item); 
    item.Parent = this;
}
public void AddRange(IEnumerable<<#= field.MessageType.Name.ToNameCs() #>> items) 
{ 
    this.Children.AddRange(items); 
    foreach(var t in items)
        t.Parent = this;
}
public int Count() 
{ 
    return this.Children.Count; 
}
public void Remove(<#= field.MessageType.Name.ToNameCs() #> item) 
{
    this.Children.Remove(item); 
    item.Parent = null;
}
<# } else if (field.IsAny() || !JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsDefaultBase) { #>
public ObservableCollection<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private ObservableCollection<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
<# } else if (field.IsMap) { #>
public Dictionary<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private Dictionary<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
<# } else { #>
public SortedObservableCollection<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> 
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private SortedObservableCollection<<#= field.ToTypeCs() #>> _<#= field.Name.ToNameCs() #>;
<# } #>
<# } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Enum) { #>
public <#= message.Name #>.Types.<#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private <#= message.Name #>.Types.<#= field.ToTypeCs() #> _<#= field.Name.ToNameCs() #>;
<# } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message) {#>
public <#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
            _<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private <#= field.ToTypeCs() #> _<#= field.Name.ToNameCs() #>;
<# } else { #>
public <#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #>
{ 
	set
	{
		if (_<#= field.Name.ToNameCs() #> != value)
		{
			On<#= field.Name.ToNameCs() #>Changing();
			_<#= field.Name.ToNameCs() #> = value;
			On<#= field.Name.ToNameCs() #>Changed();
			NotifyPropertyChanged();
			ValidateProperty();
		}
	}
	get { return _<#= field.Name.ToNameCs() #>; }
}
private <#= field.ToTypeCs() #> _<#= field.Name.ToNameCs() #><# if (field.ToTypeCs() == "string") { #> = ""<# } #>;
<# } #>
partial void On<#= field.Name.ToNameCs() #>Changing();
partial void On<#= field.Name.ToNameCs() #>Changed();
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="vSharpStudio.common" #>

<#= this.Doc.Comments #><#= this.Doc.Attributes #><# if (this.IsCollection) { var collType = CollectionName(field); #>
public <#=collType#><<#= field.ToTypeCs() #>> <#=FieldName#> // <#=t4.FilePos() #>
{ 
    get { return this._<#=FieldName#>; }
    set
    {
        if (this._<#=FieldName#> != value)
        {
            this.On<#=FieldName#>Changing(value);
            _<#=FieldName#> = value;
            this.On<#=FieldName#>Changed();
            this.NotifyPropertyChanged();
<#     if (this.DocMes.IsValidatableBase) { #>
            this.ValidateProperty();
<#     } #>
        }
    }
}
private <#=collType#><<#= field.ToTypeCs() #>> _<#=FieldName#>;
IReadOnlyList<<#if (!IsSimple) {#>I<#}#><#=FieldType#>> I<#=ClassName#>.<#=FieldName#> { get { return (this as <#=ClassName#>).<#=FieldName#>; } } // <#=t4.FilePos() #>
partial void On<#=FieldName#>Changing(ObservableCollection<<#= field.ToTypeCs() #>> to); // <#=t4.FilePos() #>
partial void On<#=FieldName#>Changed();
<#   if (this.IsSelfCollection) { #>
public <#= field.MessageType.Name.ToNameCs() #> this[int index] { get { return (<#= field.MessageType.Name.ToNameCs() #>)this.<#=FieldName#>[index]; } }
I<#= field.MessageType.Name.ToNameCs() #> I<#= message.Name.ToNameCs() #>.this[int index] { get { return (<#= field.MessageType.Name.ToNameCs() #>)this.<#=FieldName#>[index]; } }
public void Add(<#= field.MessageType.Name.ToNameCs() #> item) // <#=t4.FilePos() #>
{ 
    Debug.Assert(item != null);
    this.<#=FieldName#>.Add(item); 
    item.Parent = this;
}
public void AddRange(IEnumerable<<#= field.MessageType.Name.ToNameCs() #>> items) 
{ 
    Debug.Assert(items != null);
    this.<#=FieldName#>.AddRange(items); 
    foreach (var t in items)
        t.Parent = this;
}
public int Count() { return this.<#=FieldName#>.Count; }
int I<#= message.Name.ToNameCs() #>.Count() { return this.Count(); }
public void Remove(<#= field.MessageType.Name.ToNameCs() #> item) 
{
    Debug.Assert(item != null);
    this.<#=FieldName#>.Remove(item); 
    item.Parent = null;
}
<#   } #>
<# } else { //if (field.IsMessage() && !field.IsCsSimple() && !field.IsAny()) {#>
public <#= field.ToTypeCs() #> <#=FieldName#> // <#=t4.FilePos() #>
{ 
    get { return this._<#=FieldName#>; }
    set
    {
        if (this._<#=FieldName#> != value)
        {
            this.On<#=FieldName#>Changing(ref value);
            this._<#=FieldName#> = value;
            this.On<#=FieldName#>Changed();
            this.NotifyPropertyChanged();
<#   if (this.DocMes.IsValidatableBase && FieldName!="IsHasChanged") { #>
            this.ValidateProperty();
            this.IsChanged = true;
<#   } #>
        }
    }
}
<# if (IsNotSkip) { #>
private <#= field.ToTypeCs() #> _<#=FieldName#><#=field.ToSetDefaultCs()#>;
<# } #>
<# if (IsMessage) { #>
I<#=FieldType#> I<#=ClassName#>.<#=FieldName#> { get { return (this as <#=ClassName#>).<#=FieldName#>; } } // <#=t4.FilePos() #>
<# } #>
partial void On<#=FieldName#>Changing(ref <#=FieldType#> to); // <#=t4.FilePos() #>
partial void On<#=FieldName#>Changed();
<# if (field.IsMessage()) { #>
<# if (!this.IsNullable) { #>//I<# } #><#=FieldType#> I<#=ClassName#>.<#=FieldName#> { get { return this._<#=FieldName#>; } }
<# } #>
<# } #>

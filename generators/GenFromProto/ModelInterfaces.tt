<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using Google.Protobuf.WellKnownTypes;
using ViewModelBase;

namespace vSharpStudio.common // <#=Helper.FilePos() #>
{
<# foreach (var t in root.EnumTypes) { 
     this.PushIndent("    "); #>
public enum <#= t.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{
<#   foreach (var tt in t.Values) { #>
    <#= tt.Name #> = <#= tt.Number #>,
<#   } #>
}
<#   this.PopIndent(); #>
<# }
   foreach (var message in messages) { 
     if (message.Name.EndsWith("_nullable"))
       continue;
     this.MessageDoc = JsonDoc.Files[root.Name].Messages[message.Name]; 
     this.PushIndent("    "); #>
<#= this.MessageDoc.Comments #>
public partial interface I<#= message.Name.ToNameCs() #><# if (MessageDoc.IsDefaultBase) { #> : IGuid, IName<# } #> // <#=Helper.FilePos() #>
{
<# if (MessageDoc.IsDefaultBase) { #>
    //IvPluginGeneratorNodeSettings GetSettings(string guidAppPrjGen, string guidSettings); // <#=Helper.FilePos() #>
<# } #>
<#    foreach (var field in message.Fields.InDeclarationOrder()) { 
        this.FieldDoc = JsonDoc.Files[root.Name].Messages[message.Name].Fields[field.Name];  
        if (MessageDoc.IsDefaultBase || MessageDoc.IsBaseWithParent || MessageDoc.IsGenSettings) {
          if (field.Name=="guid") continue;
          if (field.Name=="name") continue;
          if (field.Name=="is_new") continue;
          if (field.Name=="is_has_new") continue;
          if (field.Name=="is_marked_for_deletion") continue;
          if (field.Name=="is_has_marked_for_deletion") continue;
          if (field.Name=="is_has_changed") continue;
          if (field.Name=="sorting_value") continue;
         } 
         this.PushIndent("\t"); #>
<#= this.FieldDoc.Comments #><# if (field.IsRepeated) { #>
<# if (field.IsMap()) { #>
IReadOnlyList<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> { get; } // <#=Helper.FilePos() #>
<# } else if (field.IsCsSimple()) { #>
IReadOnlyList<<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> { get; } // <#=Helper.FilePos() #>
<# } else { #>
IReadOnlyList<I<#= field.ToTypeCs() #>> <#= field.Name.ToNameCs() #> { get; } // <#=Helper.FilePos() #>
<#   if (message.Name.EndsWith(field.Name)) { #>
I<#= field.MessageType.Name.ToNameCs() #> this[int index] { get; }
int Count();
<#   } #>
<# } #>
<#       } else if (field.IsCsSimple()) { #>
<#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #> { get; <#= this.Setter #>} // <#=Helper.FilePos() #>
<#       } else if (field.IsAny() || field.IsNullable()) { #>
<#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #> { get; } // <#=Helper.FilePos() #>
<#       } else { #>
I<#= field.ToTypeCs() #> <#= field.Name.ToNameCs() #> { get; } // <#=Helper.FilePos() #>
<#       } #>
<#       this.PopIndent(); #>
<#   } #>
}
<#    
      this.PopIndent();
   } 
#>
}
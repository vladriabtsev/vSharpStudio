<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="vSharpStudio.common" #>

public partial class Validation<#= root.Package.ToNameCs() #>Visitor : <#= root.Package.ToNameCs() #>Visitor // <#=t4.FilePos() #>
{
    partial void OnVisit(IValidatableWithSeverity p);
    partial void OnVisitEnd(IValidatableWithSeverity p);
<# foreach (var message in messages) { 
     if (message.Name.EndsWith("_nullable"))
       continue;
#>
    protected override void OnVisit(<#= message.Name.ToNameCs() #> p) // <#=t4.FilePos() #>
    {
        this.OnVisit((IValidatableWithSeverity)p);
<# foreach (var field in message.Fields.InDeclarationOrder()) { 
     if (field.FieldType != Google.Protobuf.Reflection.FieldType.Message)
       continue;
     if (field.MessageType.Name.EndsWith("_nullable"))
       continue;
#>
<# if (this.IsBaseWithParent(message.Name)) { #>
<#   if (!field.IsAny() && !field.IsCsSimple() && !field.IsDefaultBase()) { #>
<#     if (field.IsRepeated) { #>
        foreach (var t in p.<#= field.Name.ToNameCs() #>) // <#=t4.FilePos() #>
            ValidateSubAndCollectErrors(p, t);
<#     } else { #>
        ValidateSubAndCollectErrors(p, p.<#= field.Name.ToNameCs() #>); // <#=t4.FilePos() #>
<#     } #>
<#   } else { #>
<#   } #>
<# } else { #>
<#   if (!field.IsAny() && !field.IsCsSimple() && !field.IsDefaultBase()) { #>
<#     if (field.IsRepeated) { #>
        foreach (var t in p.<#= field.Name.ToNameCs() #>) // <#=t4.FilePos() #>
            p.ValidateSubAndCollectErrors(t);
<#     } else { #>
        p.ValidateSubAndCollectErrors(p.<#= field.Name.ToNameCs() #>); // <#=t4.FilePos() #>
<#     } #>
<#   } else { #>
<#   } #>
<# } #>
<# } #>
    }
    protected override void OnVisitEnd(<#= message.Name.ToNameCs() #> p) // <#=t4.FilePos() #>
    {
        this.OnVisitEnd((IValidatableWithSeverity)p);
    }
<# } #>
}

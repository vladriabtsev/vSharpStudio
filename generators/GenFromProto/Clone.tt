<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# if (this.Doc.BaseClass.StartsWith(" : ConfigObjectBase")) { #>
public override void Sort(Type type)
{
<#    int isort=0;
      foreach (var field in message.Fields.InDeclarationOrder()) {
        if (field.IsRepeated) { 
          isort++; #>
    if (type == typeof(<#= field.ToTypeCs() #>))
    {
        this.<#= field.Name.ToNameCs() #>.Sort();
    }
<#      }
      }
      if (isort==0) { #>
    //throw new Exception();
<#    } #>
}
<# } #>
public static <#= message.Name.ToNameCs() #> Clone(ITreeConfigNode parent, <#= message.Name.ToNameCs() #> from, bool isDeep = true<# if (this.Doc.BaseClass.StartsWith(" : ConfigObjectBase")) { #>, bool isNewGuid = false<# } #>)
{
    <#= message.Name.ToNameCs() #> vm = new <#= message.Name.ToNameCs() #>();
<#    foreach (var field in message.Fields.InDeclarationOrder()) { #>
<#      if (field.IsRepeated) { #>
    vm.<#= field.Name.ToNameCs() #> = new SortedObservableCollection<<#= field.ToTypeCs() #>>();
    foreach(var t in from.<#= field.Name.ToNameCs() #>)
        vm.<#= field.Name.ToNameCs() #>.Add(vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.Clone(vm, t, isDeep));
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name == "string_nullable") { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name.EndsWith("_nullable")) { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>.HasValue ? from.<#= field.Name.ToNameCs() #>.Value : (<#= field.ToTypeCs() #>)null;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
    if (isDeep)
        vm.<#= field.Name.ToNameCs() #> = vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.Clone(vm, from.<#= field.Name.ToNameCs() #>, isDeep);
<#      } else { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>;
<#      } 
     } 
if (this.Doc.BaseClass.StartsWith(" : ConfigObjectBase")) {
#>
    if (isNewGuid)
        vm.SetNewGuid();
<# } #>
    return vm;
}
public static void Update(<#= message.Name.ToNameCs() #> to, <#= message.Name.ToNameCs() #> from, bool isDeep = true)
{
<#    foreach (var field in message.Fields.InDeclarationOrder()) { #>
<#      if (field.IsRepeated) { #>
    if (isDeep)
    {
        foreach(var t in to.<#= field.Name.ToNameCs() #>.ToList())
        {
            bool isfound = false;
            foreach(var tt in from.<#= field.Name.ToNameCs() #>)
            {
                if (t == tt)
                {
                    isfound = true;
                    vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.Update(t, tt, isDeep);
                    break;
                }
            }
            if (!isfound)
                to.<#= field.Name.ToNameCs() #>.Remove(t);
        }
        foreach(var tt in from.<#= field.Name.ToNameCs() #>)
        {
            bool isfound = false;
            foreach(var t in to.<#= field.Name.ToNameCs() #>.ToList())
            {
                if (t == tt)
                {
                    isfound = true;
                    break;
                }
            }
            if (!isfound)
            {
                var p = new <#= field.ToTypeCs() #>();
                vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.Update(p, tt, isDeep);
                to.<#= field.Name.ToNameCs() #>.Add(p);
            }
        }
    }
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name == "string_nullable") { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name.EndsWith("_nullable")) { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>.HasValue ? from.<#= field.Name.ToNameCs() #>.Value : (<#= field.ToTypeCs() #>)null;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
    if (isDeep)
        <#= field.ToTypeCs() #>.Update(to.<#= field.Name.ToNameCs() #>, from.<#= field.Name.ToNameCs() #>, isDeep);
<#      } else { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>;
<#      } 
     } 
     #>
}
#region IEditable
public override <#= message.Name.ToNameCs() #> Backup()
{
    bool isDeep = true;
    OnBackupObjectStarting(ref isDeep);
	return <#= message.Name.ToNameCs() #>.Clone(null, this);
}
partial void OnBackupObjectStarting(ref bool isDeep);
public override void Restore(<#= message.Name.ToNameCs() #> from)
{
    bool isDeep = true;
    OnRestoreObjectStarting(ref isDeep);
    <#= message.Name.ToNameCs() #>.Update(this, from, isDeep);
}
partial void OnRestoreObjectStarting(ref bool isDeep);
#endregion IEditable
// Conversion from '<#= message.Name #>' to '<#= message.Name.ToNameCs() #>'
public static <#= message.Name.ToNameCs() #> ConvertToVM(<#= message.Name #> m, <#= message.Name.ToNameCs() #> vm = null)
{
    if (vm == null)
        vm = new <#= message.Name.ToNameCs() #>();
<#    foreach (var field in message.Fields.InDeclarationOrder()) { #>
<#      if (field.IsRepeated) { #>
    vm.<#= field.Name.ToNameCs() #> = new SortedObservableCollection<<#= field.ToTypeCs() #>>();
    foreach(var t in m.<#= field.Name.ToNameCs() #>)
        vm.<#= field.Name.ToNameCs() #>.Add(vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.ConvertToVM(t));
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name == "string_nullable") { #>
    vm.<#= field.Name.ToNameCs() #> = m.<#= field.Name.ToNameCs() #>.HasValue ? m.<#= field.Name.ToNameCs() #>.Value : "";
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name.EndsWith("_nullable")) { #>
    vm.<#= field.Name.ToNameCs() #> = m.<#= field.Name.ToNameCs() #>.HasValue ? m.<#= field.Name.ToNameCs() #>.Value : (<#= field.ToTypeCs() #>)null;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
    vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.ConvertToVM(m.<#= field.Name.ToNameCs() #>, vm.<#= field.Name.ToNameCs() #>);
<#      } else { #>
    vm.<#= field.Name.ToNameCs() #> = m.<#= field.Name.ToNameCs() #>;
<#      } 
     } 
     #>
<# if (this.Doc.BaseClass.StartsWith(" : ConfigObjectBase")) { #>
    vm.OnInitFromDto();
<# } #>
    return vm;
}
// Conversion from '<#= message.Name.ToNameCs() #>' to '<#= message.Name #>'
public static <#= message.Name #> ConvertToProto(<#= message.Name.ToNameCs() #> vm)
{
    <#= message.Name #> m = new <#= message.Name #>();
<#    foreach (var field in message.Fields.InDeclarationOrder()) { #>
<#      if (field.IsRepeated) { #>
    foreach(var t in vm.<#= field.Name.ToNameCs() #>)
        m.<#= field.Name.ToNameCs() #>.Add(vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.ConvertToProto(t));
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name == "string_nullable") { #>
    m.<#= field.Name.ToNameCs() #>.Value = string.IsNullOrEmpty(vm.<#= field.Name.ToNameCs() #>) ? "" : vm.<#= field.Name.ToNameCs() #>;
    m.<#= field.Name.ToNameCs() #>.HasValue = !string.IsNullOrEmpty(vm.<#= field.Name.ToNameCs() #>);
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message && field.MessageType.Name.EndsWith("_nullable")) { #>
    m.<#= field.Name.ToNameCs() #> = new <#= field.MessageType.Name #>();
    m.<#= field.Name.ToNameCs() #>.HasValue = vm.<#= field.Name.ToNameCs() #>.HasValue;
    if (vm.<#= field.Name.ToNameCs() #>.HasValue)
        m.<#= field.Name.ToNameCs() #>.Value = vm.<#= field.Name.ToNameCs() #>.Value;
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
    m.<#= field.Name.ToNameCs() #> = vSharpStudio.vm.ViewModels.<#= field.ToTypeCs() #>.ConvertToProto(vm.<#= field.Name.ToNameCs() #>);
<#      } else { #>
    m.<#= field.Name.ToNameCs() #> = vm.<#= field.Name.ToNameCs() #>;
<#      } 
     } 
     #>
    return m;
}

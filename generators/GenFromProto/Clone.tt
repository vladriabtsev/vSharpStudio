<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# if (this.Doc.IsConfigObjectBase) { #>

public override void Sort(Type type) // <#=Helper.FilePos() #>
{
<#    int isort=0;
      foreach (var field in message.Fields.InDeclarationOrder()) {
        if (field.IsRepeated) { 
          isort++; #>
<# if (!field.IsAny() && field.IsMessage() && JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsConfigObjectBase) { #>
    if (type == typeof(<#= field.ToTypeCs() #>)) // <#=Helper.FilePos() #>
    {
        this.<#= field.Name.ToNameCs() #>.Sort();
    }
<# } #>
<#      }
      }
      if (isort==0) { #>
    // throw new Exception();
<#    } #>
}
<# } #>
public static <#= message.Name.ToNameCs() #> Clone(<# if (message.IsDefaultBase()) { #>ITreeConfigNode parent, <# } #>I<#= message.Name.ToNameCs() #> from, bool isDeep = true<# if (message.IsDefaultBase()) { #>, bool isNewGuid = false<# } #>) // <#=Helper.FilePos() #>
{
    Debug.Assert(from != null);
<# if (message.IsDefaultBase()) { #>
    <#= message.Name.ToNameCs() #> vm = new <#= message.Name.ToNameCs() #>(parent);
<# } else { #>
    <#= message.Name.ToNameCs() #> vm = new <#= message.Name.ToNameCs() #>();
<# } #>
    vm.IsNotifying = false;
    vm.IsValidate = false;
<#    foreach (var field in message.Fields.InDeclarationOrder()) { #>
<#      if (field.IsRepeated) { #>
<# if (field.IsAny()) { #>
    vm.<#= field.Name.ToNameCs() #> = new ObservableCollectionWithActions<Google.Protobuf.WellKnownTypes.Any>(); // <#=Helper.FilePos() #>
    foreach (var t in from.<#= field.Name.ToNameCs() #>) 
        vm.<#= field.Name.ToNameCs() #>.Add(t.Clone());
<# } else if (!field.IsMessage()) { #>
    foreach (var t in from.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
        vm.<#= field.Name.ToNameCs() #>.Add(t);
<# } else if (!JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsConfigObjectBase) { #>
    vm.<#= field.Name.ToNameCs() #> = new ObservableCollectionWithActions<<#= field.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
    foreach (var t in from.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
        vm.<#= field.Name.ToNameCs() #>.Add(<#= field.ToTypeCs() #>.Clone(<# if (field.IsDefaultBase()) { #>vm, <# } #>(<#= field.ToTypeCs() #>)t, isDeep));
<# } else { #>
    vm.<#= field.Name.ToNameCs() #> = new ConfigNodesCollection<<#= field.ToTypeCs() #>>(vm); // <#=Helper.FilePos() #>
    foreach (var t in from.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
        vm.<#= field.Name.ToNameCs() #>.Add(<#= field.ToTypeCs() #>.Clone(<# if (field.IsDefaultBase()) { #>vm, <# } #>(<#= field.ToTypeCs() #>)t, isDeep));
<# } #>
<#      } else if (field.IsMessage() && field.MessageType.Name == "string_nullable") { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } else if (field.IsMessage() && field.MessageType.Name.EndsWith("_nullable")) { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>.HasValue ? from.<#= field.Name.ToNameCs() #>.Value : (<#= field.ToTypeCs() #>)null; // <#=Helper.FilePos() #>
<#      } else if (field.IsMessage() && field.IsAny()) { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>.Clone(); // <#=Helper.FilePos() #>
<#      } else if (!field.IsCsSimple() && field.IsMessage()) { #>
    if (isDeep) // <#=Helper.FilePos() #>
        vm.<#= field.Name.ToNameCs() #> = <#=nameSpace#>.<#= field.ToTypeCs() #>.Clone(<# if (field.IsDefaultBase()) { #>vm, <# } #>from.<#= field.Name.ToNameCs() #>, isDeep);
<#      } else { #>
    vm.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } 
     } 
if (this.Doc.IsDefaultBase) {
#>
    if (isNewGuid) // <#=Helper.FilePos() #>
        vm.SetNewGuid();
<# } #>
    vm.IsNotifying = true;
    vm.IsValidate = true;
    return vm;
}
public static void Update(<#= message.Name.ToNameCs() #> to, I<#= message.Name.ToNameCs() #> from, bool isDeep = true) // <#=Helper.FilePos() #>
{
    Debug.Assert(to != null);
    Debug.Assert(from != null);
<#    foreach (var field in message.Fields.InDeclarationOrder()) { 
        if (field.IsAny())
            continue;
        if (field.IsRepeated) { #>
<# if (field.IsMessage()) { #>
    if (isDeep) // <#=Helper.FilePos() #>
    {
        foreach (var t in to.<#= field.Name.ToNameCs() #>.ToList())
        {
            bool isfound = false;
            foreach (var tt in from.<#= field.Name.ToNameCs() #>)
            {
                if (t.Guid == tt.Guid)
                {
                    isfound = true;
                    <#= field.ToTypeCs() #>.Update((<#= field.ToTypeCs() #>)t, (<#= field.ToTypeCs() #>)tt, isDeep);
                    break;
                }
            }
            if (!isfound)
                to.<#= field.Name.ToNameCs() #>.Remove(t);
        }
        foreach (var tt in from.<#= field.Name.ToNameCs() #>)
        {
            bool isfound = false;
            foreach (var t in to.<#= field.Name.ToNameCs() #>.ToList())
            {
                if (t.Guid == tt.Guid)
                {
                    isfound = true;
                    break;
                }
            }
            if (!isfound)
            {
<# if (field.IsDefaultBase()) { #>
                var p = new <#= field.ToTypeCs() #>(to); // <#=Helper.FilePos() #>
<# } else { #>
                var p = new <#= field.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<# } #>
                <#= field.ToTypeCs() #>.Update(p, (<#= field.ToTypeCs() #>)tt, isDeep);
                to.<#= field.Name.ToNameCs() #>.Add(p);
            }
        }
    }
<# } else { #>
        to.<#= field.Name.ToNameCs() #>.Clear(); // <#=Helper.FilePos() #>
        foreach (var tt in from.<#= field.Name.ToNameCs() #>)
        {
            to.<#= field.Name.ToNameCs() #>.Add(tt);
        }
<# } #>
<#      } else if (field.IsMessage() && field.MessageType.Name == "string_nullable") { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } else if (field.IsMessage() && field.MessageType.Name.EndsWith("_nullable")) { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>.HasValue ? from.<#= field.Name.ToNameCs() #>.Value : (<#= field.ToTypeCs() #>)null; // <#=Helper.FilePos() #>
<#      } else if (!field.IsCsSimple() && field.IsMessage()) { #>
    if (isDeep) // <#=Helper.FilePos() #>
        <#=nameSpace#>.<#= field.ToTypeCs() #>.Update((<#= field.ToTypeCs() #>)to.<#= field.Name.ToNameCs() #>, from.<#= field.Name.ToNameCs() #>, isDeep);
<#      } else { #>
    to.<#= field.Name.ToNameCs() #> = from.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } 
     } 
     #>
}
<# if (this.Doc.IsEditableBase) { #>
// <#=Helper.FilePos() #>
#region IEditable
public override <#= message.Name.ToNameCs() #> Backup()
{
    bool isDeep = true;
    this.OnBackupObjectStarting(ref isDeep);
<# if (message.IsDefaultBase()) { #>
    return <#= message.Name.ToNameCs() #>.Clone(<# if (message.IsDefaultBase()) { #>this.Parent, <# } #>this);
<# } else { #>
    return <#= message.Name.ToNameCs() #>.Clone(<# if (message.IsDefaultBase()) { #>null, <# } #>this);
<# } #>
}
partial void OnBackupObjectStarting(ref bool isDeep);
public override void Restore(<#= message.Name.ToNameCs() #> from)
{
    bool isDeep = true;
    this.OnRestoreObjectStarting(ref isDeep);
    <#= message.Name.ToNameCs() #>.Update(this, from, isDeep);
}
partial void OnRestoreObjectStarting(ref bool isDeep);
#endregion IEditable
<# } #>
// Conversion from '<#= message.Name #>' to '<#= message.Name.ToNameCs() #>'
public static <#= message.Name.ToNameCs() #> ConvertToVM(<#= this.protoNameSpace #>.<#= message.Name #> m, <#= message.Name.ToNameCs() #> vm) // <#=Helper.FilePos() #>
{
    Debug.Assert(vm != null);
    if (m == null)
    {
        return vm;
    }
    vm.IsNotifying = false;
    vm.IsValidate = false;
<#    foreach (var field in message.Fields.InDeclarationOrder()) { 
        if (field.IsAny())
            continue;
        if (field.IsRepeated) { #>
<#        if (field.IsCsSimple()) { #>
    vm.<#= field.Name.ToNameCs() #> = new ObservableCollectionWithActions<<#= field.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
    foreach (var t in m.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
    {
        vm.<#= field.Name.ToNameCs() #>.Add(t);
    }
<#        } else if (!JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsConfigObjectBase) { #>
    vm.<#= field.Name.ToNameCs() #> = new ObservableCollectionWithActions<<#= field.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
    foreach (var t in m.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
    {
<#          if (JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsDefaultBase) { #>
        var tvm = <#= field.ToTypeCs() #>.ConvertToVM(t, new <#= field.ToTypeCs() #>(vm)); // <#=Helper.FilePos() #>
<#          } #>
        var tvm = <#= field.ToTypeCs() #>.ConvertToVM(t, new <#= field.ToTypeCs() #>()); // <#=Helper.FilePos() #>
        vm.<#= field.Name.ToNameCs() #>.Add(tvm);
    }
<#        } else { #>
    vm.<#= field.Name.ToNameCs() #> = new ConfigNodesCollection<<#= field.ToTypeCs() #>>(vm); // <#=Helper.FilePos() #>
    foreach (var t in m.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
    {
<#          if (JsonDoc.Files[root.Name].Messages[field.MessageType.Name].IsConfigObjectBase) { #>
        var tvm = <#= field.ToTypeCs() #>.ConvertToVM(t, new <#= field.ToTypeCs() #>(vm)); // <#=Helper.FilePos() #>
<#          } else { #>
        var tvm = <#= field.ToTypeCs() #>.ConvertToVM(t); // <#=Helper.FilePos() #>
<#          } #>
        vm.<#= field.Name.ToNameCs() #>.Add(tvm);
    }
<#        } #>
<#      } else { #>
<#        if (!field.IsCsSimple() && field.IsMessage() && !field.IsNullable()) { #>
    if (vm.<#= field.Name.ToNameCs() #> == null) // <#=Helper.FilePos() #>
<#          if (field.IsDefaultBase()) { #>
        vm.<#= field.Name.ToNameCs() #> = new <#= field.ToTypeCs() #>(vm); // <#=Helper.FilePos() #>
<#          } else { #>
        vm.<#= field.Name.ToNameCs() #> = new <#= field.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<#          } #>
    <#=nameSpace#>.<#= field.ToTypeCs() #>.ConvertToVM(m.<#= field.Name.ToNameCs() #>, (<#= field.ToTypeCs() #>)vm.<#= field.Name.ToNameCs() #>); // <#=Helper.FilePos() #>
<#        } else { #>
    vm.<#= field.Name.ToNameCs() #> = <#= field.ConvertToVm("m") #>; // <#=Helper.FilePos() #>
<#        } 
        } 
     } 
     #>
<# if (this.Doc.IsDefaultBase) { #>
    vm.OnInitFromDto(); // <#=Helper.FilePos() #>
    vm.IsChanged = false;
    vm.IsHasChanged = false;
<# } #>
    vm.IsNotifying = true;
    vm.IsValidate = true;
    return vm;
}
// Conversion from '<#= message.Name.ToNameCs() #>' to '<#= message.Name #>'
public static <#= this.protoNameSpace #>.<#= message.Name #> ConvertToProto(<#= message.Name.ToNameCs() #> vm) // <#=Helper.FilePos() #>
{
    Debug.Assert(vm != null);
    <#= this.protoNameSpace #>.<#= message.Name #> m = new <#= this.protoNameSpace #>.<#= message.Name #>(); // <#=Helper.FilePos() #>
<#    foreach (var field in message.Fields.InDeclarationOrder()) { 
        if (field.IsRepeated) { #>
    foreach (var t in vm.<#= field.Name.ToNameCs() #>) // <#=Helper.FilePos() #>
<#        if (field.IsCsSimple()) { #>
        m.<#= field.Name.ToNameCs() #>.Add(t); // <#=Helper.FilePos() #>
<#        } else { #>
        m.<#= field.Name.ToNameCs() #>.Add(<#= field.ToTypeCs() #>.ConvertToProto((<#= field.ToTypeCs() #>)t)); // <#=Helper.FilePos() #>
<#        } #>
<#      } else if (field.IsMessage() && field.MessageType.Name == "string_nullable") { #>
    m.<#= field.Name.ToNameCs() #> = new <#= this.protoNameSpace #>.<#= field.MessageType.Name #>(); // <#=Helper.FilePos() #>
    m.<#= field.Name.ToNameCs() #>.Value = string.IsNullOrEmpty(vm.<#= field.Name.ToNameCs() #>) ? "" : vm.<#= field.Name.ToNameCs() #>;
    m.<#= field.Name.ToNameCs() #>.HasValue = !string.IsNullOrEmpty(vm.<#= field.Name.ToNameCs() #>);
<#      } else if (field.IsMessage() && field.MessageType.Name.EndsWith("_nullable")) { #>
    m.<#= field.Name.ToNameCs() #> = new <#= this.protoNameSpace #>.<#= field.MessageType.Name #>(); // <#=Helper.FilePos() #>
    m.<#= field.Name.ToNameCs() #>.HasValue = vm.<#= field.Name.ToNameCs() #>.HasValue;
    if (vm.<#= field.Name.ToNameCs() #>.HasValue)
<#        string mn = field.MessageType.Name.Replace("_nullable", "");
          if (mn == "time_span") { #>
        m.<#= field.Name.ToNameCs() #>.Value = Google.Protobuf.WellKnownTypes.Duration.FromTimeSpan(vm.<#= field.Name.ToNameCs() #>.Value);
<#        } else if (mn == "date_time") { #>
        m.<#= field.Name.ToNameCs() #>.Value = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(vm.<#= field.Name.ToNameCs() #>.Value);
<#        } else { #>
        m.<#= field.Name.ToNameCs() #>.Value = vm.<#= field.Name.ToNameCs() #>.Value;
<#        } #>
<#      } else if (field.IsMessage() && field.MessageType.Name.EndsWith("_nullable_enum")) { #>
    m.<#= field.Name.ToNameCs() #> = new <#= this.protoNameSpace #>.<#= field.MessageType.Name #>(); // <#=Helper.FilePos() #>
    m.<#= field.Name.ToNameCs() #>.HasValue = vm.<#= field.Name.ToNameCs() #>.HasValue;
    if (vm.<#= field.Name.ToNameCs() #>.HasValue)
        m.<#= field.Name.ToNameCs() #>.Value = (<#= this.protoNameSpace #>.<#= field.MessageType.Name.Replace("_nullable_enum", "").ToNameCs() #>)vm.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } else if (!field.IsCsSimple() && field.IsMessage() && !field.IsAny()) { #>
    m.<#= field.Name.ToNameCs() #> = <#=nameSpace#>.<#= field.ToTypeCs() #>.ConvertToProto((<#= field.ToTypeCs() #>)vm.<#= field.Name.ToNameCs() #>); // <#=Helper.FilePos() #>
<#      } else if (field.IsBytes()) { #>
    m.<#= field.Name.ToNameCs() #> = ByteString.CopyFrom(vm.<#= field.Name.ToNameCs() #>); // <#=Helper.FilePos() #>
<#      } else if (field.FieldType == Google.Protobuf.Reflection.FieldType.Enum) {#>
    m.<#= field.Name.ToNameCs() #> = (<#= this.protoNameSpace #>.<#= field.EnumType.Name #>)vm.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } else { #>
    m.<#= field.Name.ToNameCs() #> = vm.<#= field.Name.ToNameCs() #>; // <#=Helper.FilePos() #>
<#      } 
     } 
     #>
    return m;
}

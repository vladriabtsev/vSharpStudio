<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
public static <#= message.Name.ToNameCs() #> Clone(<#= message.Name.ToNameCs() #> from)
{
	<#= message.Name.ToNameCs() #> res = new <#= message.Name.ToNameCs() #>();
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
if (t.IsRepeated) {#>
	res.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.MessageType.Name.ToNameCs() #>>();
	foreach (var t in from.<#= t.Name.ToNameCs() #>)
	{
		res.<#= t.Name.ToNameCs() #>.Add(vSharpStudio.vm.ViewModels.<#= t.ToTypeCs() #>.Clone(t));
	}
<# } else if (t.FieldType == Google.Protobuf.Reflection.FieldType.Message && t.MessageType.Name.EndsWith("_nullable")) {#>
	res.<#= t.Name.ToNameCs() #> = from.<#= t.Name.ToNameCs() #>;
<# } else if (t.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
	res.<#= t.Name.ToNameCs() #> = vSharpStudio.vm.ViewModels.<#= t.ToTypeCs() #>.Clone(from.<#= t.Name.ToNameCs() #>);
<#	} else if (t.IsMap) { #>
	map???
<# } else { #>
	res.<#= t.Name.ToNameCs() #> = from.<#= t.Name.ToNameCs() #>;
<# } #>
<# } #>
	return res;
}
public void UpdateFrom(<#= message.Name.ToNameCs() #> from)
{
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
if (t.IsRepeated) {#>
<# } else if (t.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
	this.<#= t.Name.ToNameCs() #> = from.<#= t.Name.ToNameCs() #>;
<#	} else if (t.IsMap) { #>
<# } else { #>
	this.<#= t.Name.ToNameCs() #> = from.<#= t.Name.ToNameCs() #>;
<# } #>
<# } #>
}
#region IEditable
public override <#= message.Name.ToNameCs() #> Backup()
{
	return vSharpStudio.vm.ViewModels.<#= message.Name.ToNameCs() #>.Clone(this);
}
public override void Restore(<#= message.Name.ToNameCs() #> from)
{
    this.UpdateFrom(from);
}
#endregion IEditable

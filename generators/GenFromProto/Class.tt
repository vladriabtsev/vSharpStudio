<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="vSharpStudio.common" #>
// <#=t4.FilePos() #>
//       IsWithParent: <#=this.Doc.IsWithParent#> 
//      IsDefaultBase: <#=this.Doc.IsDefaultBase#> 
// IsConfigObjectBase: <#=this.Doc.IsConfigObjectBase#> 
//      IsGenSettings: <#=this.Doc.IsGenSettings#> 
//     IsBindableBase: <#=this.Doc.IsBindableBase#> 
//     IsEditableBase: <#=this.Doc.IsEditableBase#> 
//  IsValidatableBase: <#=this.Doc.IsValidatableBase#> 
//    IsISortingValue: <#=this.Doc.IsISortingValue#> 
public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { } // <#=t4.FilePos() #>
<#= this.Doc.Comments #><#= this.Doc.Attributes #>public partial class <#= message.Name.ToNameCs() #><#= this.Doc.BaseClass #>, I<#= message.Name.ToNameCs() #> // <#=t4.FilePos() #>
{
    #region CTOR
<# if (!this.Doc.IsWithParent) { #>
    /*public <#= message.Name.ToNameCs() #>() // <#=t4.FilePos() #>
    {
        this.OnCreating();
    }*/
<# } #>
<# if (this.Doc.IsWithParent) { #>
    public <#= message.Name.ToNameCs() #>(<#=this.Doc.ParentTypeName#>? parent) // <#=t4.FilePos() #>
        : base(parent, <#= message.Name.ToNameCs() #>Validator.Validator)
    {
        this.IsNotifying = false;
        this.IsValidate = false;
        this.OnCreating();
<#    foreach (var t in message.Fields.InDeclarationOrder()) { 
         if (t.IsRepeated) {#>
<# if (this.IsObservable(t)) { #>
        this._<#= t.Name.ToNameCs() #> = new ObservableCollectionWithActions<<#= t.ToTypeCs() #>>(); // <#=t4.FilePos() #>
<# } else { #>
        this._<#= t.Name.ToNameCs() #> = new ConfigNodesCollection<<#= t.ToTypeCs() #>>(this); // <#=t4.FilePos() #>
<# } #>
<#       } else if (t.IsMessage()) { if (t.IsCsSimple()) continue; #>
        this._<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=t4.FilePos() #>
<#		 } else if (t.IsMap) { #>
		map??? // <#=t4.FilePos() #>
<#		 } #>
<# } #>
        this.OnCreated();
        this.IsValidate = true;
        this.IsNotifying = true;
    }
<# } else { #>
    public <#= message.Name.ToNameCs() #>()<# if (this.Doc.IsValidatableBase) { #> 
        : base(<#= message.Name.ToNameCs() #>Validator.Validator)<# } #> // <#=t4.FilePos() #>
    {
<# if (this.Doc.IsValidatableBase) { #>
        this.IsValidate = false;
<# } #>
        this.OnCreating();
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
        if (t.IsCsSimple() && !t.IsRepeated)
           continue;
		if (t.IsRepeated) {#>
<# if (!t.IsMessage() || t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this._<#= t.Name.ToNameCs() #> = new ObservableCollectionWithActions<<#= t.ToTypeCs() #>>(); // <#=t4.FilePos() #>
<# } else { #>
        this._<#= t.Name.ToNameCs() #> = new ConfigNodesCollection<<#= t.ToTypeCs() #>>(this); // <#=t4.FilePos() #>
<# } #>
<#		} else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this._<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(); // <#=t4.FilePos() #>
<# } else if (t.IsNullable()) { #>
<# } else { #>
        this._<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=t4.FilePos() #>
<# } #>
<#		} else if (t.IsMap) { #>
		map??? // <#=t4.FilePos() #>
<#		} #>
<# } #>
        this.OnCreated();
<# if (this.Doc.IsValidatableBase) { #>
        this.IsValidate = true;
<# } #>
    }
<# } #>
    partial void OnCreating();
    partial void OnCreated();
    #endregion CTOR
    #region Procedures
<#	
	this.PushIndent("    ");
	
    var cloner = new Clone(root, message, nameSpace, protoNameSpace);
	this.Write(cloner.TransformText());

	var va = new AcceptNodeVisitor(root, message);
	this.Write(va.TransformText());

    /*if (is_config_base) {
	    var av = new AcceptValidator(root, message);
	    this.Write(av.TransformText());
    }*/

	this.PopIndent(); #>
    #endregion Procedures
    #region Properties
<#	this.PushIndent("    ");
	foreach (var t in this.GetFields())
	{
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent(); #>
<# if (this.Doc.IsWithParent) { #>
/*
    [Browsable(false)]
    public override bool IsChanged // <#=t4.FilePos() #>
    { 
        get { return this._IsChanged; }
        set
        {
            if (VmBindable.IsNotifyingStatic && this.IsNotifying)
            {
                if (this._IsChanged != value)
                {
                    this.OnIsChangedChanging(ref value);
                    this._IsChanged = value;
                    this.OnIsChangedChanged();
                    this.NotifyPropertyChanged();
                }
            }
        }
    }
    partial void OnIsChangedChanging(ref bool v); // <#=t4.FilePos() #>
    */
<# if (this.Doc.IsConfigObjectBase) { #>
    protected override void OnIsChangedChanged() { OnNodeIsChangedChanged(); } // <#=t4.FilePos() #>
<# } else { #>
    //partial void OnIsChangedChanged(); // <#=t4.FilePos() #>
<# } #>
<# if (this.Doc.IsICanAddNode) { #>
    partial void OnIsNewChanged() { OnNodeIsNewChanged(); } // <#=t4.FilePos() #> <#=message.Name#>
    partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
<# } #>
<# } #>
    #endregion Properties
}

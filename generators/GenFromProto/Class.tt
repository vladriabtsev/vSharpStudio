<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="vSharpStudio.proto" #>
<#= message.Declaration.ToLeadingComments() #>
public partial class <#= message.Name.ToNameCs() #> : IAccept
{
<#= message.Declaration.ToTrailingComments("\t") #>
	public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { }
	#region CTOR
	public <#= message.Name.ToNameCs() #>() 
        : base(<#= message.Name.ToNameCs() #>Validator.Validator)
	{
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
       if (t.FieldType != Google.Protobuf.Reflection.FieldType.Message)
         continue;
       if (t.MessageType.Name.EndsWith("_nullable"))
         continue;
		if (t.IsRepeated) {#>
		this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.MessageType.Name.ToNameCs() #>>();
		this.<#= t.Name.ToNameCs() #>.CollectionChanged += <#= t.Name.ToNameCs() #>_CollectionChanged;
<#		} else if (t.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.MessageType.Name.ToNameCs() #>();
<#		} else if (t.IsMap) { #>
		map???
<#		} #>
<# } #>
		OnInit();
	}
<# foreach (var t in message.Fields.InDeclarationOrder()) { if (!t.IsRepeated) continue; #>
	private void <#= t.Name.ToNameCs() #>_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
	{
        switch(e.Action)
        {
            case System.Collections.Specialized.NotifyCollectionChangedAction.Reset: // on .Clear()
                break;
            case System.Collections.Specialized.NotifyCollectionChangedAction.Remove:
                break;
            case System.Collections.Specialized.NotifyCollectionChangedAction.Add:
                #region Default Name
		    	string bname = "<#= t.MessageType.Name.ToNameCs() #>";
			    int i = 0;
    			foreach (var tt in this.<#= t.Name.ToNameCs() #>)
	    		{
                    bool isfound = false;
                    foreach (var t in e.NewItems)
                    {
                        if (t == tt)
                        {
                            isfound = true;
                            break;
                        }
                    }
                    if (isfound)
                        continue;
		    		if (tt.Name.StartsWith(bname))
			    	{
					    string s = tt.Name.Remove(0, bname.Length);
				    	int ii;
    					if (int.TryParse(s, out ii))
	    				{
		    				if (ii > i) i = ii;
			    		}
				    }
    			}
	    		foreach (var t in e.NewItems)
		    	{
                    if (!string.IsNullOrWhiteSpace((t as <#= t.MessageType.Name.ToNameCs() #>).Name))
                        continue;
    				i++;
	    			(t as <#= t.MessageType.Name.ToNameCs() #>).Name = bname + i;
		    	}
                #endregion Default Name
                break;
            default:
                throw new Exception();
		}
	}
<# } #>
	partial void OnInit();
	#endregion CTOR
	#region Procedures
<#	
	this.PushIndent("\t");
	var cloner = new Clone(root, message);
	this.Write(cloner.TransformText());

	var va = new VisitorAccept(root, message);
	this.Write(va.TransformText());
	this.PopIndent(); #>
	#endregion Procedures
	#region Properties
<#	this.PushIndent("\t");
	foreach (var t in message.Fields.InDeclarationOrder())
	{
        if (t.Name == "guid") continue;
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent();
#>
	#endregion Properties
}

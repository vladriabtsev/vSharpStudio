<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= this.Doc.Comments #><#= this.Doc.Attributes #>public partial class <#= message.Name.ToNameCs() #><#= this.Doc.BaseClass #>
{
	public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { }
	#region CTOR
	public <#= message.Name.ToNameCs() #>() : base(<#= message.Name.ToNameCs() #>Validator.Validator)
	{
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
       if (t.IsCsSimple())
         continue;
		if (t.IsRepeated) {#>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.ToTypeCs() #>>();
<# } else if (t.Name == "children") { #>
		this.<#= t.Name.ToNameCs() #> = new SortedObservableCollection<ITreeConfigNode>();
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new SortedObservableCollection<<#= t.ToTypeCs() #>>();
<# } #>
<#		} else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>();
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this);
<# } #>
<#		} else if (t.IsMap) { #>
		map???
<#		} #>
<# } #>
		OnInit();
	}
<# if (this.Doc.IsDefaultBase) { #>
	public <#= message.Name.ToNameCs() #>(ITreeConfigNode parent) : this()
    {
        this.Parent = parent;
        //GetUniqueName(<#= message.Name.ToNameCs() #>.DefaultName, this, this.SubNodes);
    }
<# } #>
	partial void OnInit();
	#endregion CTOR
	#region Procedures
<#	
	this.PushIndent("\t");
	
    var cloner = new Clone(root, message);
	this.Write(cloner.TransformText());

	var va = new AcceptConfigNode(root, message);
	this.Write(va.TransformText());

    /*if (is_config_base) {
	    var av = new AcceptValidator(root, message);
	    this.Write(av.TransformText());
    }*/

	this.PopIndent(); #>
	#endregion Procedures
	#region Properties
<#	this.PushIndent("\t");
	foreach (var t in message.Fields.InDeclarationOrder())
	{
        if (this.Doc.IsDefaultBase && t.Name == "guid") continue;
        if (this.Doc.IsDefaultBase && t.Name == "name") continue;
        if (t.Name == "name_ui") continue;
        if (t.Name == "sorting_value") continue;
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent(); #>

	#endregion Properties
}

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= this.Doc.Comments #><#= this.Doc.Attributes #>public partial class <#= message.Name.ToNameCs() #><#= this.Doc.BaseClass #>, I<#= message.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{
	public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { } 
	#region CTOR
	public <#= message.Name.ToNameCs() #>() : base(<#= message.Name.ToNameCs() #>Validator.Validator)
	{
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
       if (t.IsCsSimple() && !t.IsRepeated)
         continue;
		if (t.IsRepeated) {#>
<# if (!t.IsMessage() || t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new SortedObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMap) { #>
		map??? // <#=Helper.FilePos() #>
<#		} #>
<# } #>
		OnInit();
	}
<# if (this.Doc.IsDefaultBase) { #>
    // <#=Helper.FilePos() #>
	public <#= message.Name.ToNameCs() #>(ITreeConfigNode parent) : base(<#= message.Name.ToNameCs() #>Validator.Validator)
    {
        this.Parent = parent;
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
       if (t.IsCsSimple())
         continue;
		if (t.IsRepeated) {#>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new SortedObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<# } else { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMap) { #>
		map??? // <#=Helper.FilePos() #>
<#		} #>
<# } #>
		OnInit();
    }
<# } #>
	partial void OnInit();
	#endregion CTOR
	#region Procedures
<#	
	this.PushIndent("\t");
	
    var cloner = new Clone(root, message, nameSpace, protoNameSpace);
	this.Write(cloner.TransformText());

	var va = new AcceptNodeVisitor(root, message);
	this.Write(va.TransformText());

    /*if (is_config_base) {
	    var av = new AcceptValidator(root, message);
	    this.Write(av.TransformText());
    }*/

	this.PopIndent(); #>
	#endregion Procedures
	#region Properties
<#	this.PushIndent("\t");
	foreach (var t in message.Fields.InDeclarationOrder())
	{
        if (this.Doc.IsDefaultBase)
        {
            if (t.Name == "guid") continue;
            if (t.Name == "name") continue;
            if (t.Name == "name_ui") continue;
            if (t.Name == "sorting_value") continue;
        }
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent(); #>

	#endregion Properties
}

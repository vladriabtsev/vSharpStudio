<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { } // <#=Helper.FilePos() #>
<#= this.Doc.Comments #><#= this.Doc.Attributes #>public partial class <#= message.Name.ToNameCs() #><#= this.Doc.BaseClass #>, I<#= message.Name.ToNameCs() #> // <#=Helper.FilePos() #>
{
    #region CTOR
<# if (this.Doc.IsDefaultBase) { #>
    public <#= message.Name.ToNameCs() #>() : this((ITreeConfigNode)null)
    {
    }
    public <#= message.Name.ToNameCs() #>(ITreeConfigNode parent) 
        : base(parent, <#= message.Name.ToNameCs() #>Validator.Validator) // <#=Helper.FilePos() #>
    {
        this.IsValidate = false;
        this.OnInitBegin();
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
        if (t.IsCsSimple())
            continue;
        if (t.IsRepeated) {#>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } else { #>
        this.<#= t.Name.ToNameCs() #> = new ConfigNodesCollection<<#= t.ToTypeCs() #>>(this); // <#=Helper.FilePos() #>
<# } #>
<#    } else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<# } else { #>
        this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMap) { #>
		map??? // <#=Helper.FilePos() #>
<#		} #>
<# } #>
        this.OnInit();
        this.IsValidate = true;
    }
<# } else { #>
    public <#= message.Name.ToNameCs() #>()<# if (this.Doc.IsValidatableBase) { #> 
        : base(<#= message.Name.ToNameCs() #>Validator.Validator)<# } #> // <#=Helper.FilePos() #>
    {
        this.IsValidate = false;
        this.OnInitBegin();
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
        if (t.IsCsSimple() && !t.IsRepeated)
           continue;
		if (t.IsRepeated) {#>
<# if (!t.IsMessage() || t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this.<#= t.Name.ToNameCs() #> = new ObservableCollection<<#= t.ToTypeCs() #>>(); // <#=Helper.FilePos() #>
<# } else { #>
        this.<#= t.Name.ToNameCs() #> = new ConfigNodesCollection<<#= t.ToTypeCs() #>>(this); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMessage()) { #>
<# if (t.IsAny() || !JsonDoc.Files[root.Name].Messages[t.MessageType.Name].IsDefaultBase) { #>
        this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(); // <#=Helper.FilePos() #>
<# } else if (t.IsNullable()) { #>
<# } else { #>
        this.<#= t.Name.ToNameCs() #> = new <#= t.ToTypeCs() #>(this); // <#=Helper.FilePos() #>
<# } #>
<#		} else if (t.IsMap) { #>
		map??? // <#=Helper.FilePos() #>
<#		} #>
<# } #>
        this.OnInit();
        this.IsValidate = true;
    }
<# } #>
    partial void OnInitBegin();
    partial void OnInit();
    #endregion CTOR
    #region Procedures
<#	
	this.PushIndent("    ");
	
    var cloner = new Clone(root, message, nameSpace, protoNameSpace);
	this.Write(cloner.TransformText());

	var va = new AcceptNodeVisitor(root, message);
	this.Write(va.TransformText());

    /*if (is_config_base) {
	    var av = new AcceptValidator(root, message);
	    this.Write(av.TransformText());
    }*/

	this.PopIndent(); #>
    #endregion Procedures
    #region Properties
<#	this.PushIndent("    ");
	foreach (var t in message.Fields.InDeclarationOrder())
	{
        if (this.Doc.IsDefaultBase)
        {
            if (t.Name == "guid") continue;
            if (t.Name == "name") continue;
            if (t.Name == "name_ui") continue;
            if (t.Name == "sorting_value") continue;
        }
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent(); #>
<# if (this.Doc.IsDefaultBase) { #>
    [BrowsableAttribute(false)]
    override public bool IsChanged 
    { 
        get 
        { 
            return this._IsChanged; 
        }
        set
        {
            if (this._IsChanged != value)
            {
                this.OnIsChangedChanging(ref value);
                this._IsChanged = value;
                this.OnIsChangedChanged();
                this.NotifyPropertyChanged();
            }
        }
    }
    partial void OnIsChangedChanging(ref bool v);
    partial void OnIsChangedChanged();
    partial void OnIsNewChanged() { OnNodeIsNewChanged(); }
    partial void OnIsHasNewChanged() { OnNodeIsHasNewChanged(); }
    partial void OnIsChangedChanged() { OnNodeIsChangedChanged(); }
    partial void OnIsHasChangedChanged() { OnNodeIsHasChangedChanged(); }
    partial void OnIsMarkedForDeletionChanged() { OnNodeIsMarkedForDeletionChanged(); }
    partial void OnIsHasMarkedForDeletionChanged() { OnNodeIsHasMarkedForDeletionChanged(); }
<# } #>
    #endregion Properties
}

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="vSharpStudio.proto" #>
<#= message.Declaration.ToLeadingComments() #>
public partial class <#= message.Name.ToNameCs() #> : IAccept
{
<#= message.Declaration.ToTrailingComments("\t") #>
	public partial class <#= message.Name.ToNameCs() #>Validator : ValidatorBase<<#= message.Name.ToNameCs() #>, <#= message.Name.ToNameCs() #>Validator> { }
	#region CTOR
	public <#= message.Name.ToNameCs() #>() : base(<#= message.Name.ToNameCs() #>Validator.Validator)
	{
<# foreach (var t in message.Fields.InDeclarationOrder())	{ 
       if (t.FieldType != Google.Protobuf.Reflection.FieldType.Message)
         continue;
       if (t.MessageType.Name.EndsWith("_nullable"))
         continue;
		if (t.IsRepeated) {#>
		this.<#= t.Name.ToNameCs() #> = new SortedObservableCollection<<#= t.MessageType.Name.ToNameCs() #>>();
		this.<#= t.Name.ToNameCs() #>.CollectionChanged += <#= t.Name.ToNameCs() #>_CollectionChanged;
<#		} else if (t.FieldType == Google.Protobuf.Reflection.FieldType.Message) { #>
		this.<#= t.Name.ToNameCs() #> = new <#= t.MessageType.Name.ToNameCs() #>(this);
<#		} else if (t.IsMap) { #>
		map???
<#		} #>
<# } #>
		OnInit();
	}
	public <#= message.Name.ToNameCs() #>(ITreeConfigNode parent) : this()
    {
        this.Parent = parent;
    }
<# foreach (var t in message.Fields.InDeclarationOrder()) { if (!t.IsRepeated) continue; #>
	private void <#= t.Name.ToNameCs() #>_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
	{
        switch(e.Action)
        {
            case System.Collections.Specialized.NotifyCollectionChangedAction.Reset: // on .Clear()
                break;
            case System.Collections.Specialized.NotifyCollectionChangedAction.Remove:
                break;
            case System.Collections.Specialized.NotifyCollectionChangedAction.Move:
                break;
            case System.Collections.Specialized.NotifyCollectionChangedAction.Add:
	    		foreach (var t in e.NewItems)
	    			(t as <#= t.MessageType.Name.ToNameCs() #>).Parent = this;
                break;
            default:
                throw new Exception();
		}
	}
<# } #>
	partial void OnInit();
	#endregion CTOR
	#region Procedures
<#	
	this.PushIndent("\t");
	var cloner = new Clone(root, message);
	this.Write(cloner.TransformText());

	var va = new VisitorAccept(root, message);
	this.Write(va.TransformText());
	this.PopIndent(); #>
	#endregion Procedures
	#region Properties
<#	this.PushIndent("\t");
	foreach (var t in message.Fields.InDeclarationOrder())
	{
        if (t.Name == "guid") continue;
        if (t.Name == "name") continue;
        if (t.Name == "sorting_value") continue;
		var p = new Property(root, message, t);
		this.Write(p.TransformText());
	}
	this.PopIndent();
#>
	#endregion Properties
}

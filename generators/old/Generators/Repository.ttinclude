<#+ 

void GenRepositories(List<Type> sLst, string nameSpace, string classNameSuffics="", bool isReadOnly=false) 
{
#>
///////////////////////////////////////////////////////////////////
// This code was generated automatically by Repository.ttinclude //
///////////////////////////////////////////////////////////////////
namespace <#= nameSpace #>.Repository {
	using System;
	using Commport.Exchange.Entity.Document;
	using Commport.Exchange.Entity.Common;
	using Commport.Exchange.Entity.Core;
	using Commport.Exchange.Entity.EDI;
    using Commport.Exchange.ReportsDs;
    using Commport.Exchange.Core;
	using Commport.EDI.SEF;
	using Common.Web;
	using System.Collections.Generic;
	using System.Linq;
	//using <#= nameSpace #>;
<#+ 
	foreach(Type type in sLst)
	{
		string pName = "Poco"+type.Name+classNameSuffics;
		string eName = type.Name;
#>

	public partial class Repository<#= eName #> : IRepository<#= IsRow(type) || isReadOnly ? "Row" : "<"+pName+">" #>
	{
		private Dictionary<EntAbstract, PocoBase> updateDic=null;
    public Repository<#= eName #>(IUnitOfWork uw, Dictionary<EntAbstract, PocoBase> updateDic) : this(uw)
	{ 
		this.updateDic=updateDic;
	}

    public Repository<#= eName #>(IUnitOfWork uw)
	{ 
      if (uw == null)
      {
        throw new ArgumentNullException("IUnitOfWork parameter is null");
      }
      this._uw = uw;
        Init();
	}

    partial void Init();
	
    public readonly IUnitOfWork _uw;

    protected List<<#= pName #>> ToPoco(List<<#= eName #>> ent)
	{
	  return Repository<#= eName #>.ToPocoStatic(ent);
	}

    public static List<<#= pName #>> ToPocoStatic(List<<#= eName #>> ent)
    {
      List<<#= pName #>> res = new List<<#= pName #>>();
      foreach (<#= eName #> v in ent)
      {
        <#= pName #> p = new <#= pName #>();
        Repository<#= eName #>.SetProperties(v, p);
        res.Add(p);
      }
      return res;
    }

	protected IQueryable<<#= pName #>> ToPocoQueriable(List<<#= eName #>> ent)
    {
      return this.ToPoco(ent).AsQueryable<<#= pName #>>();
    }
<#+ 
		if (!IsRow(type) && !isReadOnly)
		{
#>

    public virtual IQueryable<<#= pName #>> GetQueryableEntities(string where, string sort=null)
    {
      List<<#= type.Name #>> ent = this._uw.Transaction.GetList<<#= type.Name #>>(where, sort, null);
      return this.ToPocoQueriable(ent);
    }

    public virtual List<<#= pName #>> GetListEntities(string where, string sort=null)
    {
      List<<#= type.Name #>> ent = this._uw.Transaction.GetList<<#= type.Name #>>(where, sort, null);
      return this.ToPoco(ent);
    }

    public virtual List<<#= type.Name #>> DeleteListEntities(string where)
    {
      List<<#= type.Name #>> eLst = this._uw.Transaction.GetList<<#= type.Name #>>(where, null, null);
	  foreach(<#= type.Name #> e in eLst)
	  {
	  	e.Delete();
	  }
	  return eLst;
    }

    public virtual <#= eName #> GetEntEntity(int? id)
    {
      if (!id.HasValue)
        throw new ArgumentNullException();
      return this._uw.Transaction.Get<<#= type.Name #>>("Id=" + id, null);
    }

    public virtual <#= pName #> GetEntity(int id)
    {
      <#= eName #> ent = this.GetEntEntity(id);
      if (ent == null)
      {
        throw new ArgumentException("<#= eName #> with Id=" + id + " not found!");
      }
      <#= pName #> p = new <#= pName #>();
      Repository<#= eName #>.SetProperties(ent, p);
      return p;
    }

    partial void BeforeInsert(<#= pName #> p);
    partial void BeforeUpdate(<#= pName #> p, <#= pName #> p_original);
    partial void BeforeDelete(<#= pName #> p);
    partial void AfterInserted<#= eName #>InMemory(<#= eName #> ent, <#= pName #> p);
    partial void AfterUpdated<#= eName #>InMemory(<#= eName #> ent, <#= pName #> p, <#= pName #> p_original);
    partial void AfterDeleted<#= eName #>InMemory(<#= eName #> ent, <#= pName #> p);

/*    public virtual void Insert(<#= eName #> ent)
    {
      ent.Attach(this._uw.Transaction);
      ent.Save();
      AfterInserted<#= eName #>InMemory(ent,);
    }*/

    public virtual int Insert(<#= pName #> p)
    {
      BeforeInsert(p);
      <#= eName #> ent = new <#= eName #>();
      Repository<#= eName #>.SetProperties(p, ent);
      ent.Attach(this._uw.Transaction);
      ent.Save();
      this.updateDic.Add(ent, p);
      AfterInserted<#= eName #>InMemory(ent, p);
      return ent.IdInt.Value;
    }

    public virtual void Update(<#= pName #> p, <#= pName #> original)
    {
      BeforeUpdate(p, original);
      <#= eName #> ent = this.GetEntEntity((int)p.IdInt);
      if (p.Version!=null && !ent.Version.IsEqual(p.Version))
         throw new BusinessConcurrencyException();
      Repository<#= eName #>.SetProperties(p, ent);
      ent.Save();
      this.updateDic.Add(ent, p);
      AfterUpdated<#= eName #>InMemory(ent, p, original);
    }

    public virtual <#= eName #> Delete(int id)
    {
		<#= type.Name #> ent = this.GetEntEntity(id);
		if (ent!=null)
			ent.Delete();
    	return ent;
    }

	public virtual void Delete(<#= pName #> p)
    {
      BeforeDelete(p);
      <#= eName #> ent = this.GetEntEntity((int)p.IdInt);
	  if (ent!=null)
        ent.Delete();
      AfterDeleted<#= eName #>InMemory(ent, p);
    }

	#region IRepository

    IQueryable IRepository.GetQueryableEntities(string where)
    {
      return GetQueryableEntities(where);
    }

    void IRepository.Insert(object entity)
    {
      Insert((<#= pName #>)entity);
    }

    void IRepository.Update(object entity, object original)
    {
      Update((<#= pName #>)entity, (<#= pName #>)original);
    }

    void IRepository.Delete(object entity)
    {
      Delete((<#= pName #>)entity);
    }

	#endregion
<#+ 
		}
#>
	
	#region Helpers
<#+ 
		List<PropertyInfo> pLst = GetProperties(type);
		if (!IsRow(type))
		{
#>
		
		public static void SetProperties(<#= pName #> fromPocoEnt, <#= type.Name #> toEnt)
		{
<#+
	//System.Diagnostics.Debugger.Launch();
        	foreach (PropertyInfo property in pLst)
        	{
					if (property.PropertyType.Name=="MemberTimeStamp")
						continue;
					if (type.Name.StartsWith("EntPurchaseOrderChange") && property.Name=="Status")
						continue;
					if (!this.IsPropertyExcluded(property)) // && property.CanWrite)
					{
						string pfield = property.Name.ToLower();
   	       				Type memType = property.PropertyType;
                        if (this.SetterMethodEnd(memType) == "")
                        {
#>
			toEnt.<#= property.Name #><#= this.SetterMethodStart(memType) #> = fromPocoEnt.<#= property.Name #>;
<#+
                        }
                        else
                        {
#>
			toEnt.<#= property.Name #><#= this.SetterMethodStart(memType) #>fromPocoEnt.<#= property.Name #><#= this.SetterMethodEnd(memType) #>;
<#+
                        }
					}
			}
#>
		}
<#+
		}
#>
		
		public static void SetProperties(<#= type.Name #> fromEnt, <#= pName #> toPocoEnt)
		{
<#+
		//System.Diagnostics.Debugger.Launch();
        bool foundKey = false;
		foreach (PropertyInfo property in pLst)
        {
			if (this.IsKeyProperty(property) || property.Name == "IdInt")
			{
				if (foundKey)
				{
#>
//			Extra Key property is found: <#= property.Name #>
<#+
				}
				foundKey=true;
				string pfield = property.Name.ToLower();
           		Type memType = property.PropertyType;
                        if (this.GetterMethodEnd(memType) == "")
                        {
#>
			toPocoEnt.<#= property.Name #> = fromEnt.<#= property.Name #><#= this.GetterMethodStart(memType) #>;
<#+
                        }
                        else
                        {
#>
			toPocoEnt.<#= property.Name #> = fromEnt.<#= property.Name #><#= this.GetterMethodStart(memType) #><#= this.GetterMethodEnd(memType) #>;
<#+
                        }
			}
		}
		if (!foundKey && !IsRow(type))
		{
#>
			Key property is not found for entity: <#= type.Name #>
<#+
		}
        foreach (PropertyInfo property in pLst)
        {
			if (!this.IsKeyProperty(property) && !this.IsPropertyExcluded(property))
			{
				string pfield = property.Name.ToLower();
           		Type memType = property.PropertyType;
                        if (this.GetterMethodEnd(memType) == "")
                        {
#>
			toPocoEnt.<#= property.Name #> = fromEnt.<#= property.Name #><#= this.GetterMethodStart(memType) #>;
<#+
                        }
                        else
                        {
#>
			toPocoEnt.<#= property.Name #> = fromEnt.<#= property.Name #><#= this.GetterMethodStart(memType) #><#= this.GetterMethodEnd(memType) #>;
<#+
                        }
			}
		}
#>
		}

	#endregion
	
	}
<#+
	}
#>
}
<#+ 
}	
#>
<#+ 
    private string GetMainFolderPath(string path)
    {
        //System.Diagnostics.Debugger.Launch();
        DirectoryInfo currDir = new DirectoryInfo(path);
        DirectoryInfo p = currDir.Parent;
        string prevFolder = "";
        while (p.Parent != null)
        {
            prevFolder = p.Name;
            p = p.Parent;
        }
        return p.Name + prevFolder + "\\";
    }
    private bool IsTypeInList(string typeName, List<Type> sLst)
    {
        foreach(Type type in sLst)
        {
            if (type.Name == typeName)
                return true;
        }
        return false;
    }

    private string PocoBase(Type type)
    {
        if (IsRow(type))  
            return "PocoRowBase";
        return "PocoBase";
    }

    //***********************************************
    //** METHODS
    //***********************************************
    private List<MethodInfo> GetMothods(Type type)
    {
        List<MethodInfo> lst = new List<MethodInfo>();
        MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.CreateInstance);
        foreach(MethodInfo m in methods)
        {
            lst.Add(m);
        }
        return lst;
    }
    private bool IsPocoRiaMethod(MethodInfo mi)
    {
        IList<CustomAttributeData> caLst = CustomAttributeData.GetCustomAttributes(mi);
        foreach(CustomAttributeData ca in caLst)
        {
            string caName = ((System.Reflection.MemberInfo)(((System.Reflection.MemberInfo)(ca.Constructor)).DeclaringType)).Name;
            if (caName=="PocoRiaMethodAttribute")
            {
                return true;
            }
        }
        return false;
    }
    private string GetMethodParams(MethodInfo mi)
    {
        //System.Diagnostics.Debugger.Launch();
        string res="";
        ParameterInfo[] pi = mi.GetParameters();
        foreach(ParameterInfo p in pi)
        {
            if (!string.IsNullOrEmpty(res)) { res=res+", "; }
            string s = (p.ParameterType).Namespace+".";
            res=res + s + ((System.Reflection.MemberInfo)(p.ParameterType)).Name+" "+p.Name;
        }
        return res;
    }

    //*************************************************
    //*** CLASS LEVEL
    //*************************************************
    bool IsRow(Type type)
    {
        if (type.Name.StartsWith("Row") || HasPocoRiaRowAttribute(type))
            return true;
        return false;
    }

    private class ValidatorSet
    {
        public string ValidatorName {get; set;}
        public string ValidatorMethodName {get; set;}
        public string PropertyType {get; set;}
    }

    private List<ValidatorSet> GetValidators(Type type)
    {
        List<ValidatorSet> res = new List<ValidatorSet>();
        IList<CustomAttributeData> attrs = CustomAttributeData.GetCustomAttributes(type);
        foreach(CustomAttributeData a in attrs)
        {
            string attrTypeName = ((System.Reflection.MemberInfo)(((System.Reflection.MemberInfo)(a.Constructor)).DeclaringType)).Name;
            if (attrTypeName == "PocoRiaPropertiesValidatorAttribute")
            {
                ValidatorSet vs = new ValidatorSet();
                vs.ValidatorName = (string)(new List<System.Reflection.CustomAttributeTypedArgument>(a.ConstructorArguments))[0].Value;
                vs.ValidatorMethodName = (string)(new List<System.Reflection.CustomAttributeTypedArgument>(a.ConstructorArguments))[1].Value;
                vs.PropertyType = (string)(new List<System.Reflection.CustomAttributeTypedArgument>(a.ConstructorArguments))[2].Value;
                res.Add(vs);
            }
        }
        return res;
    }

    bool HasPocoRiaRowAttribute(Type type)
    {
        object[] attrs = type.GetCustomAttributes(false);
        foreach(Attribute a in attrs)
        {
            Type t = a.GetType();
            if (t.Name == "PocoRiaRowAttribute")
            {
                return true;
            }
        }
        return false;
    }

    public class Association
    {
        public string OneClass { get; set;}
        public string ManyClass { get; set;}
    }
    //***********************************************
    //*** PROPERTIES
    //***********************************************
    private string TypeForSvc(Type memType)
    {
        //System.Diagnostics.Debugger.Launch();
        if (memType.ContainsGenericParameters)
        {
            return "kuku";
        }
        if (memType.IsGenericType)
        {
            string nam=memType.Name;
            if (nam.StartsWith("MemberEnumString"))
            {
                return "string";
                //			Type[] typeParameters = memType.GetGenericArguments();
                //			return typeParameters[0].Name;
            }
            else if (nam.StartsWith("MemberEnumInt"))
            {
                return "int";
            }
            else {
                nam = nam.Substring(0, nam.Length-2)+"<";
                bool first=true;
                Type[] typeParameters = memType.GetGenericArguments();
                foreach(Type tParam in typeParameters)
                {
                    if (!tParam.IsGenericParameter)
                    {
                        if (!first) {
                            nam=nam+", ";
                        }
                        nam=nam+tParam.Name;
                    }
                }
                nam=nam+">";
                //System.Diagnostics.Debugger.Launch();
            }
            return nam;
        }
        //		if (!string.IsNullOrEmpty(Type.GetEnumName(memType)))
        //		{
        //			return Type.GetEnumName(memType);
        //		}
        switch (memType.Name)
        {
            case "MemberStringHistory":
            case "MemberNString":
            case "MemberString":
                return "string";
            case "MemberIntHistory":
            case "EntityIdInt":
            case "IEntityId":
            case "MemberInt":
                return "int?";
            case "MemberDateTimeHistory":
            case "MemberDateTime":
                return "DateTime?";
            case "MemberDecimalHistory":
            case "MemberDecimal":
                return "decimal?";
            case "MemberBoolHistory":
            case "MemberBool":
                return "bool?";
            case "MemberTimeStamp":
            case "MemberBinary":
                return "byte[]";
            case "Int32":
                return "int";
            case "Bool":
            case "String":
            case "Decimal":
                return memType.Name.ToLower();
            default:
                return memType.Name;
        }
    }

    private string TypeForParse(Type memType)
    {
        //System.Diagnostics.Debugger.Launch();
        if (memType.ContainsGenericParameters)
        {
            return "kuku";
        }
        if (memType.IsGenericType)
        {
            string nam=memType.Name;
            if (nam.StartsWith("MemberEnumString") || nam.StartsWith("MemberEnumInt"))
            {
                Type[] typeParameters = memType.GetGenericArguments();
                return typeParameters[0].Name;
            }
            else {
                nam = nam.Substring(0, nam.Length-2)+"<";
                bool first=true;
                Type[] typeParameters = memType.GetGenericArguments();
                foreach(Type tParam in typeParameters)
                {
                    if (!tParam.IsGenericParameter)
                    {
                        if (!first) {
                            nam=nam+", ";
                        }
                        nam=nam+tParam.Name;
                    }
                }
                nam=nam+">";
                //System.Diagnostics.Debugger.Launch();
            }
            return nam;
        }
        //		if (!string.IsNullOrEmpty(Type.GetEnumName(memType)))
        //		{
        //			return Type.GetEnumName(memType);
        //		}
        switch (memType.Name)
        {
            case "MemberStringHistory":
            case "MemberNString":
            case "MemberString":
                return "string";
            case "MemberIntHistory":
            case "EntityIdInt":
            case "IEntityId":
            case "MemberInt":
                return "int";
            case "MemberDateTimeHistory":
            case "MemberDateTime":
                return "DateTime?";
            case "MemberDecimalHistory":
            case "MemberDecimal":
                return "decimal";
            case "MemberBoolHistory":
            case "MemberBool":
                return "bool";
            case "MemberTimeStamp":
            case "MemberBinary":
                return "byte[]";
            case "Int32":
                return "int";
            case "Bool":
            case "String":
            case "Decimal":
                return memType.Name.ToLower();
            default:
                return memType.Name;
        }
    }
    //private bool IsNullable(PropertyInfo property)
    //{
        //switch (property.PropertyType.Name)
        //{
            //case "MemberDateTimeHistory":
            //case "MemberDateTime":
                //return true;
            //case "MemberStringHistory":
            //case "MemberString":
            //case "MemberIntHistory":
            //case "MemberInt":
            //case "EntityIdInt":
            //case "MemberDecimalHistory":
            //case "MemberDecimal":
            //case "MemberBoolHistory":
            //case "MemberBool":
                //return false;
            //default:
                //return false;
        //}
    //}
    private string AccessMethod(Type memType)
    {
        if (memType.Name.StartsWith("MemberEnumString") || memType.Name.StartsWith("MemberEnumInt"))
            return ".Value.Value";
        switch (memType.Name)
        {
            case "MemberStringHistory":
            case "MemberString":
            case "MemberNString":
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
            case "MemberDateTimeHistory":
            case "MemberDateTime":
            case "MemberDecimalHistory":
            case "MemberDecimal":
            case "MemberBoolHistory":
            case "MemberBool":
            case "MemberTimeStamp":
            case "MemberBinary":
                return ".Value";
            default:
                return "";
        }
    }

    private string GetterMethodStart(Type memType)
    {
        if (memType.Name.StartsWith("MemberEnumString") || memType.Name.StartsWith("MemberEnumInt"))
            return ".Value.Value";
        switch (memType.Name)
        {
            case "MemberStringHistory":
            case "MemberNString":
            case "MemberString":
                return ".Value";
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
                return ".GetNullableValue<int>(";
            case "MemberDateTimeHistory":
            case "MemberDateTime":
                return ".GetNullableValue<DateTime>(";
            case "MemberDecimalHistory":
            case "MemberDecimal":
                return ".GetNullableValue<decimal>(";
            case "MemberBoolHistory":
            case "MemberBool":
                return ".GetNullableValue<bool>(";
            case "MemberTimeStamp":
            case "MemberBinary":
                return ".Value";
            default:
                return "";
        }
    }

    private string GetterMethodEnd(Type memType)
    {
        switch (memType.Name)
        {
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
            case "MemberDateTimeHistory":
            case "MemberDateTime":
            case "MemberDecimalHistory":
            case "MemberDecimal":
            case "MemberBoolHistory":
            case "MemberBool":
                return ")";
            default:
                return "";
        }
    }

    private string SetterMethodStart(Type memType)
    {
        if (memType.Name.StartsWith("MemberEnumString") || memType.Name.StartsWith("MemberEnumInt"))
            return ".Value = "+this.TypeForParse(memType)+".Parse(";
        switch (memType.Name)
        {
            case "MemberStringHistory":
            case "MemberNString":
            case "MemberString":
            case "MemberTimeStamp":
            case "MemberBinary":
                return ".Value";
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
                return ".SetValueFromNullable<int>(";
            case "MemberDateTimeHistory":
            case "MemberDateTime":
                return ".SetValueFromNullable<DateTime>(";
            case "MemberDecimalHistory":
            case "MemberDecimal":
                return ".SetValueFromNullable<decimal>(";
            case "MemberBoolHistory":
            case "MemberBool":
                return ".SetValueFromNullable<bool>(";
            default:
                return "";
        }
    }
    private string SetterMethodEnd(Type memType)
    {
        if (memType.Name.StartsWith("MemberEnumString") || memType.Name.StartsWith("MemberEnumInt"))
            return ")";
        switch (memType.Name)
        {
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
            case "MemberDateTimeHistory":
            case "MemberDateTime":
            case "MemberDecimalHistory":
            case "MemberDecimal":
            case "MemberBoolHistory":
            case "MemberBool":
                return ")";
            default:
                return "";
        }
    }
    private bool IsPropertyExcluded(PropertyInfo property)
    {
        object[] attrs = property.GetCustomAttributes(false);
        foreach(Attribute a in attrs)
        {
            Type t = a.GetType();
            if (t.Name == "PocoRiaExcludeAttribute")
            {
                return true;
            }
        }
        return false;
    }
    private bool IsKeyProperty(PropertyInfo property)
    {
        object[] attrs = property.GetCustomAttributes(false);
        foreach(Attribute a in attrs)
        {
            Type t = a.GetType();
            if (t.Name == "PocoRiaKeyAttribute")
            {
                return true;
            }
        }
        return false;
    }
    private bool IsForeignKeyProperty(PropertyInfo property)
    {
        object[] attrs = property.GetCustomAttributes(false);
        foreach(Attribute a in attrs)
        {
            Type t = a.GetType();
            if (t.Name == "PocoRiaForeignKeyAttribute")
            {
                return true;
            }
        }
        return false;
    }
    private string GetForeignKeyType(PropertyInfo property)
    {
        IList<CustomAttributeData> attrs = CustomAttributeData.GetCustomAttributes(property);
        foreach(CustomAttributeData a in attrs)
        {
            string attrTypeName = ((System.Reflection.MemberInfo)(((System.Reflection.MemberInfo)(a.Constructor)).DeclaringType)).Name;
            if (attrTypeName == "PocoRiaForeignKeyAttribute")
            {
                string s = ((System.Type)((new List<System.Reflection.CustomAttributeTypedArgument>(a.ConstructorArguments))[0].Value)).Name;
                return s;
            }
        }
        return "";
    }

    private bool IsGenericRiaProperty(PropertyInfo property)
    {
        if (property.PropertyType.IsGenericType)
        {
            string nam=property.PropertyType.Name;
            if (nam.StartsWith("MemberEnumString") || nam.StartsWith("MemberEnumInt"))
            {
                return true;
            }
        }
        return false;
    }
    private bool IsRiaProperty(PropertyInfo property)
    {
        if (IsGenericRiaProperty(property))
            return true;
        switch (property.PropertyType.Name)
        {
            case "MemberEnumString":
            case "MemberStringHistory":
            case "MemberNString":
            case "MemberString":
            case "MemberIntHistory":
            case "MemberInt":
            case "EntityIdInt":
            case "MemberDateTimeHistory":
            case "MemberDateTime":
            case "MemberDecimalHistory":
            case "MemberDecimal":
            case "MemberBoolHistory":
            case "MemberBool":
            case "MemberBinary":
            case "MemberTimeStamp":
                return true;
        }
        //			if (!property.CanRead || property.Name=="Status")
        //			{
        //				continue;
        //			}
        object[] attrs = property.GetCustomAttributes(true);
        foreach(Attribute a in attrs)
        {
            Type t = a.GetType();
            if (t.Name == "PocoRiaPropertyAttribute")
            {
                return true;
            }
        }
        return false;
    }

    static Dictionary<string, Assembly> map = new Dictionary<string, Assembly>();

    public Assembly GetAssembly(string asmPath)
    {
        Assembly res=null;
        if (!map.TryGetValue(asmPath, out res))
        {
            FileStream fs = File.Open(asmPath, FileMode.Open, FileAccess.Read, FileShare.Read);
            byte[] buf = new byte[fs.Length];
            fs.Read(buf, 0, (int)fs.Length);
            res = Assembly.Load(buf);
            map[asmPath] = res;
        }
        return res;
    }
    List<Type> GetTypes(string asmPath, string nameSpace, string[] entList) 
    {
        return GetTypes(asmPath, nameSpace, entList, true) ;
    }
    List<Type> GetTypes(string asmPath, string nameSpace, string[] entList, bool include) 
    {
#>
// model assembly path is '<#=        asmPath #>'
<#+ 
        Assembly asm = GetAssembly(asmPath);
        Type[] types = asm.GetExportedTypes();

        //System.Diagnostics.Debugger.Launch();
	
        // Create short list of types
        List<Type> sLst = new List<Type>();
        foreach(Type type in types)
        {
            if (string.IsNullOrEmpty(type.Namespace) || type.Namespace.StartsWith(nameSpace))
            {
                if (!include)
                {
                    if (type.Namespace != nameSpace)
                        continue;
                }
                bool found = false;
                if (entList.Length > 0)
                {
                    foreach(string s in entList)
                    {
                        if (s==type.Name) 
                        {
                            found = true;
                            break;
                        }
                    }
                }
                else
                {
                    object[] attrs = type.GetCustomAttributes(false);
                    foreach(Attribute a in attrs)
                    {
                        Type t = a.GetType();
                        if (t.Name == "PocoRiaClassAttribute")
                        {
                            found=true;
                            break;
                        }
                    }
                }
                if (!found) 
                {
                    continue;
                }
                sLst.Add(type);
            }
        }
        //System.Diagnostics.Debugger.Launch();
        foreach(string s in entList)
        {
            bool f=false;
            foreach(Type type in sLst)
            {
                if (s==type.Name) 
                {
                    f = true;
                    break;
                }
            }
            if (!f)
            {
#>
	type '<#=                s #>' - not found
<#+
            }
        }
        return sLst;	
    }
    List<PropertyInfo> GetProperties(Type type)
    {
        PropertyInfo[] properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
        List<PropertyInfo> pLst = new List<PropertyInfo>();
        foreach (PropertyInfo property in properties)
        {
            if (!this.IsRiaProperty(property))
            {
                continue;
            }
            bool isIncluded=false;
            foreach(var p in pLst)
            {
                if (p.Name==property.Name)
                {
                    isIncluded=true;
                    break;
                }
            }
            if (!isIncluded)
                pLst.Add(property);
        }
        return pLst; 
    }
#>
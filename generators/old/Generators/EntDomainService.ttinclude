<#+ 

void GenDomainService(List<Type> sLst, List<Type> rLst, string nameSpace, string domainServiceName) 
{
#>
/////////////////////////////////////////////////////////////////////////
// This code was generated automatically by EntDomainService.ttinclude //
/////////////////////////////////////////////////////////////////////////
namespace <#= nameSpace #> {
    using System;
    using System.Linq;
#if !WPF_SERVER
    using System.ServiceModel.DomainServices.Hosting;
    using System.ServiceModel.DomainServices.Server;
#endif
    using Common.Web;
    using System.Security.Principal;
    using System.Diagnostics;
    using Common.Web.Cache;
    using <#= nameSpace #>.Repository;
	using Commport.Exchange.Entity.Common;
    using Commport.Exchange.Entity.Core;
    using Commport.Exchange.Entity.Document;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

#if !WPF_SERVER
    [EnableClientAccess()]
#endif
    public partial class <#= domainServiceName #> : RepositoryDomainService
    {
        private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();
        private IPrincipal user;


<#+ 
	foreach(Type type in sLst)
	{
		string pName = "Poco"+type.Name;
		string eName = type.Name;
#>
        private readonly Repository<#= eName #> repository<#= eName #>;
<#+
	}
#>

        public <#= domainServiceName #>(IUnitOfWork unitOfWork, ValidationContext vc=null)
            : base(unitOfWork)
        {
#if !WPF_SERVER
            this.ValidationContext=vc;
#endif
<#+ 
	foreach(Type type in sLst)
	{
		string eName = type.Name;
#>
            this.repository<#= eName #> = new Repository<#= eName #>(unitOfWork, updateDic);
<#+
	}
#>
        }

#if !WPF_SERVER
        partial void BeforeInitialize(DomainServiceContext context);

        public override void Initialize(DomainServiceContext context)
        {
            BeforeInitialize(context);
            base.Initialize(context);
            this.user = context.User;
        }
#endif

        #region CRUID

<#+ 
	foreach(Type type in rLst)
	{
		string eName = type.Name;
#>

        partial void BeforeInsertedPoco<#= eName #>(Poco<#= eName #> p);
        partial void BeforeUpdatedPoco<#= eName #>(Poco<#= eName #> p);
        partial void BeforeDeletedPoco<#= eName #>(Poco<#= eName #> p);
        partial void AfterInsertedPoco<#= eName #>(Poco<#= eName #> p);
        partial void AfterUpdatedPoco<#= eName #>(Poco<#= eName #> p);
        partial void AfterDeletedPoco<#= eName #>(Poco<#= eName #> p);

        //public IQueryable<Poco<#= eName #>> GetQueryPoco<#= eName #>(string where)
        //{
        //    return this.repository<#= eName #>.GetQueryableEntities(where);
        //}

        public List<Poco<#= eName #>> GetListPoco<#= eName #>(string where)
        {
            return this.repository<#= eName #>.GetListEntities(where);
        }
        
        public Poco<#= eName #> GetPoco<#= eName #>(int id)
        {
            return this.repository<#= eName #>.GetEntity(id);
        }

#if !WPF_SERVER
        [Insert]
#endif
        public void Insert<#= eName #>(Poco<#= eName #> p)
        {
            BeforeInsertedPoco<#= eName #>(p);
            p.IdInt = this.repository<#= eName #>.Insert(p);
            AfterInsertedPoco<#= eName #>(p);
        }

#if !WPF_SERVER
        [Update]
#endif
        public void Update<#= eName #>(Poco<#= eName #> p)
        {
            BeforeUpdatedPoco<#= eName #>(p);
            this.repository<#= eName #>.Update(p, null);
            AfterUpdatedPoco<#= eName #>(p);
        }

#if !WPF_SERVER
        [Delete]
#endif
        public void Delete<#= eName #>(Poco<#= eName #> p)
        {
            BeforeDeletedPoco<#= eName #>(p);
            this.repository<#= eName #>.Delete(p);
            AfterDeletedPoco<#= eName #>(p);
        }
<#+
	}
#>

        #endregion

#if !WPF_SERVER
		partial void BeforePersistChangeSet();

		protected override bool PersistChangeSet()
		{
			BeforePersistChangeSet();
			return base.PersistChangeSet();
		}
#endif
    }   // EntDomainService
}   // namespace
<#+ 
}   // GenDomainService method
#>
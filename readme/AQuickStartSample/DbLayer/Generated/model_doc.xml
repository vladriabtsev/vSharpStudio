<?xml version="1.0" encoding="utf-8" ?>
<Doc>
    <Model>
        <Desc name="model">
            <summary>
                Model class
            </summary>
        </Desc>
        <Constants>
            <Desc name="constants">
                <summary>
                    Constants can be used to store some business stable values on specified date and time.
                </summary>
                <remarks>
                    Business usage cases:
                    - company name
                    - tax value
                    - date of begining tax year

                    Constant value history is supporting date years from 1000 to 3040. Time accuracy is one minute.

                    Supported value types are string, numerical, enumeration, and catalog type.
                </remarks>
            </Desc>
            <Desc name="LoadValues">
                <summary>
                    Load all constants values in all setting groups on UTC time
                </summary>
                <param name="utc">UTC time to load values</param>
            </Desc>
            <Desc name="Reset">
                <summary>
                    Remove history for all constants in all setting groups
                </summary>
            </Desc>
            <ConstantGroup>
                <Desc name="LoadValues">
                    <summary>
                        Load all constants values in this setting groups on UTC time
                    </summary>
                    <param name="utc">UTC time to load values</param>
                </Desc>
                <Desc name="CleanOlder">
                    <summary>
                        Clean history records older utcTo.
                        Arter cleaning only one record older utcTo will be kept.
                    </summary>
                    <param name="utcTo">UTC time oldest history value</param>
                </Desc>
                <Desc name="Reset">
                    <summary>
                        Remove history for all constants in this setting groups
                    </summary>
                </Desc>
                <Constant>
                    <Desc name="GUID">
                        <summary>
                            String value of this constant GUID
                        </summary>
                    </Desc>
                    <Desc name="Value">
                        <summary>
                            Value of this constant. Has to be loaded
                        </summary>
                    </Desc>
                    <Desc name="LoadValue">
                        <summary>
                            Load constant value on UTC time
                        </summary>
                        <param name="utc">UTC time to load constant value</param>
                    </Desc>
                    <Desc name="Load">
                        <summary>
                            Load constant value on UTC time
                        </summary>
                        <param name="utc">UTC time to load constant value</param>
                    </Desc>
                    <Desc name="Save">
                        <summary>
                            Save constant value in history on UTC time
                        </summary>
                        <param name="val">New value for constant.</param>
                        <param name="utc">UTC time to save constant value</param>
                    </Desc>
                    <Desc name="SelectBefore">
                        <summary>
                            Select history records before UTC time
                        </summary>
                        <returns>Return list of objects</returns>
                        <param name="utc">UTC time to select older records</param>
                    </Desc>
                    <Desc name="SelectAfter">
                        <summary>
                            Select history records after UTC time
                        </summary>
                        <returns>Return list of history records</returns>
                        <param name="utc">UTC time to select more newest records</param>
                    </Desc>
                    <Desc name="Select">
                        <summary>
                            Select history records for period
                        </summary>
                        <returns>Return list of history records</returns>
                        <param name="utcFrom">UTC time of period start</param>
                        <param name="utcTo">UTC time of period end</param>
                    </Desc>
                    <Desc name="Select()">
                        <summary>
                            Select all history records
                        </summary>
                        <returns>Return list of hystory objects</returns>
                    </Desc>
                    <Desc name="Select()">
                        <summary>
                            Select all history records
                        </summary>
                        <returns>Return list of hystory objects</returns>
                    </Desc>
                    <Desc name="CleanOlder">
                        <summary>
                            Clean history records older utcTo.
                            Arter cleaning only one record older utcTo will be kept.
                        </summary>
                        <param name="utcTo">UTC time oldest history value</param>
                    </Desc>
                    <Desc name="Delete">
                        <summary>
                            Remove history record
                        </summary>
                        <param name="rec">History record for deletion</param>
                    </Desc>
                    <Desc name="Reset">
                        <summary>
                            Remove all history records for constant
                        </summary>
                    </Desc>
                    <Desc name="History_">
                        <summary>
                            History record type
                        </summary>
                    </Desc>
                </Constant>
            </ConstantGroup>
        </Constants>
        <Catalogs>
            <Desc name="catalogs">
                <summary>
                    Catalogs
                </summary>
            </Desc>
            <Desc name="LoadValues">
                <summary>
                    Load all constants values in all setting groups on UTC time
                </summary>
                <param name="utc">UTC time to load values</param>
            </Desc>
            <Catalog>
                <Desc name="CreateAsync">
                    <summary>
                        Create catalog object in memory with next ID from DB (HiLo approach)
                    </summary>
                    <returns>
                        Return catalog object
                    </returns>
                </Desc>
                <Desc name="Create">
                    <summary>
                        Create catalog object in memory with next ID from DB (HiLo approach)
                    </summary>
                    <returns>
                        Return catalog object
                    </returns>
                </Desc>
                <Desc name="SaveAsync">
                    <summary>
                        Save catalog object with all children objects
                    </summary>
                </Desc>
                <Desc name="Save">
                    <summary>
                        Save catalog object with all children objects
                    </summary>
                </Desc>
                <Desc name="RemoveAsync">
                    <summary>
                        Remove catalog object with all children objects
                    </summary>
                </Desc>
                <Desc name="RemoveAsyncById">
                    <summary>
                        Asynchronously remove catalog by ID in DB (with all tabs records)
                    </summary>
                    <param name="id">record Id</param>
                </Desc>
                <Desc name="RemoveAsyncSelect">
                    <summary>
                        Asynchronously remove selected catalogs records in DB (with all tabs records)
                        Use string.Empty for 'where' parameter, if you need delete all records
                    </summary>
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                </Desc>
                <Desc name="Remove">
                    <summary>
                        Remove catalog object with all children objects
                    </summary>
                </Desc>
                <Desc name="RemoveById">
                    <summary>
                        Remove catalog by ID in DB (with all tabs records)
                    </summary>
                    <param name="id">record Id</param>
                </Desc>
                <Desc name="RemoveSelect">
                    <summary>
                        Remove selected catalogs records in DB (with all tabs records)
                        Use string.Empty for 'where' parameter, if you need delete all records
                    </summary>
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                </Desc>
                <Desc name="LoadAsync">
                    <summary>
                        Asynchronously load full catalog object (with all tab objects) by ID
                    </summary>
                    <param name="id">record Id</param>
                    <returns>
                        Return Task of full catalog object
                    </returns>
                </Desc>
                <Desc name="Load">
                    <summary>
                        Load full catalog object (with all tab objects) by ID
                    </summary>
                    <param name="id">record Id</param>
                    <returns>
                        Return full catalog object
                    </returns>
                </Desc>
                <Desc name="SelectAsync">
                    <summary>
                        Asynchronously select records from DB and map them to catalog objects
                    </summary>
                    <returns>
                        Task of IEnumerable collection of catalog objects
                    </returns>
                    <example>
                        <code>
                            // select all
                            var lst = await Catalogs.SampleCatalog.SelectAsync(null);
                            // select up to 25 objets for second page
                            lst = await Catalogs.SampleCatalog.SelectAsync(null, null, 2, 25);
                            // select one record
                            int id = 7;
                            lst = await Catalogs.SampleCatalog.SelectAsync(Catalogs.SampleCatalog.F_ID+"=@pid", new { pid = id });
                        </code>
                    </example>
                    <param name="where">A SQL text for WHERE clause.</param>
                    <param name="param">An array of parameters.</param>
                    <param name="sort">An array of DB field names for sorting. Required if page is selected.</param>
                    <param name="page">Page number (starting with 1).</param>
                    <param name="pagesize">Page size. Unlimited if equal zero. Required if page is selected.</param>
                </Desc>
                <Desc name="Select">
                    <summary>
                        Select records from DB and map them to catalog objects
                    </summary>
                    <returns>
                        IEnumerable collection of catalog objects
                    </returns>
                    <example>
                        <code>
                            // select all
                            var lst = await Catalogs.SampleCatalog.Select(null);
                            // select up to 25 objets for second page
                            lst = await Catalogs.SampleCatalog.Select(null, null, 2, 25);
                            // select one record
                            int id = 7;
                            lst = await Catalogs.SampleCatalog.Select(Catalogs.SampleCatalog.F_ID+"=@pid", new { pid = id });
                        </code>
                    </example>
                    <param name="where">A SQL text for WHERE clause.</param>
                    <param name="param">An array of parameters.</param>
                    <param name="sort">An array of DB field names for sorting. Required if page is selected.</param>
                    <param name="page">Page number (starting with 1).</param>
                    <param name="pagesize">Page size. Unlimited if equal zero. Required if page is selected.</param>
                </Desc>
                <Desc name="CountAsync">
                    <summary>Count selected records from DB</summary>
                    <returns>
                        Return quantity
                    </returns>
                    See <see cref="SelectAsync(string,object,string,int,int)"/> for sample.
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                </Desc>
                <Desc name="Count">
                    <summary>Count selected records from DB</summary>
                    <returns>
                        Return quantity
                    </returns>
                    See <see cref="SelectAsync(string,object,string,int,int)"/> for sample.
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                </Desc>
                <Desc name="UpdateAsync">
                    <summary>
                        Asynchronously update catalog record in DB (without sub records)
                    </summary>
                </Desc>
                <Desc name="Update">
                    <summary>
                        Update catalog record in DB (without sub records)
                    </summary>
                </Desc>
                <Desc name="InsertAsync">
                    <summary>
                        Asynchronously insert record of catalog in a DB (without sub records)
                    </summary>
                    <returns>Return Task</returns>
                </Desc>
                <Desc name="Insert">
                    <summary>
                        Insert record of catalog in a DB (without sub records)
                    </summary>
                </Desc>
                <Desc name="DeleteAsync">
                    <summary>
                        Asynchronously delete record of catalog in a DB (without sub records)
                    </summary>
                    <returns>Return Task</returns>
                </Desc>
                <Desc name="DeleteAsyncById">
                    <summary>
                        Asynchronously delete record of catalog in a DB (without sub records)
                    </summary>
                    <param name="id">record Id</param>
                    <returns>Return Task</returns>
                </Desc>
                <Desc name="DeleteAsyncSelect">
                    <summary>
                        Asynchronously delete records in DB
                        Use string.Empty for 'where' parameter, if you need delete all records
                    </summary>
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                    <returns>Return Task</returns>
                </Desc>
                <Desc name="Delete">
                    <summary>
                        Delete record of catalog in a DB (without sub records)
                    </summary>
                </Desc>
                <Desc name="DeleteById">
                    <summary>
                        Delete record of catalog in a DB (without sub records)
                    </summary>
                    <param name="id">record Id</param>
                </Desc>
                <Desc name="DeleteSelect">
                    <summary>
                        Delete records in DB
                        Use string.Empty for 'where' parameter, if you need delete all records
                    </summary>
                    <param name="where">string with where defenition</param>
                    <param name="param">parameters for where defenition</param>
                </Desc>
                <View>
                    <Desc name="GetViewAsync">
                        <summary>
                            Asynchronously return plain view
                        </summary>
                        <returns>
                            Task of IEnumerable collection of catalog view objects
                        </returns>
                        <param name="pagesize">Page size. Unlimited if equal zero.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting.</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                    <Desc name="GetView">
                        <summary>
                            Return plain view.
                        </summary>
                        <returns>
                            IEnumerable collection of catalog view objects
                        </returns>
                        <param name="pagesize">Page size. Unlimited if equal zero.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting.</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                    <Desc name="GetTreeViewAsync">
                        <summary>Get asynchronously partial catalog records based on tree query</summary>
                        <param name="id">Root record ID. If null, query will use all root records</param>
                        <param name="deep">
                            Tree deepnest for query.
                            For example:
                              - deep==1 and id==null than all root records will be returned
                              - deep==1 and id==not null than all records one level below record with that id will be returned
                              - deep==2 and id==not null than all records one level and two level below record with that id will be returned
                              - deep==0 and id==not null than main record with that id and all records below main record will be returned
                        </param>
                        <param name="sort">Array sorting??</param>
                        <param name="where">Additional catalog fields conditions</param>
                        <param name="param">Parameters for WHERE conditions</param>
                        <returns>
                            Task of IEnumerable collection of partial catalog records
                        </returns>
                    </Desc>
                    <Desc name="GetTreeView">
                        <summary>Get partial catalog records based on tree query</summary>
                        <param name="id">Root record ID. If null, query will use all root records</param>
                        <param name="deep">
                            Tree deepnest for query.
                            For example:
                            - deep==1 and id==null than all root records will be returned
                            - deep==1 and id==not null than all records one level below record with that id will be returned
                            - deep==2 and id==not null than all records one level and two level below record with that id will be returned
                            - deep==0 and id==not null than main record with that id and all records below main record will be returned
                        </param>
                        <param name="sort">Array sorting??</param>
                        <param name="where">Additional catalog fields conditions</param>
                        <param name="param">Parameters for WHERE conditions</param>
                        <returns>
                            IEnumerable collection of partial catalog records
                        </returns>
                    </Desc>
                    <Desc name="GetViewDetailAsync">
                        <summary>
                            Asynchronously return plain view based on parentId.
                            if selectedId is null, than result contains all root folders/items.
                            if selected is not null, than result contains parent folders, selected record, and all child records of view.
                        </summary>
                        <returns>
                            Task of IEnumerable collection of catalog view objects
                        </returns>
                        <param name="parentId">Parent record Id or null to start from root</param>
                        <param name="pagesize">Page size. Unlimited if equal zero.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting.</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                    <Desc name="GetViewDetail">
                        <summary>
                            Return plain view based on parentId.
                            if selectedId is null, than result contains all root folders/items.
                            if selected is not null, than result contains parent folders, selected record, and all child records of view.
                        </summary>
                        <returns>
                            IEnumerable collection of catalog view objects
                        </returns>
                        <param name="parentId">Parent record Id or null to start from root</param>
                        <param name="pagesize">Page size. Unlimited if equal zero.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting.</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                    <Desc name="GetTreeListViewAsync">
                        <summary>
                            Asynchronously return plain view of tree based on selectedId.
                            if selectedId is null, than result contains all root folders/items.
                            if selected is not null, than result contains parent folders, selected record, and all child records of view.
                        </summary>
                        <returns>
                            Task of IEnumerable collection of catalog view objects
                        </returns>
                        <param name="selectedId">Selected record Id or null to start from root</param>
                        <param name="pagesize">Page size. Unlimited if equal zero. Required if page is selected.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting. Required if page is selected. Sorting is applied only for child records of selected record</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                    <Desc name="GetTreeListView">
                        <summary>
                            Return plain view of tree based on selectedId.
                            if selectedId is null, than result contains all root folders/items.
                            if selected is not null, than result contains parent folders, selected record, and all child records of view.
                        </summary>
                        <returns>
                            IEnumerable collection of catalog view objects
                        </returns>
                        <param name="selectedId">Selected record Id or null to start from root</param>
                        <param name="pagesize">Page size. Unlimited if equal zero. Required if page is selected.</param>
                        <param name="page">Page number (starting with 1).</param>
                        <param name="sort">An array of DB field names for sorting. Required if page is selected. Sorting is applied only for child records of selected record</param>
                        <param name="where">A SQL text for WHERE clause.</param>
                        <param name="param">An array of parameters.</param>
                    </Desc>
                </View>
            </Catalog>
        </Catalogs>
    </Model>
</Doc>
